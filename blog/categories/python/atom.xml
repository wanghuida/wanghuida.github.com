<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2014-01-27T15:16:47+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sqlalchemy 定义模型]]></title>
    <link href="http://www.wanghd.com/blog/2013/05/24/sqlalchemy-ding-yi-mo-xing/"/>
    <updated>2013-05-24T17:04:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/05/24/sqlalchemy-ding-yi-mo-xing</id>
    <content type="html"><![CDATA[<ol>
<li>下面是一个基本的模型，对应db的一张表</li>
<li>nullable 代表是否可以为空</li>
<li>server_default 代表默认值</li>
<li>常用类型：Integer, String, DateTime, TIMESTAMP, DECIMAL</li>
</ol>


<p>```python</p>

<h1>!/usr/bin/env python</h1>

<h1>coding: utf-8</h1>

<p>from sqlalchemy.sql.expression import text
from sqlalchemy import Column, Integer, String, DateTime, TIMESTAMP, DECIMAL
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()</p>

<p>class Member(Base):</p>

<pre><code>__tablename__ = 'tbl_member'

id = Column(Integer, primary_key=True)
ext_id = Column(Integer, nullable=False, server_default=text(str(0)))
username = Column(String(64), nullable=False)
my_desc = Column(Text)

createtime = Column(DateTime, nullable=False)
modifytime = Column(TIMESTAMP, nullable=False, server_default=text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flask nginx uwsgi 部署]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/01/flask-nginx-uwsgibu-shu/"/>
    <updated>2013-02-01T14:10:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/01/flask-nginx-uwsgibu-shu</id>
    <content type="html"><![CDATA[<h3>安装 uwsgi</h3>

<p><code>
$ brew install uwsgi
</code></p>

<h3>安装 nginx</h3>

<p><code>
$ brew install nginx
</code></p>

<h3>配置Flask环境</h3>

<p><code>
$ mkdir test
$ cd test
$ virtualevn sandbox
$ . sandbox/bin/activate
$ pip install Flask
</code></p>

<!-- more -->


<h3>创建一个Flask项目</h3>

<p>```
$ touch test.py</p>

<h1>内容如下</h1>

<p>from flask import Flask</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route('/')
def hello():</p>

<pre><code>return 'Hello World'
</code></pre>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>app.run()
</code></pre>

<p>```</p>

<h3>创建uwsgi配置文件</h3>

<p>```
$ touch test_config.xml</p>

<p><uwsgi></p>

<pre><code>&lt;pythonpath&gt;/Users/william/project/test&lt;/pythonpath&gt;
&lt;module&gt;test&lt;/module&gt;
&lt;callable&gt;app&lt;/callable&gt;
&lt;socket&gt;/tmp/uwsgi.sock&lt;/socket&gt;
&lt;master/&gt;
&lt;processes&gt;4&lt;/processes&gt;
&lt;memory-report/&gt;
</code></pre>

<p></uwsgi></p>

<p>```</p>

<h3>nginx 配置</h3>

<p>```
server {</p>

<pre><code>listen 80;
server_name www.test.com;

location / {
    include uwsgi_params;
    uwsgi_pass unix:/tmp/uwsgi.sock; 
}
</code></pre>

<p>}
```</p>

<h3>启动服务</h3>

<p>```
sudo nginx -s reload</p>

<h1>支持virtualenv, uswgi还可以--py-auto-reload</h1>

<p>sudo uwsgi -x /Users/william/project/test/test_config.xml --virtualenv sandbox</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 一周体验记]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/22/python-zhou-ti-yan-ji/"/>
    <updated>2012-07-22T10:27:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/22/python-zhou-ti-yan-ji</id>
    <content type="html"><![CDATA[<h3>python可以快速上手</h3>

<ul>
<li>推荐官方的新手教程 <a href="http://docs.python.org/tutorial/">http://docs.python.org/tutorial/</a></li>
</ul>


<!-- more -->


<h3>python强制空白</h3>

<ul>
<li>这是python特有的，代码可维护性大大提高了</li>
</ul>


<h3>python语法糖</h3>

<ul>
<li>很甜很甜</li>
</ul>


<h3>列表推导,列表范围</h3>

<ul>
<li><p>虽然列表的处理还不如perl那么灵活，但已经有那么点意思了</p></li>
<li><p>但是学习成本上python要优于perl</p></li>
</ul>


<h3>PyPI</h3>

<ul>
<li>类似于CPAN是一样的</li>
</ul>


<h3>python在web上的应用</h3>

<ul>
<li><p>python的框架有很多，可以在这个地址上找到绝大部分 <a href="http://www.wsgi.org/en/latest/frameworks.html">http://www.wsgi.org/en/latest/frameworks.html</a></p></li>
<li><p>我选择了flask，同事的建议是比较小巧，好用</p></li>
<li><p>可以深入了解一下Werkzeug,flask是基于它开发的</p></li>
<li><p>之前一直有个疑惑，每个框架都有内置的http server，这个http server到底是python提供的还是框架提供的? 看了一些Werkzeug的源码才清楚。Werkzeug里的serving.py使用了python的BaseHTTPServer库，Werkzeug对http进行分析和封装。So 我觉得Werkzeug是可以深入研究的。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
