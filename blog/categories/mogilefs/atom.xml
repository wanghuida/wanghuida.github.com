<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mogilefs | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/mogilefs/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2013-03-08T10:49:44+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mogilefs设备损坏处理流程]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/25/mogilefsshe-bei-sun-pi-chu-li-liu-cheng/"/>
    <updated>2012-11-25T19:34:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/25/mogilefsshe-bei-sun-pi-chu-li-liu-cheng</id>
    <content type="html"><![CDATA[<ul>
<li>这里单个dev对应一个磁盘,假设是sdb</li>
<li>文件系统使用xfs</li>
<li>mogstored使用nginx</li>
</ul>


<p>1.把磁盘标记为dead</p>

<p><code>bash
mogadm device mark &lt;hostname&gt; &lt;devid&gt; &lt;status&gt;
</code></p>

<!-- more -->


<p>2.格式化新磁盘或损坏的磁盘, 并挂到新的目录</p>

<p>```bash
mkfs.xfs -f -i size=512 -l size=128m,lazy-count=1 -d agcount=16 /dev/sdb</p>

<p>mkdir -p /var/mogdata/{new-dev}</p>

<p>mount -t xfs -o noatime,noikeep,logbufs=8 /var/mogdata/{new-dev} /dev/sdb</p>

<h1>增加到fstab</h1>

<p>vim /etc/fstab
/dev/sdb     /var/mogdata/{new-dev}    xfs    noatime,noikeep,logbufs=8    0 0
```</p>

<p>3.配置nginx</p>

<p>```
chown -R mogile.daemon /var/mogdata/{new-dev}</p>

<h1>建议注释掉损坏的location</h1>

<p>vim /etc/nginx/conf.d/{xxx.conf}</p>

<p>location /{new-dev}/ {</p>

<pre><code>expires             max;
root                /var/mogdata;
client_max_body_size        20m;
client_body_temp_path       /var/mogdata/{new-dev}/temp;
dav_methods                 PUT DELETE MKCOL;
create_full_put_path        on;
dav_access                  user:rw group:r all:r;
</code></pre>

<p>}</p>

<p>/etc/init.d/nginx reload
```</p>

<p>4.增加一个新设备</p>

<p>```
mogadm device add <hostname> <devid> [opts]        Add a device to a host.</p>

<pre><code>  &lt;devid&gt;              Numeric devid.  Never reuse these.
  &lt;hostname&gt;           Hostname to add a device
  --status=s           One of 'alive' or 'down'.  Defaults to 'alive'.
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MogileFS安装配置]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/22/mogilefsan-zhuang-pei-zhi/"/>
    <updated>2012-11-22T17:19:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/22/mogilefsan-zhuang-pei-zhi</id>
    <content type="html"><![CDATA[<h3>基本介绍</h3>

<ul>
<li>mogilefs是一个分布式的文件系统解决方案</li>
<li>特点是:无单点失效的问题，自动复制无需raid，easy的命名空间，自修复机制，成熟的管理工具，源码清晰推荐阅读</li>
</ul>


<!-- more -->


<h3>安装基本组件</h3>

<p>```bash
yum groupinstall "Development Tools"</p>

<h1>cpan是perl的包管理工具</h1>

<p>yum install cpan
```</p>

<h3>安装mogilefs</h3>

<p>```bash</p>

<h1>进入cpan,初始化直接自动就好</h1>

<p>cpan</p>

<blockquote><p>install IO::AIO
install MogileFS::Client
install MogileFS::Utils</p>

<h1>如果有问题直接用force install</h1>

<p>install MogileFS::Server
```</p></blockquote>

<h3>安装配置mysql</h3>

<p>```bash</p>

<h1>安装mysql</h1>

<p>yum install mysql mysql-server
mysqladmin -u root password 123456</p>

<h1>进入mysql,新建mogile用户</h1>

<p>mysql -uroot -p123456
mysql> create database mogilefs;
mysql> grant all on mogilefs.* to mogile@localhost identified by '123456';
mysql> flush privileges;</p>

<h1>导入mogilefs表</h1>

<p>mogdbsetup --dbpass=123456 --yes
```</p>

<h3>mogilefs配置</h3>

<ul>
<li>mogilefsd配置</li>
</ul>


<p>```bash</p>

<h1>/etc/mogilefs是默认的配置路径，-c可以修改</h1>

<p>mkdir -p /etc/mogilefs
cd /etc/mogilefs
vim mogilefsd.conf</p>

<h1>内容如下</h1>

<p>pidfile = /tmp/mogilefsd.pid    #存放pid
daemonize = 1                   #守护进程</p>

<p>db_dsn  = DBI:mysql:mogilefs:127.0.0.1  #数据库配置
db_user = mogile
db_pass = 123456</p>

<p>conf_port = 7001                #监听端口
node_timeout = 2                #节点超时时间
rebalance_ignore_missing = 1    #rebalance时会删除文件，删除时如果找不到文件不报错直接跳过</p>

<p>query_jobs = 20                 #正真处理请求的job个数
delete_jobs = 3                 #处理删除队列的job个数
replicate_jobs = 5              #处理复制队列的job个数
reaper_jobs = 1                 #设备设置为dead后，处理补救工作的job个数</p>

<pre><code>                            #其实还有其他job，默认为1个
</code></pre>

<p>```</p>

<ul>
<li>mogstored配置</li>
</ul>


<p>```bash</p>

<h1>设置文件存储路径，不要忘记修改拥有者</h1>

<p>mkdir -p /var/mogdata
adduser --gid daemon mogile
chown mogile.daemon /var/mogdata
vim mogstored.conf</p>

<h1>内容如下</h1>

<p>httplisten = 0.0.0.0:7500       #文件存储端口
mgmtlisten = 0.0.0.0:7501       #监控磁盘状态端口
docroot = /var/mogdata          #文件存储路径</p>

<p>pidfile = /tmp/mogstored.pid    #存储pid
daemonize = 1                   #守护进程
```</p>

<h3>启动mogilefs</h3>

<p>```bash
vim /etc/security/limits.conf</p>

<h1>内容如下，让mogile可以打开更多的连接数</h1>

<p>mogile soft nofile 65535
mogile hard nofile 65535</p>

<h1>切换用户启动</h1>

<p>su mogile -c 'mogstored'
su mogile -c 'mogilefsd'</p>

<h1>验证已经启动成功</h1>

<p>ps auxf | grep mogile
mogadm check</p>

<p>```</p>

<h3>已经安装好了，接来应该做点什么呢</h3>

<ul>
<li>学习mogadm指令，因为mogadm是必会工具</li>
<li>试着client连接mogilefsd存储文件吧</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time::HiRes介绍]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/22/time-hiresjie-shao/"/>
    <updated>2012-11-22T17:18:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/22/time-hiresjie-shao</id>
    <content type="html"><![CDATA[<h3>Time::HiRes库介绍</h3>

<ul>
<li>HiRes是high resolution的简写，译为高分辨率</li>
<li>HiRes其实是提供一些更高精度的alarm, sleep, gettimeofday, interval timers</li>
</ul>


<!-- more -->


<h3>usleep，nanosleep实例</h3>

<ul>
<li>usleep参数是微妙</li>
<li>nanosleep参数是纳秒</li>
</ul>


<p><code>perl
Time::HiRes::usleep(100_000);
print "100 milliseconds\n";
Time::HiRes::nanosleep(1000_000_000);
print "1 seconds\n";
</code></p>

<h3>ualarm实例</h3>

<ul>
<li>ualarm(0)会撤销警告信号</li>
</ul>


<p>```perl
eval {</p>

<pre><code>local $SIG{ALRM} = sub { die "receive signal\n" };
Time::HiRes::ualarm 1000_000;
sleep 2;
print "never print";
</code></pre>

<p>};</p>

<p>if($@) {</p>

<pre><code>print $@;
</code></pre>

<p>}</p>

<p>eval {</p>

<pre><code>local $SIG{ALRM} = sub { die "receive signal\n" };
Time::HiRes::ualarm 2000_000;
sleep 1;
Time::HiRes::ualarm 0; #cancel alarm
</code></pre>

<p>};</p>

<p>if($@) {</p>

<pre><code>print $@;
</code></pre>

<p>}else{</p>

<pre><code>print "cancel alarm signal\n";
</code></pre>

<p>}  <br/>
```</p>

<h3>tv_interval和gettimeofday实例</h3>

<ul>
<li>tv_interval返回两个gettimeofday引用相差的秒数</li>
<li>省略tv_interval的第二个参数，会自动使用当前时间代替</li>
</ul>


<p><code>perl
my @start = Time::HiRes::gettimeofday;
print Dumper(\@start);
sleep(4);
my $diff = Time::HiRes::tv_interval(\@start);
print "$diff\n";
</code></p>

<h3>setitimer实例</h3>

<ol>
<li>ITIMER_REAL: 真实时间</li>
<li>ITIMER_VIRTUAL: 用户时间</li>
<li><p>ITIMER_PROF: 系统时间</p></li>
<li><p>getitimer可以取得setitimer还有多久开始执行</p></li>
</ol>


<p>```perl
use Time::HiRes qw ( setitimer ITIMER_VIRTUAL time );
$SIG{VTALRM} = sub { print time, "\n" };
setitimer(ITIMER_VIRTUAL, 3.5, 1);
while(1){ }</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复mogilefs目录owner]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/22/xiu-fu-mogilefsmu-lu-owner/"/>
    <updated>2012-11-22T17:16:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/22/xiu-fu-mogilefsmu-lu-owner</id>
    <content type="html"><![CDATA[<h3>什么情况会导致mogilefs的数据目录owner不正确</h3>

<ul>
<li>直接使用root启动mogstored会导致增加的文件和文件夹为root</li>
<li>重新用mogile启动mogstored后，mogile用户无法删除root的文件，最终delete队列无法处理</li>
</ul>


<h3>如何处理</h3>

<ol>
<li>直接chown -R，这是最直接的方法，如果1T的磁盘被这样操作，会10小时util为100</li>
<li>自己写一个脚本慢处理，脚本思路如下</li>
</ol>


<!-- more -->


<p>```perl
package MtChown;</p>

<p>use strict;
use warnings;
use Data::Dumper;
use Carp;
use Time::HiRes;</p>

<p>sub run {</p>

<pre><code>my ($dir,$user) = @_;

if(!defined($dir) || !defined($user)){
    print "please set option [-D|--dir -u|--user]\n"; 
    return 0; 
}
$dir =~ s/(.+)\/$/$1/i;

croak("[$dir] isn't a directory or file") unless (-f $dir or -d $dir);
my ($login,$pass,$uid,$gid) = getpwnam($user) or die "$user not in passwd file";
carp("$uid,$gid");
process($dir,$uid,$gid);
return 1;
</code></pre>

<p>}</p>

<p>sub process {</p>

<pre><code>my ($dir,$u,$g) = @_;
if (-d $dir) {
    opendir(FILE,$dir) or croak("opendir error [$dir]");
    my @files = readdir(FILE);
    closedir(FILE);
    foreach (@files) {
        next if ($_ eq '.' || $_ eq '..');
        my $tmp_dir = "$dir/$_";
        if (-d $tmp_dir) {
            process($tmp_dir,$u,$g)
        }else {
            chowner($u,$g,$tmp_dir);
        }
    }
}
chowner($u,$g,$dir);
</code></pre>

<p>}</p>

<p>sub chowner {</p>

<pre><code>my ($u,$g,$dir) = @_;
my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($dir);
if($u != $uid || $g != $gid){
    my $ret = chown $u,$g,($dir);
    $ret &lt;= 0 ? carp("chown [$u,$g,$dir] error") : carp("chown [$u,$g,$dir] success");
}
my $microsec = 50_000;
Time::HiRes::usleep($microsec);
</code></pre>

<p>}</p>

<p>1;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[perl父进程监听，子进程工作实例]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/08/perlfu-jin-cheng-jian-ting-zi-jin-cheng-gong-zuo-shi-li/"/>
    <updated>2012-11-08T22:15:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/08/perlfu-jin-cheng-jian-ting-zi-jin-cheng-gong-zuo-shi-li</id>
    <content type="html"><![CDATA[<ol>
<li>构造后台进程</li>
<li>主进程监到连接，创建子进程接收消息并处理消息</li>
<li>主进程继续监听，同时非阻塞的回收子进程</li>
</ol>


<!-- more -->


<p>```perl</p>

<h1>!/usr/bin/perl</h1>

<p>use warnings;
use strict;
use IO::Socket;
use Socket qw(SO_KEEPALIVE);
use IO::Poll;</p>

<h1>POSIX标准是必须要的，否则waitpid会阻塞住</h1>

<p>use POSIX;
use Carp;
use Errno  qw(EINPROGRESS EWOULDBLOCK EISCONN ENOTSOCK</p>

<pre><code>          EPIPE EAGAIN EBADF ECONNRESET ENOPROTOOPT);
</code></pre>

<p>$| = 1;
daemonize();</p>

<p>my $server = IO::Socket::INET->new(LocalAddr => "0.0.0.0:5678",</p>

<pre><code>                               Type      =&gt; SOCK_STREAM,
                               Proto     =&gt; 'tcp',
                               Blocking  =&gt; 0,
                               Reuse     =&gt; 1,
                               Listen    =&gt; 1024 )
or die "Error creating socket: $@\n";
</code></pre>

<p>$server->sockopt(SO_KEEPALIVE, 1);</p>

<p>while(1) {</p>

<pre><code>while(my $pid = waitpid -1, WNOHANG) {
    #print "child[$pid] closed\n" if($pid &gt; 0);
    last unless $pid &gt; 0;  
}

if(my $csock = $server-&gt;accept) {                                                                                                                           
    my $pid = fork;

    if($pid){
        close($csock);
        undef $csock;
    }else{
        $0 .= " [perl child]"; 
        while(1) {
            my $buf;
            my $len = sysread($csock, $buf, 1048576, 0);
            work($buf); 
            last if (!$len &amp;&amp; $! != EWOULDBLOCK);
        }
        exit 0;
    }
}
</code></pre>

<p>}</p>

<h1>子进程的工作</h1>

<p>sub work{</p>

<pre><code>print @_."\n";
</code></pre>

<p>}</p>

<p>sub daemonize {</p>

<pre><code>my($pid, $sess_id, $i);

if ($pid = fork) { exit 0; }

croak "Cannot detach from controlling terminal"
    unless $sess_id = POSIX::setsid();

$SIG{'HUP'} = 'IGNORE';
if ($pid = fork) { exit 0; }

chdir "/";

umask 0;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
