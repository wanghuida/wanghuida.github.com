<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2013-03-03T21:49:18+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql 安全]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-an-quan/"/>
    <updated>2013-02-27T14:57:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-an-quan</id>
    <content type="html"><![CDATA[<ol>
<li><p>如果客户端和服务器端的连接需要跨越并通过不可信任的网络，那么就需要使用SSH隧道来加密该连接的通信。一般情况下mysql不直接对外，只提供内部访问。</p></li>
<li><p>用GRANT和REVOKE语句来控制对MySQL的访问。不要授予超过需求的权限。决不能为所有主机授权。</p></li>
<li><p>不要让任何人(除了MySQL root账户)访问mysql数据库中的user表！这很关键。加密的密码才是MySQL中的真正的密码。</p></li>
<li><p>不要将纯文本密码保存到数据库中。如果你的计算机有安全危险，入侵者可以获得所有的密码并使用它们。相反，应使用MD5()、SHA1()或单向哈希函数。</p></li>
<li><p>不要从词典中选择密码。有专门的程序可以破解它们。</p></li>
<li><p>试试从Internet使用nmap工具扫描端口。MySQL默认使用端口3306。或者telnet ip 3306。</p></li>
<li><p>如果某个用户输入“; DROP DATABASE mysql;”等内容，应确保你的应用程序保持安全。</p></li>
<li><p>一定要记住还应检查数字数据。如果当用户输入值234时，应用程序生成查询SELECT * FROM table WHERE ID=234，用户可以输入值234 OR 1=1使应用程序生成查询SELECT * FROM table WHERE ID=234 OR 1=1。结果是服务器查找表内的每个记录。</p></li>
<li><p>学会使用tcpdump和strings工具。在大多数情况下，你可以使用下面的命令检查是否MySQL数据流未加密</p></li>
</ol>


<p><code>
shell&gt; tcpdump -l -i eth0 -w - src or dst port 3306 | strings
</code></p>

<ol>
<li>对所有MySQL用户使用密码。</li>
</ol>


<p>```
shell> mysql -u root
mysql> UPDATE mysql.user SET Password=PASSWORD('newpwd')</p>

<pre><code>-&gt; WHERE User='root';
</code></pre>

<p>mysql> FLUSH PRIVILEGES;
```</p>

<ol>
<li><p>绝对不要作为Unix的root用户运行MySQL服务器。这样做非常危险，因为任何具有FILE权限的用户能够用root创建文件(例如，~root/.bashrc)。为了防止，mysqld拒绝用root运行，除非使用--user=root选项明显指定。</p></li>
<li><p>确保mysqld运行时，只使用对数据库目录具有读或写权限的Unix用户来运行。</p></li>
<li><p>不要将PROCESS或SUPER权限授给非管理用户。mysqladmin processlist的输出显示出当前执行的查询正文，如果另外的用户发出一个UPDATE user SET password=PASSWORD('not_secure')查询，被允许执行那个命令的任何用户可能看得到。 mysqld为有SUPER权限的用户专门保留一个额外的连接，因此即使所有普通连接被占用，MySQL root用户仍可以登录并检查服务器的活动。 可以使用SUPER权限来终止客户端连接，通过更改系统变量的值更改服务的器操作，并控制复制服务器。</p></li>
<li><p>不要向非管理用户授予FILE权限。有这权限的任何用户能在拥有mysqld守护进程权限的文件系统那里写一个文件。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 管理语句]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-guan-li-yu-ju/"/>
    <updated>2013-02-27T14:53:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-guan-li-yu-ju</id>
    <content type="html"><![CDATA[<h3>创建用户，设置密码，赋予权限</h3>

<p>```
mysql > grant all privileges on mmd.* to 'mmd'@'localhost' identified  by '123456';
mysql > flush privileges;
mysql > drop user</p>

<h1>mysql 5.5+默认本地连接，请修改bind_address为0.0.0.0才能支持网络连接</h1>

<p>mysql > grant select,update,insert,delete on mmd.* to 'mmd'@'%' identified  by '123456';
mysql > flush privileges;
mysql > show grants for 'mmd'@'%';</p>

<p>mysql > set password for 'mmd'@'%' = password('654321');
```</p>

<h3>create 数据库，数据表</h3>

<p>```
mysql > create table staff (</p>

<pre><code>  &gt; id int not null auto_increment primary key, 
  &gt; username varchar(50) not null, 
  &gt; `desc` text 
  &gt; ) engine=innodb default character set=utf8;
</code></pre>

<p>mysql > insert into staff (id,username,<code>desc</code>) values (NULL,'王惠达','测试数据');</p>

<p>mysql > select * from staff;
```</p>

<h3>修改表结构</h3>

<p>```
msyql > alter table staff modify username varchar(100) not null;</p>

<p>mysql > alter table staff add creation timestamp;</p>

<p>mysql > alter table staff drop creation;
```</p>

<h3>创建，删除 index</h3>

<p>```
mysql > create index all_field on staff (id,username);</p>

<p>mysql > create index one_field on staff (username);</p>

<p>mysql > drop index one_field on staff;</p>

<p>```</p>

<h3>explain</h3>

<p>```
mysql > explain select * from staff where username like '%惠达%'</p>

<p>+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
|  1 | SIMPLE      | staff | ALL  | NULL          | NULL | NULL    | NULL |    1 | Using where |
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
1 row in set (0.00 sec)</p>

<p>mysql > explain select * from staff where id = 1;</p>

<p>+----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+
| id | select_type | table | type  | possible_keys     | key     | key_len | ref   | rows | Extra |
+----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+
|  1 | SIMPLE      | staff | const | PRIMARY,all_field | PRIMARY | 4       | const |    1 |       |
+----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+
1 row in set (0.00 sec)</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 状态检查]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-zhuang-tai-jian-cha/"/>
    <updated>2013-02-27T14:52:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-zhuang-tai-jian-cha</id>
    <content type="html"><![CDATA[<h3>最简单的status</h3>

<ul>
<li>可以了解一下mysql基本的状态</li>
</ul>


<p><code>
$ mysql -u -p -h
mysql &gt; status
</code></p>

<!-- more -->


<ul>
<li>另外可以添加 -i 5 参数，让其每五秒自动刷新一次。</li>
</ul>


<p><code>
mysqladmin -uroot -p密码 status -i 5
</code></p>

<h3>查看mysql详细的状态信息</h3>

<ul>
<li>里面包含mysql所有的状态信息，分散在各处，很难理解，下会再推荐一个更有效的工具</li>
</ul>


<p><code>
mysql &gt; show status; (session 级别的)
mysql &gt; show global status; (server 级别的, 一般都使用这个)
</code></p>

<h3>mysqlreport</h3>

<ul>
<li>官方网站: http://hackmysql.com/mysqlreport</li>
<li>该工具使用方便，数据也很清晰，非常推荐使用该工具</li>
</ul>


<p><code>
./mysqlreport --host=10.0.1.111 --user=**** --password=****
</code></p>

<h3>更快速的查看mysql 表缓存</h3>

<p><code>
mysql &gt; show open tables;
</code></p>

<h3>show processlist</h3>

<ul>
<li><p>当感觉到每个线程有问题时，可以使用这条命令看下情况</p></li>
<li><p>案例：DBA通知我processlist里有很多空链接，我发现mysql链接都是持久化的。。并且没有关闭</p></li>
</ul>


<h3>show (session | global) variables</h3>

<ul>
<li>查看当前服务器配置变量</li>
</ul>


<p>```</p>

<h1>很多情况下都不希望重启mysql服务，所以可以动态调整变量</h1>

<h1>例如输出log</h1>

<p>set global log=/tmp/query.log</p>

<h1>希望重启后也会应用到，可以添加到my.cnf</h1>

<p>```</p>

<h3>show table status [from db] [like '%table%']</h3>

<ul>
<li>显示具体某个表的状态信息</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 主从设置]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-zhu-cong-she-zhi/"/>
    <updated>2013-02-27T14:52:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-zhu-cong-she-zhi</id>
    <content type="html"><![CDATA[<ol>
<li>设置同步账号</li>
</ol>


<p><code>
mysql &gt; grant replication slave on *.* to 'backup'@'%' identified by '123456';
mysql &gt; flush privileges;
</code></p>

<ol>
<li>master 配置</li>
</ol>


<p>```
server-id       = 1
log_bin         = /var/log/mysql/mysql-bin.log
max_binlog_size     = 100M
expire_logs_days    = 10
binlog_do_db        = mmd</p>

<p>service mysql restart
```</p>

<ol>
<li>slave 配置</li>
</ol>


<p>```
server-id           = 2
log_bin             = /var/log/mysql/mysql-bin.log
expire_logs_days    = 10
max_binlog_size     = 100M
replicate-do-db     = mmd
read_only           = 1</p>

<p>service mysql restart
```</p>

<ol>
<li>同步现有数据</li>
</ol>


<p>```</p>

<h1>强制读锁</h1>

<p>mysql > flush tables with read lock;</p>

<h1>导出数据,如果是myisam表的话，加上--lock-all-tables参数，如果是innodb表的话，加上--single-transaction参数。如果数据量很大，建议停服务生成数据快照</h1>

<p>$ mysqldump -uroot -p63137246 --single-transaction mmd > mmd.sql</p>

<h1>记录同步点</h1>

<p>mysql > show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000007 |      887 | mmd          |                  |
+------------------+----------+--------------+------------------+</p>

<h1>关闭读锁</h1>

<p>mysql > unlock tables;</p>

<p>$ scp mmd.sql wanghuida@192.168.30.114:mmd.sql
$ mysql -uroot -p***** mmd &lt; mmd.sql
```</p>

<ol>
<li>slave 同步设置</li>
</ol>


<p>```
mysql > change master to</p>

<pre><code>  &gt; master_host='192.168.30.113', 
  &gt; master_user='backup', 
  &gt; master_password='123456', 
  &gt; master_log_file='mysql-bin.000007', 
  &gt; master_log_pos=887;
</code></pre>

<p>mysql > start slave;
```</p>

<ol>
<li><p>附加配置</p></li>
<li><p>注释：为了保证事务InnoDB复制设置的最大可能的耐受性和一致性，应在主服务器的my.cnf文件中使用innodb_flush_log_at_trx_commit=1和sync-binlog=1。这样每次提交都会写入日志文件，性能有一些损失</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 优化配置]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-you-hua-pei-zhi/"/>
    <updated>2013-02-27T14:52:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-you-hua-pei-zhi</id>
    <content type="html"><![CDATA[<p>cache_size</p>

<p>max-connections</p>

<p>thread_cache_size</p>

<p>key_buffer_size
buffer_size
query_cache_limit
query_cache_size</p>

<p>query_cache_size</p>

<p>query_cache_limit</p>

<p>table_cache</p>
]]></content>
  </entry>
  
</feed>
