<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2014-05-29T17:53:37+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[select for update]]></title>
    <link href="http://www.wanghd.com/blog/2014/01/26/select-for-update/"/>
    <updated>2014-01-26T15:37:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/01/26/select-for-update</id>
    <content type="html"><![CDATA[<h4>我的使用场景</h4>

<ul>
<li>有一大堆产品需要在网上出售，每个产品都有数量，表结构如下</li>
</ul>


<p><code>
id      product_name      count
1       100元充值卡       5
2       iphone5s          2
</code></p>

<ul>
<li>每次出售一个count数量就减1，如何保证并发操作的count准确性</li>
</ul>


<p>```</p>

<h1>伪代码</h1>

<p>transaction start</p>

<p>try</p>

<pre><code>// 并发执行会锁行，这样就确保了准确性
row = DB::select('select * from product where id=? for update', product_id)
row.count = row.count - 1
row.save()
commit
</code></pre>

<p>catch</p>

<pre><code>rollback
</code></pre>

<p>```</p>

<ul>
<li>需要注意的问题是mysql需要innodb表，并且sql要吃上索引，否则锁表</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主从切换]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/07/zhu-cong-qie-huan/"/>
    <updated>2013-04-07T20:32:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/07/zhu-cong-qie-huan</id>
    <content type="html"><![CDATA[<h3>1个master，1个slave1，1个slave2，关闭master，让slave1做master，slave2同步新master</h3>

<ul>
<li>slave1开启同步账号</li>
</ul>


<p><code>
mysql &gt; grant replication slave on *.* to 'backup'@'192.168.0.152' identified by '123456';
mysql &gt; grant replication slave on *.* to 'backup'@'192.168.0.153' identified by '123456';
mysql &gt; flush privileges;
</code></p>

<ul>
<li>锁住master的写</li>
</ul>


<p>```
mysql > flush tables with read lock;</p>

<h1>关闭锁的命令：unlock tables;</h1>

<p>```</p>

<!-- more -->


<ul>
<li>查看slave1和slave2的同步状态</li>
</ul>


<p>```
mysql > show processlist;</p>

<h1>确保 Slave has read all relay log; waiting for the slave I/O thread to update it</h1>

<p>```</p>

<ul>
<li>修改slave1的配置，并重启</li>
</ul>


<p>```
bind-address = 0.0.0.0</p>

<p>$ sudo service mysql restart
```</p>

<ul>
<li>停止slave1的slave，设置为master</li>
</ul>


<p><code>
mysql &gt; stop slave;
mysql &gt; reset master;
</code></p>

<ul>
<li>停止slave2的slave，重新设置master</li>
</ul>


<p>```
mysql > stop slave;</p>

<p>mysql > change master to</p>

<pre><code>  &gt; master_host = '192.168.0.151',
  &gt; master_user = 'backup',
  &gt; master_password = '123456';
</code></pre>

<p>mysql> start slave;
```</p>

<ul>
<li>测试是否成功
<code>
mysql &gt; create table `test` ( id int not null auto_increment, `name` varchar(100) not null, primary key (`id`) );
mysql &gt; drop table test;
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[克隆 slave]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/07/ke-long-slave/"/>
    <updated>2013-04-07T17:54:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/07/ke-long-slave</id>
    <content type="html"><![CDATA[<h3>已经有一台master 和 一台slave1，从slave1上克隆一个slave2</h3>

<ul>
<li>关闭slave1 的 io_thread，那么slave1就不会读取master的bin-log了，也不会写自己的relay-log了</li>
</ul>


<p><code>
mysql&gt; stop slave io_thread
</code></p>

<ul>
<li>查看slave1 的 processlist，确保sql_thread在等待io_thread</li>
</ul>


<p>```
mysql> show processlist\G;</p>

<h1>显示如下结果，可以继续操作</h1>

<p>State: Slave has read all relay log; waiting for the slave I/O thread to update it
```</p>

<!-- more -->


<ul>
<li>停止slave1的slave, 导出数据，并复制数据到slave2【如果数据大可以压缩】</li>
</ul>


<p>```
mysql> stop slave</p>

<p>$ mysqldump -uroot -p mmd > mmd.sql</p>

<p>$ scp mmd.sql wanghuida@192.168.100.100:mmd.sql
```</p>

<ul>
<li>slave2 创建数据库，并导入数据</li>
</ul>


<p><code>
$ mysqladmin -uroot -p create mmd
$ mysql -uroot -p mmd &lt; mmd.sql
</code></p>

<ul>
<li>修改 slave2 配置， 并重启</li>
</ul>


<p>```
$ vim /etc/mysql/my.cnf</p>

<p>server-id       = 3
log_bin         = /var/log/mysql/mysql-bin.log
expire_logs_days    = 10
max_binlog_size     = 100M
replicate-do-db     = mmd
read_only           = 1</p>

<p>$ /etc/init.d/mysqld restart</p>

<p>```</p>

<ul>
<li>查看slave1上的从状态</li>
</ul>


<p><code>
mysql&gt; show slave status\G;
</code></p>

<ul>
<li>设置slave2 的主从同步配置，再启动就可以了</li>
</ul>


<p>```
mysql> change master to</p>

<pre><code>master_host = '192.168.100.153', 
master_user = 'backup', 
master_password = '123456', 
master_log_file = 'mysql-bin.000016', 
master_log_pos = 115910;
</code></pre>

<p>mysql> start slave
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 安全]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-an-quan/"/>
    <updated>2013-02-27T14:57:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-an-quan</id>
    <content type="html"><![CDATA[<ul>
<li><p>如果客户端和服务器端的连接需要跨越并通过不可信任的网络，那么就需要使用SSH隧道来加密该连接的通信。一般情况下mysql不直接对外，只提供<code>内部访问</code>。</p></li>
<li><p>用GRANT和REVOKE语句来控制对MySQL的访问。不要授予超过需求的权限。决不能为所有主机授权。</p></li>
<li><p>不要让任何人(除了MySQL root账户)访问mysql数据库中的<code>user表</code>！这很关键。加密的密码才是MySQL中的真正的密码。</p></li>
<li><p>不要将<code>纯文本密码</code>保存到数据库中。如果你的计算机有安全危险，入侵者可以获得所有的密码并使用它们。相反，应使用MD5()、SHA1()或单向哈希函数。</p></li>
<li><p>不要从词典中选择密码。有专门的程序可以破解它们。</p></li>
</ul>


<!-- more -->


<ul>
<li><p>试试从Internet使用nmap工具扫描端口。MySQL默认使用端口3306。或者telnet ip 3306。</p></li>
<li><p>如果某个用户输入<code>; DROP DATABASE mysql;</code>等内容，应确保你的应用程序保持安全。</p></li>
<li><p>一定要记住还应检查数字数据。如果当用户输入值234时，应用程序生成查询SELECT * FROM table WHERE ID=234，用户可以输入值<code>234 OR 1=1</code>使应用程序生成查询SELECT * FROM table WHERE ID=234 OR 1=1。结果是服务器查找表内的每个记录。</p></li>
<li><p>学会使用tcpdump和strings工具。在大多数情况下，你可以使用下面的命令检查是否MySQL数据流未加密</p></li>
</ul>


<p><code>
shell&gt; tcpdump -l -i eth0 -w - src or dst port 3306 | strings
</code></p>

<ul>
<li>对所有MySQL用户使用密码。</li>
</ul>


<p>```
shell> mysql -u root
mysql> UPDATE mysql.user SET Password=PASSWORD('newpwd')</p>

<pre><code>-&gt; WHERE User='root';
</code></pre>

<p>mysql> FLUSH PRIVILEGES;
```</p>

<ul>
<li><p>绝对不要作为Unix的root用户运行MySQL服务器。这样做非常危险，因为任何具有FILE权限的用户能够用root创建文件(例如，~root/.bashrc)。为了防止，mysqld拒绝用root运行，除非使用--user=root选项明显指定。</p></li>
<li><p>确保mysqld运行时，<code>只使用对数据库目录具有读或写权限的Unix用户来运行</code>。</p></li>
<li><p>不要将PROCESS或SUPER权限授给非管理用户。mysqladmin processlist的输出显示出当前执行的查询正文，如果另外的用户发出一个UPDATE user SET password=PASSWORD('not_secure')查询，被允许执行那个命令的任何用户可能看得到。 mysqld为有SUPER权限的用户专门保留一个额外的连接，因此即使所有普通连接被占用，MySQL root用户仍可以登录并检查服务器的活动。 可以使用SUPER权限来终止客户端连接，通过更改系统变量的值更改服务的器操作，并控制复制服务器。</p></li>
<li><p>不要向非管理用户授予FILE权限。有这权限的任何用户能在拥有mysqld守护进程权限的文件系统那里写一个文件。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 管理语句]]></title>
    <link href="http://www.wanghd.com/blog/2013/02/27/mysql-guan-li-yu-ju/"/>
    <updated>2013-02-27T14:53:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/02/27/mysql-guan-li-yu-ju</id>
    <content type="html"><![CDATA[<h3>创建用户，设置密码，赋予权限</h3>

<p>```
mysql > grant all privileges on mmd.* to 'mmd'@'localhost' identified  by '123456';
mysql > flush privileges;
mysql > drop user</p>

<h1>mysql 5.5+默认本地连接，请修改bind_address为0.0.0.0才能支持网络连接</h1>

<p>mysql > grant select,update,insert,delete on mmd.* to 'mmd'@'%' identified  by '123456';
mysql > flush privileges;
mysql > show grants for 'mmd'@'%';</p>

<p>mysql > set password for 'mmd'@'%' = password('654321');
```</p>

<!-- more -->


<h3>create 数据库，数据表</h3>

<p>```
mysql > create table staff (</p>

<pre><code>  &gt; id int not null auto_increment primary key, 
  &gt; username varchar(50) not null, 
  &gt; `desc` text 
  &gt; ) engine=innodb default character set=utf8;
</code></pre>

<p>mysql > insert into staff (id,username,<code>desc</code>) values (NULL,'王惠达','测试数据');</p>

<p>mysql > select * from staff;
```</p>

<h3>修改表结构</h3>

<p>```
msyql > alter table staff modify username varchar(100) not null;</p>

<p>mysql > alter table staff add creation timestamp;</p>

<p>mysql > alter table staff drop creation;
```</p>

<h3>创建，删除 index</h3>

<p>```
mysql > create index all_field on staff (id,username);</p>

<p>mysql > create index one_field on staff (username);</p>

<p>mysql > drop index one_field on staff;</p>

<p>```</p>

<h3>explain</h3>

<p>```
mysql > explain select * from staff where username like '%惠达%'</p>

<p>+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
|  1 | SIMPLE      | staff | ALL  | NULL          | NULL | NULL    | NULL |    1 | Using where |
+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
1 row in set (0.00 sec)</p>

<p>mysql > explain select * from staff where id = 1;</p>

<p>+----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+
| id | select_type | table | type  | possible_keys     | key     | key_len | ref   | rows | Extra |
+----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+
|  1 | SIMPLE      | staff | const | PRIMARY,all_field | PRIMARY | 4       | const |    1 |       |
+----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+
1 row in set (0.00 sec)</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
