<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IOS | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2014-05-27T18:21:34+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ios 用关键帧按贝塞尔曲线移动]]></title>
    <link href="http://www.wanghd.com/blog/2014/02/05/ios-yong-guan-jian-zheng-an-bei-sai-er-qu-xian-yi-dong/"/>
    <updated>2014-02-05T19:36:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/02/05/ios-yong-guan-jian-zheng-an-bei-sai-er-qu-xian-yi-dong</id>
    <content type="html"><![CDATA[<h3>先看下效果，黑色方块延黑色线条移动</h3>

<p><img style="max-width:300px;" src="http://www.wanghd.com/images/post/keyframe.jpg" /></p>

<!-- more -->


<p>1 使用CGMutablePathRef勾划移动路径，并显示出来</p>

<p>```objective-c
CGFloat x = 50;
CGFloat y = 50;
CGMutablePathRef path = CGPathCreateMutable();
CGPathMoveToPoint(path, nil, x, y);
CGPathAddLineToPoint(path, nil, 300, 300);
CGPathAddLineToPoint(path, nil, 50, 300);
CGPathAddLineToPoint(path, nil, 50, 50);
CGPathAddLineToPoint(path, nil, 300, 300);</p>

<p>// 二次贝塞尔曲线
CGPathAddQuadCurveToPoint(path, nil, 50, 50, 50, 300);
// 三次贝塞尔曲线
CGPathAddCurveToPoint(path, nil, 200, 200, 150, 400, 300, 300);
```</p>

<ul>
<li>不了解贝塞尔曲线函数的看下图可以加深体会</li>
</ul>


<p><img style="max-width:300px;" src="http://www.wanghd.com/images/post/Bezier2.gif" /></p>

<br />


<p><img style="max-width:300px;" src="http://www.wanghd.com/images/post/Bezier3.gif" /></p>

<br />


<p>2 先按path把路径画出来，其实是张图</p>

<p>```objective-c
UIGraphicsBeginImageContext(self.view.frame.size);
CGContextRef context = UIGraphicsGetCurrentContext();
CGContextAddPath(context, path);
[[UIColor blackColor] setStroke];
CGContextDrawPath(context, kCGPathStroke);
UIImage *img = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();</p>

<p>UIImageView *imgView = [[UIImageView alloc]initWithFrame:self.view.bounds];
imgView.image = img;
[self.view addSubview:imgView];
```</p>

<p>3 画个小方块</p>

<p><code>objective-c
UIView *view = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 30, 30)];
view.backgroundColor = [UIColor blackColor];
[self.view addSubview:view];
</code></p>

<p>4 给小方块增加移动效果</p>

<p>```objective-c</p>

<p>// CAKeyframeAnimation 就是关键帧的动画
CAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@"position"];
// 设置移动路径
animation.path = path;
animation.duration = 5.0;
// 动画结束后不还原
animation.removedOnCompletion = NO;
animation.fillMode = kCAFillModeForwards;</p>

<p>[view.layer addAnimation:animation forKey:@"path"];
CGPathRelease(path);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios 第三方库大汇总]]></title>
    <link href="http://www.wanghd.com/blog/2014/01/27/ios-di-san-fang-ku-da-hui-zong/"/>
    <updated>2014-01-27T21:44:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/01/27/ios-di-san-fang-ku-da-hui-zong</id>
    <content type="html"><![CDATA[<h3>ios开发内充斥着第三方库，下面做个汇总（持续更新）</h3>

<ol>
<li><a href="https://www.jpush.cn">jpush推送服务</a></li>
<li><a href="http://connect.qq.com">qq开放平台</a></li>
<li><a href="http://open.weixin.qq.com">微信开放平台</a></li>
<li><a href="https://open.alipay.com/index.htm">支付宝开放平台</a></li>
</ol>


<h3>ios开源社区</h3>

<ol>
<li><a href="http://www.oschina.net/ios/home">oschina的ios开发专区</a></li>
<li><a href="http://code4app.com">code4app开发专区</a></li>
<li><a href="http://github.com">github</a></li>
<li><a href="http://www.appcoda.com">appcoda</a></li>
<li><a href="http://www.raywenderlich.com/tutorials">raywenderlich 游戏开发</a></li>
<li><a href="http://ui4app.com">ui4app ui设计网站</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios 静态库]]></title>
    <link href="http://www.wanghd.com/blog/2014/01/27/ios-jing-tai-ku/"/>
    <updated>2014-01-27T20:28:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/01/27/ios-jing-tai-ku</id>
    <content type="html"><![CDATA[<h3>不是真想要写静态库，只是对自己使用第三方静态库很有好处</h3>

<ul>
<li>如果经常遇到undefine symbols for architecture xxx 这样的错误，那么看完后就能知道原因了</li>
</ul>


<p>1 建静态库工程</p>

<p><img style="max-width:300px;" src="http://www.wanghd.com/images/post/ioslib1.jpg" /></p>

<p>2 加一个库方法</p>

<p>```objective-c
// .h
+ (void)printHelloWorld;</p>

<p>// .m
+ (void)printHelloWorld
{
  NSLog(@"Hello World!!!");
}</p>

<p>```</p>

<p>3 直接debug运行，右键进入finder复制.h 和.a文件到新项目中</p>

<p><img style="max-width:300px;" src="http://www.wanghd.com/images/post/ioslib2.jpg" /></p>

<!-- more -->


<p>4 在新项目中使用静态库 报错Undefined symbols for architecture i386:</p>

<p>```objective-c</p>

<h1>import "tmpLib.h"</h1>

<p>[tmpLib printHelloWorld];</p>

<p>```</p>

<p>5 查看.a文件支持的架构</p>

<p>```
lipo -detailed_info libtmpLib.a</p>

<p>// 输出 Non-fat file: libtmpLib.a is architecture: armv7s
```</p>

<p>6 要虚拟机跑起来必须包含i386架构，还应该包含arm64 armv7 armv7s</p>

<p>```
// i386对应虚拟机 arm是各种机型
// debug运行生成i386架构
// release运行生成所有arm架构</p>

<p>// 合并2个库
lipo -create Debug-iphonesimulator/libtmpLib.a Release-iphoneos/libtmpLib.a -output libtmpLib.a
lipo -info libtmpLib.a</p>

<p>// 输出Architectures in the fat file: libtmpLib.a are: i386 armv7 armv7s arm64
```</p>

<p>7 替换.a文件看下结果</p>

<p><img style="max-width:200px;" src="http://www.wanghd.com/images/post/ioslib3.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CALayer 常用例子]]></title>
    <link href="http://www.wanghd.com/blog/2014/01/27/calayer-chang-yong-li-zi/"/>
    <updated>2014-01-27T14:13:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/01/27/calayer-chang-yong-li-zi</id>
    <content type="html"><![CDATA[<ul>
<li>先看下默认效果</li>
</ul>


<p><img style="max-width:100px;" src="http://www.wanghd.com/images/post/cglayer1.jpg" /></p>

<p>```objective-c</p>

<p>UIImage <em>avatar = [UIImage imageNamed:@"touxiang"];
UIImageView </em>avatarView = [[UIImageView alloc]initWithImage:avatar];
avatarView.frame = CGRectMake(50, 50, 80, 80);
avatarView.center = CGPointMake(rect.size.width/2, rect.size.height/2);
[self.view addSubview:avatarView];</p>

<p>```</p>

<ul>
<li>第一种就圆角头像</li>
</ul>


<p><img style="max-width:100px;" src="http://www.wanghd.com/images/post/cglayer2.jpg" /></p>

<p>```objective-c</p>

<p>avatarView.layer.borderWidth = 1; //边框
avatarView.layer.borderColor = [[UIColor grayColor] CGColor]; //边框颜色
avatarView.layer.cornerRadius = 40; //圆角
avatarView.layer.masksToBounds = YES; //隐藏超出的部分</p>

<p>```</p>

<!-- more -->


<ul>
<li>第二种是加阴影</li>
</ul>


<p><img style="max-width:100px;" src="http://www.wanghd.com/images/post/cglayer3.jpg" /></p>

<p>```objective-c</p>

<p>avatarView.layer.shadowColor = [[UIColor blackColor] CGColor]; //颜色
avatarView.layer.shadowOffset = CGSizeMake(3, 3); //控制阴影的方向,x,y
avatarView.layer.shadowRadius = 3; //阴影范围
avatarView.layer.shadowOpacity = 0.8; //控制阴影透明度</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uitableview (3)]]></title>
    <link href="http://www.wanghd.com/blog/2014/01/27/uitableview-3/"/>
    <updated>2014-01-27T13:32:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/01/27/uitableview-3</id>
    <content type="html"><![CDATA[<h3>tableview还有一种编辑状态也很常用，很简单下面是教程</h3>

<p>1 老规矩 自己先创建一个ViewController, 添加一个UITableView内部属性和数据</p>

<p><code>objective-c
@interface AEEditTableViewController ()
{
  UITableView *_table;
  NSMutableArray *_data;
}
</code></p>

<p>2 头里需要实现UITableViewDataSource, UITableViewDelegate</p>

<p>```objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface AEEditTableViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate></p>

<p>@end
```</p>

<p>3 让window的root view设置为创建的view，并设置一个navigation</p>

<p>```objective-c
- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{
  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
  self.window.backgroundColor = [UIColor whiteColor];
  [self.window makeKeyAndVisible];</p>

<p>  AEEditTableViewController <em>viewCtl = [[AEEditTableViewController alloc]initWithNibName:nil bundle:nil];
  UINavigationController </em>nav = [[UINavigationController alloc]initWithRootViewController:viewCtl];</p>

<p>  self.window.rootViewController = nav;</p>

<p>  return YES;
}
```</p>

<!-- more -->


<p>4 往<em>data中加入一点数据,初始化</em>table,设置代理和数据源，在导航上加个按钮</p>

<p>```objective-c
- (id)initWithNibName:(NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil
{
  self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
  if (self) {</p>

<pre><code>_data = [[NSMutableArray alloc]initWithArray:@[@"1",@"2",@"3",@"4",@"5",@"6",@"7",@"8"]];
</code></pre>

<p>  }
  return self;
}</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];</p>

<p>UIBarButtonItem *btn = [[UIBarButtonItem alloc] initWithTitle:@"编辑"</p>

<pre><code>                                                    style:UIBarButtonItemStyleBordered
                                                   target:self
                                                   action:@selector(tapEditBtn:)];
</code></pre>

<p>self.navigationItem.rightBarButtonItem = btn;</p>

<p>CGRect rect = [[UIScreen mainScreen] bounds];
<em>table = [[UITableView alloc]initWithFrame:rect style:UITableViewStylePlain];
</em>table.delegate = self;
<em>table.dataSource = self;
[self.view addSubview:</em>table];
}</p></li>
</ul>


<h1>pragma mark - tapEditBtn</h1>

<ul>
<li>(void)tapEditBtn:(UIBarButtonItem *)btn
{
if ([btn.title isEqualToString:@"编辑"]) {
  btn.title = @"保存";
  [<em>table setEditing:YES animated:YES];
} else {
  btn.title = @"编辑";
  [</em>table setEditing:NO animated:YES];
}
}
```</li>
</ul>


<p>5 设置数据源，增加删除的操作</p>

<p>```objective-c</p>

<h1>pragma mark - datasource</h1>

<p>// 可以不写噢，默认就是delete模式
- (UITableViewCellEditingStyle)tableView:(UITableView <em>)tableView editingStyleForRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  // 当然也可以insert 就是不太用
  // return UITableViewCellEditingStyleInsert;
  return UITableViewCellEditingStyleDelete;
}</p>

<p>// 删除的操作
- (void)tableView:(UITableView <em>)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  if (editingStyle == UITableViewCellEditingStyleDelete) {</p>

<pre><code>[_data removeObjectAtIndex:indexPath.row];
[tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
</code></pre>

<p>  }
}</p>

<p>// 哪些可以删，哪些不能删
- (BOOL)tableView:(UITableView <em>)tableView canEditRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  return indexPath.row == 1 ? NO : YES;
}</p>

<ul>
<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
return [_data count];
}</p></li>
<li><p>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
static NSString </em>cellId = @"cell";
UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId];
if (cell == nil) {
  cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellId];
}
cell.textLabel.text = [_data objectAtIndex:indexPath.row];
return cell;
}
```</p></li>
</ul>


<p>6 看下效果吧</p>

<p><img style="max-width:300px;" src="http://www.wanghd.com/images/post/ios-uitableview-3.jpg" /></p>

<p>7 附赠全部源代码</p>

<p>```objective-c</p>

<p>// .h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface AEEditTableViewController : UIViewController&lt;UITableViewDataSource, UITableViewDelegate></p>

<p>@end</p>

<p>// .m</p>

<h1>import "AEEditTableViewController.h"</h1>

<p>@interface AEEditTableViewController ()
{
  UITableView <em>_table;
  NSMutableArray </em>_data;
}</p>

<p>@end</p>

<p>@implementation AEEditTableViewController</p>

<ul>
<li><p>(id)initWithNibName:(NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil
{
self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
if (self) {
  _data = [[NSMutableArray alloc]initWithArray:@[@"1",@"2",@"3",@"4",@"5",@"6",@"7",@"8"]];
}
return self;
}</p></li>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];</p>

<p>UIBarButtonItem *btn = [[UIBarButtonItem alloc] initWithTitle:@"编辑"</p>

<pre><code>                                                    style:UIBarButtonItemStyleBordered
                                                   target:self
                                                   action:@selector(tapEditBtn:)];
</code></pre>

<p>self.navigationItem.rightBarButtonItem = btn;</p>

<p>CGRect rect = [[UIScreen mainScreen] bounds];
<em>table = [[UITableView alloc]initWithFrame:rect style:UITableViewStylePlain];
</em>table.delegate = self;
<em>table.dataSource = self;
[self.view addSubview:</em>table];
}</p></li>
</ul>


<h1>pragma mark - tapEditBtn</h1>

<ul>
<li>(void)tapEditBtn:(UIBarButtonItem *)btn
{
if ([btn.title isEqualToString:@"编辑"]) {
  btn.title = @"保存";
  [<em>table setEditing:YES animated:YES];
} else {
  btn.title = @"编辑";
  [</em>table setEditing:NO animated:YES];
}
}</li>
</ul>


<h1>pragma mark - datasource</h1>

<ul>
<li><p>(UITableViewCellEditingStyle)tableView:(UITableView <em>)tableView editingStyleForRowAtIndexPath:(NSIndexPath </em>)indexPath
{
// 当然也可以insert 就是不太用
// return UITableViewCellEditingStyleInsert;
return UITableViewCellEditingStyleDelete;
}</p></li>
<li><p>(void)tableView:(UITableView <em>)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath </em>)indexPath
{
if (editingStyle == UITableViewCellEditingStyleDelete) {
  [_data removeObjectAtIndex:indexPath.row];
  [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
}
}</p></li>
<li><p>(BOOL)tableView:(UITableView <em>)tableView canEditRowAtIndexPath:(NSIndexPath </em>)indexPath
{
return indexPath.row == 1 ? NO : YES;
}</p></li>
<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
return [_data count];
}</p></li>
<li><p>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
static NSString </em>cellId = @"cell";
UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId];
if (cell == nil) {
  cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellId];
}
cell.textLabel.text = [_data objectAtIndex:indexPath.row];
return cell;
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>@end</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
