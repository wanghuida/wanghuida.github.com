<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2014-01-26T15:03:47+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[304缓存图片没有触发load事件]]></title>
    <link href="http://www.wanghd.com/blog/2013/07/25/304huan-cun-tu-pian-mei-you-hong-fa-loadshi-jian/"/>
    <updated>2013-07-25T14:54:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/07/25/304huan-cun-tu-pian-mei-you-hong-fa-loadshi-jian</id>
    <content type="html"><![CDATA[<ul>
<li>图片墙需要计算图片高度，只有等图片load好计算的高度才正确，所以代码如下：</li>
</ul>


<p>```javascript</p>

<p>$(".img-div").each(function(){</p>

<pre><code>//设置load事件
$(this).find('img').load(function(){
    /* 用height()获取高度，省略事件逻辑 */
});
</code></pre>

<p>});</p>

<p>```</p>

<ul>
<li><p>感觉上面的代码很符合逻辑了，问题出现了：</p></li>
<li><p>当图片返回304缓存时，该图片不能触发load事件。。。（通过判断complete属性来修正）</p></li>
</ul>


<p>```javascript</p>

<pre><code>$(".img-div").each(function(){

    $(this).find('img').one('load', function(){
        /* 用height()获取高度，省略事件逻辑 */

        //使用one强制事件只触发一次，缓存的图片通过load()方法进行触发

    }).each(function() {
      if(this.complete) $(this).load();
    });
});
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery validation]]></title>
    <link href="http://www.wanghd.com/blog/2013/05/23/jquery-validation/"/>
    <updated>2013-05-23T12:41:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/05/23/jquery-validation</id>
    <content type="html"><![CDATA[<h3>表单验证在网站开发中是肯定有的，还好jquery在这方面已经做的很好了</h3>

<ul>
<li>自定义一种验证类型</li>
</ul>


<p>```javascript
jQuery.validator.addMethod(</p>

<pre><code>"cellphone",
function(value, element) {
    return this.optional(element) || /^1\d{10}$/.test(value);
},
"请输入有效的手机号码"
</code></pre>

<p>);
```</p>

<!-- more -->


<ul>
<li>定义规则和错误显示</li>
</ul>


<p>```javascript
$('#form').validate({</p>

<pre><code>rules: {
    nickname: "required",
    email: {
        required: true,
        email: true
    },
    password: {
        required: true,
        minlength: 6,
    }
},
messages: {
    nickname: "请输入昵称",
    email: {
        required: "请输入邮箱",
        email: "请输入有效的邮箱"
    },
    password: {
        required: "请输入密码",
        minlength: "密码的长度不能小于6位"
    }
},
errorElement: "div",
wrapper: "div",
errorPlacement: function(error, element) {
    element.parent().after(error);
},
highlight: function(element, errorClass) {
    $(element).parent().css('border', '1px solid red');
},
unhighlight: function(element, errorClass) {
    $(element).parent().css('border', '1px solid #777');
},
submitHandler: function() { alert("Submitted!") }
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery在firefox下无法autocomplete]]></title>
    <link href="http://www.wanghd.com/blog/2013/01/04/jqueryzai-firefoxxia-wu-fa-autocomplete/"/>
    <updated>2013-01-04T17:29:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/01/04/jqueryzai-firefoxxia-wu-fa-autocomplete</id>
    <content type="html"><![CDATA[<h4>jquery的autocomplete中文输入在firefox无法正常使用</h4>

<ul>
<li>firefox下用input事件触发keydown即可</li>
</ul>


<p>```
$('元素').bind('input', function(){</p>

<pre><code>$(this).trigger('keydown');
</code></pre>

<p>}).bind("keydown", function(event){</p>

<pre><code>事件
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js面向对象实例]]></title>
    <link href="http://www.wanghd.com/blog/2012/08/24/jsmian-xiang-dui-xiang-shi-li/"/>
    <updated>2012-08-24T17:57:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/08/24/jsmian-xiang-dui-xiang-shi-li</id>
    <content type="html"><![CDATA[<p>```javascript
(function(window){</p>

<p>var staff = function(name,phone){</p>

<pre><code>return new staff.fn.init(name,phone);
</code></pre>

<p>};
staff.fn = staff.prototype = {</p>

<pre><code>//静态变量
company: '安居客',
//构造函数
init: function(name,phone){
    //私有变量
    var cellphone = phone;
    //公共变量
    this.username = name;
    //公共方法
    this.getPhone = function() { 
        return cellphone; 
    }
    this.setPhone = function(phone) {
        cellphone = phone;
        _test_private_function();
        return this;
    }
    //私有方法
    var _test_private_function = function() {
        console.log('private function:' + cellphone);
    }
},
//公共方法
setName: function(name){
    this.username = name;
    return this;
},
setCompany: function(c_name){
    staff.fn.company = c_name;
    return this;
}
</code></pre>

<p>};
staff.fn.init.prototype = staff.fn;
//公共方法
staff.fn.getName = function() {</p>

<pre><code>return this.username;
</code></pre>

<p>}
staff.fn.getCompany = function() {</p>

<pre><code>return staff.fn.company;
</code></pre>

<p>}
window.s = staff;
})(window);</p>

<p>var staff1 = s('王惠达1','11111111');
var staff2 = s('王惠达2','22222222');
//test static argument
console.log('s1:' + staff1.setCompany('瑞庭').getCompany());
console.log('s2:' + staff2.getCompany());
//test public argument
console.log('s1:' + staff1.setName('王惠达').getName());
console.log('s2:' + staff2.getName());
//test private argument
console.log('s1:' + staff1.setPhone('13712345678').getPhone());
console.log('s2:' + staff2.getPhone());
//报错：console.log('s2:' + staff2.cellphone);
```</p>
]]></content>
  </entry>
  
</feed>
