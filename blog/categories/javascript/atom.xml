<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2014-07-16T11:03:40+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 购物车]]></title>
    <link href="http://www.wanghd.com/blog/2014/07/16/angularjs-gou-wu-che/"/>
    <updated>2014-07-16T10:45:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/07/16/angularjs-gou-wu-che</id>
    <content type="html"><![CDATA[<h3>老规矩先下购物车的例子，想一下用jquery实现是需要多少绑定事件呀，然后再对比看看angularjs</h3>

<br />




<iframe width="100%" height="300" src="http://jsfiddle.net/wanghuida/vAAvw/1/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>```html</p>

<div ng-app="CartApp">
    <div ng-controller="CartController">
         <h1>购物车</h1>

        <table>
            <tr>
                <th>商品</th>
                <th>数量</th>
                <th>单价</th>
                <th>总价</th>
                <th>删除</th>
            </tr>
            <tr ng-repeat="item in items">
                <td></td>
                <td>
                    <input ng-model="item.quantity" />
                </td>
                <td></td>
                <td></td>
                <td>
                    <button ng-click="remove(index)">删除</button>
                </td>
            </tr>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </table>
    </div>
</div>


<p>```</p>

<ul>
<li>ng-app定义了一个angularjs module的作用范围</li>
<li>ng-controller定义了一个控制器</li>
<li>ng-repeat 循环items</li>
<li> 是一种货币的过滤器，自己写一个过滤器也是可以的</li>
<li>ng-click 是点击执行的方法</li>
</ul>


<p>```javascript</p>

<p>angular.module('CartApp', [])</p>

<pre><code>.controller('CartController', function ($scope) {
$scope.items = [
    { title: '薯片', quantity: 2, price: 5.40 }, 
    { title: '巧克力', quantity: 1, price: 12.40 }, 
    { title: '牛奶', quantity: 1, price: 45.82 }
];

$scope.remove = function (index) {
    $scope.items.splice(index, 1);
};

$scope.totalPirce = function () {
    var total = 0;
    angular.forEach($scope.items, function (value, key) {
        total += value.quantity * value.price;
    });
    return total;
};
</code></pre>

<p>});
```</p>

<ul>
<li>angular.module定义模块范围</li>
<li>.controller开始一个controller的定义，这里有一个依赖注入$scope，是当前controller的作用范围，用来存储模型传递数据 $scope.items就是一个model</li>
<li>接下来$scope里定义了2个方法remove和totalPrice</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 初探]]></title>
    <link href="http://www.wanghd.com/blog/2014/07/16/angularjs-chu-tan/"/>
    <updated>2014-07-16T10:37:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2014/07/16/angularjs-chu-tan</id>
    <content type="html"><![CDATA[<h3>先看个例子，只引用了AngularJS，没有写任何js</h3>

<br />




<iframe width="100%" height="300" src="http://jsfiddle.net/wanghuida/Zcer7/1/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>```html</p>

<div ng-app="">
    <label>名字:</label>
    <input type="text" ng-model="username" placeholder="Enter a name here" />
    <hr />
    <h1>你好 !</h1>
</div>


<p>```</p>

<ul>
<li>ng-app定义angular的作用范围</li>
<li>ng-model采用数据绑定，这里绑定username</li>
<li>根据数据绑定，自动更改username</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[304缓存图片没有触发load事件]]></title>
    <link href="http://www.wanghd.com/blog/2013/07/25/304huan-cun-tu-pian-mei-you-hong-fa-loadshi-jian/"/>
    <updated>2013-07-25T14:54:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/07/25/304huan-cun-tu-pian-mei-you-hong-fa-loadshi-jian</id>
    <content type="html"><![CDATA[<ul>
<li>图片墙需要计算图片高度，只有等图片load好计算的高度才正确，所以代码如下：</li>
</ul>


<p>```javascript</p>

<p>$(".img-div").each(function(){</p>

<pre><code>//设置load事件
$(this).find('img').load(function(){
    /* 用height()获取高度，省略事件逻辑 */
});
</code></pre>

<p>});</p>

<p>```</p>

<ul>
<li><p>感觉上面的代码很符合逻辑了，问题出现了：</p></li>
<li><p>当图片返回304缓存时，该图片不能触发load事件。。。（通过判断complete属性来修正）</p></li>
</ul>


<p>```javascript</p>

<pre><code>$(".img-div").each(function(){

    $(this).find('img').one('load', function(){
        /* 用height()获取高度，省略事件逻辑 */

        //使用one强制事件只触发一次，缓存的图片通过load()方法进行触发

    }).each(function() {
      if(this.complete) $(this).load();
    });
});
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery validation]]></title>
    <link href="http://www.wanghd.com/blog/2013/05/23/jquery-validation/"/>
    <updated>2013-05-23T12:41:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/05/23/jquery-validation</id>
    <content type="html"><![CDATA[<h3>表单验证在网站开发中是肯定有的，还好jquery在这方面已经做的很好了</h3>

<ul>
<li>自定义一种验证类型</li>
</ul>


<p>```javascript
jQuery.validator.addMethod(</p>

<pre><code>"cellphone",
function(value, element) {
    return this.optional(element) || /^1\d{10}$/.test(value);
},
"请输入有效的手机号码"
</code></pre>

<p>);
```</p>

<!-- more -->


<ul>
<li>定义规则和错误显示</li>
</ul>


<p>```javascript
$('#form').validate({</p>

<pre><code>rules: {
    nickname: "required",
    email: {
        required: true,
        email: true
    },
    password: {
        required: true,
        minlength: 6,
    }
},
messages: {
    nickname: "请输入昵称",
    email: {
        required: "请输入邮箱",
        email: "请输入有效的邮箱"
    },
    password: {
        required: "请输入密码",
        minlength: "密码的长度不能小于6位"
    }
},
errorElement: "div",
wrapper: "div",
errorPlacement: function(error, element) {
    element.parent().after(error);
},
highlight: function(element, errorClass) {
    $(element).parent().css('border', '1px solid red');
},
unhighlight: function(element, errorClass) {
    $(element).parent().css('border', '1px solid #777');
},
submitHandler: function() { alert("Submitted!") }
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery在firefox下无法autocomplete]]></title>
    <link href="http://www.wanghd.com/blog/2013/01/04/jqueryzai-firefoxxia-wu-fa-autocomplete/"/>
    <updated>2013-01-04T17:29:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/01/04/jqueryzai-firefoxxia-wu-fa-autocomplete</id>
    <content type="html"><![CDATA[<h4>jquery的autocomplete中文输入在firefox无法正常使用</h4>

<ul>
<li>firefox下用input事件触发keydown即可</li>
</ul>


<p>```
$('元素').bind('input', function(){</p>

<pre><code>$(this).trigger('keydown');
</code></pre>

<p>}).bind("keydown", function(event){</p>

<pre><code>事件
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
