<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Share | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/share/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2013-04-03T19:13:24+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu route命令]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/03/ubuntu-routeming-ling/"/>
    <updated>2013-04-03T18:55:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/03/ubuntu-routeming-ling</id>
    <content type="html"><![CDATA[<h3>route是非常常用的命令，作用是增加一条静态路由</h3>

<ul>
<li>以前觉得这条命令很难用，其实很简单～～</li>
</ul>


<p>```</p>

<h1>route 直接打印静态路由表 -n 选项代表把域名解析成ip</h1>

<p>$ route -n
```</p>

<h3>route 命令的基本格式</h3>

<ul>
<li>route 操作 目标地址 网关 设备</li>
</ul>


<p>```</p>

<h1>例1: eth0发往192.168.0.0网段的数据，都交给192.168.0.1网关</h1>

<h1>add就是操作，-net 192.168.0.0/24 就是目标网段</h1>

<h1>gw 192.168.0.1 是网关，dev eth0就是设备</h1>

<p>$ route add -net 192.168.0.0/24 gw 192.168.0.1 dev eth0</p>

<h1>例2: eth0默认网段的数据，都交给192.168.0.1网关</h1>

<p>$ route add default gw 192.168.0.1 dev eth0</p>

<h1>例3: eth0发往192.168.0.105主机的数据，都交给192.168.0.1网关</h1>

<p>$ route add -host 192.168.0.105 gw 192.168.0.1 dev eth0</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcpdump 简明教程]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/03/tcpdump-jian-ming-jiao-cheng/"/>
    <updated>2013-04-03T16:10:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/03/tcpdump-jian-ming-jiao-cheng</id>
    <content type="html"><![CDATA[<ul>
<li>tcpdump作用很简单，就是抓取数据包。很常用的网络分析工具。对于理解tcp/ip协议也非常有帮助。</li>
</ul>


<p>```</p>

<h1>请使用root用户，运行下面的命令捕获数据，你会发现数据包多的自己都不想看了</h1>

<p>$ sudo tcpdump
```</p>

<!-- more -->


<ul>
<li>tcpdump有很多选项，不过先不急着学选项。先能用起来才是关键，那先看几个<code>条件关键字</code>吧</li>
</ul>


<table class="table table-bordered" style="max-width:350px; margin-left:37px">
<tbody>
  <tr>
    <td>host</td>
    <td>可以是ip也可以是主机名</td>
  </tr>
  <tr>
    <td>net</td>
    <td>网段</td>
  </tr>
  <tr>
    <td>port</td>
    <td>端口</td>
  </tr>
  <tr>
    <td>ip,tcp,icmp,udp</td>
    <td>协议</td>
  </tr>
  <tr>
    <td>src</td>
    <td>来源</td>
  </tr>
  <tr>
    <td>dst</td>
    <td>目的地</td>
  </tr>
  <tr>
    <td>and</td>
    <td>同时满足</td>
  </tr>
  <tr>
    <td>or</td>
    <td>满足任何一个即可</td>
  </tr>
  <tr>
    <td>not</td>
    <td>非</td>
  </tr>
</tbody>
</table>


<ul>
<li>学了那么多条件关键字，来几个例子用起来吧</li>
</ul>


<p>```</p>

<h1>先学习几个简单的</h1>

<p>$ sudo tcpdump host 192.168.0.145
$ sudo tcpdump src 192.168.0.145
$ sudo tcpdump dst 192.168.0.145
$ sudo tcpdump net 192.168.0.0/24
$ sudo tcpdump tcp
$ tcpdump port 80</p>

<h1>组合起来用用</h1>

<p>$ sudo tcpdump tcp and src host 192.168.0.145 and port 80
$ sudo tcpdump ip and not dst 192.168.0.145 and dst port 80</p>

<h1>加上组，可以更加复杂一些</h1>

<p>$ sudo tcpdump tcp and host 192.168.0.145 and (port 80 or port 8080)</p>

<p>```</p>

<ul>
<li>感觉不错，加一点选项让tcpdump更加有用</li>
</ul>


<table class="table table-bordered" style="max-width:350px; margin-left:37px">
<tbody>
  <tr>
    <td>-w file-name</td>
    <td>将捕获到的数据写入文件</td>
  </tr>
  <tr>
    <td>-i device-name</td>
    <td>网络设备名，常用eth0</td>
  </tr>
  <tr>
    <td>-n</td>
    <td>不解析域名</td>
  </tr>
  <tr>
    <td>-nn</td>
    <td>不解析域名和端口</td>
  </tr>
  <tr>
    <td>-X,-XX</td>
    <td>用16进制和ascii显示包里的内容</td>
  </tr>
  <tr>
    <td>-v,-vv,-vvv</td>
    <td>越多越详细的头</td>
  </tr>
  <tr>
    <td>-c number</td>
    <td>捕获包的数量</td>
  </tr>
  <tr>
    <td>-s number</td>
    <td>获取多少内容, 0代表所有</td>
  </tr>
  <tr>
    <td>-S</td>
    <td>打印绝对的序列号</td>
  </tr>
</tbody>
</table>


<ul>
<li>让选项和条件组合起来，发挥tcpdump强大威力</li>
</ul>


<p>```
$ sudo tcpdump -vXSs 0 not dst port 8080 and (dst net 10.0.0.0/8 or 192.168.0.0/24)</p>

<h1>一个http的数据包</h1>

<p>17:55:51.846893 IP (tos 0x0, ttl 43, id 10976, offset 0, flags [DF], proto TCP (6), length 237)</p>

<pre><code>ec2-23-21-128-184.compute-1.amazonaws.com.http &gt; 192.168.0.145.60897: Flags [P.], cksum 0x5e78 (correct), seq 504653705:504653890, ack 894919854, win 27, options [nop,nop,TS val 222645590 ecr 909764515], length 185
0x0000:  4500 00ed 2ae0 4000 2b06 cb24 1715 80b8  E...*.@.+..$....
0x0010:  c0a8 0091 0050 ede1 1e14 6789 3557 64ae  .....P....g.5Wd.
0x0020:  8018 001b 5e78 0000 0101 080a 0d45 4d56  ....^x.......EMV
0x0030:  3639 e7a3 4854 5450 2f31 2e31 2032 3030  69..HTTP/1.1.200
0x0040:  204f 4b0d 0a53 6572 7665 723a 206e 6769  .OK..Server:.ngi
0x0050:  6e78 2f30 2e37 2e36 370d 0a44 6174 653a  nx/0.7.67..Date:
0x0060:  2057 6564 2c20 3033 2041 7072 2032 3031  .Wed,.03.Apr.201
0x0070:  3320 3039 3a35 353a 3531 2047 4d54 0d0a  3.09:55:51.GMT..
0x0080:  436f 6e74 656e 742d 5479 7065 3a20 696d  Content-Type:.im
0x0090:  6167 652f 6769 660d 0a43 6f6e 7465 6e74  age/gif..Content
0x00a0:  2d4c 656e 6774 683a 2034 330d 0a43 6f6e  -Length:.43..Con
0x00b0:  6e65 6374 696f 6e3a 2063 6c6f 7365 0d0a  nection:.close..
0x00c0:  0d0a 4749 4638 3961 0100 0100 8001 0000  ..GIF89a........
0x00d0:  0000 ffff ff21 f904 0100 0001 002c 0000  .....!.......,..
0x00e0:  0000 0100 0100 0002 024c 0100 3b         .........L..;
</code></pre>

<p>```</p>

<ul>
<li>tcpdump还可以根据tcp里某些状态位进行过滤</li>
</ul>


<p><code>
tcpdump 'tcp[13] &amp; 1!=0'
</code></p>

<br />


<ul>
<li>附送tcp头信息图
<img src="/images/post/tcp-header.jpg" title="tcp-header" alt="tcp-header" /></li>
</ul>


<br />


<ul>
<li>附送ip头信息图
<img src="/images/post/ip-header.jpg" title="ip-header" alt="ip-header" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ibm x3650 重装系统]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/03/ibm-x3650-zhong-zhuang-xi-tong/"/>
    <updated>2013-04-03T16:02:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/03/ibm-x3650-zhong-zhuang-xi-tong</id>
    <content type="html"><![CDATA[<h3>从机房把5年前的x3650拖回来重装系统全过程</h3>

<ul>
<li><p>原本是freebsd，做了raid1。现在希望改成ubuntu，不做raid，因为提供mogilefs服务</p></li>
<li><p>开机启动根据提示Ctrl + A进入raid管理</p></li>
<li>删除raid退出</li>
<li>开始安装ubuntu。。。发现找不到硬盘</li>
<li>难道没有raid就不行？再进到raid管理</li>
<li>进行硬盘初始化，然后创建raid使用简单卷Volume即可</li>
<li>一路安装终于没有问题了</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu服务器增加磁盘]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/03/fu-wu-qi-zeng-jia-ci-pan/"/>
    <updated>2013-04-03T11:57:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/03/fu-wu-qi-zeng-jia-ci-pan</id>
    <content type="html"><![CDATA[<h3>显示硬盘分区</h3>

<p>```
sudo fdisk -lu</p>

<h1>系统显示最下面显示：disk /dev/sdb doesn't contain a valid partition table</h1>

<p>```</p>

<h3>对sdb进行分区</h3>

<p><code>
sudo fdisk /dev/sdb
</code></p>

<ol>
<li>按m显示帮助文档</li>
<li>根据提示按n 添加一个新分区</li>
<li>按e 添加扩展分区，接下去默认即可</li>
<li>回到帮助文档，按p 显示分区结果</li>
<li>按w 保存分区，并退出完成</li>
<li>可以再fdisk -lu看看，结果已经不同了，硬盘认出来了</li>
</ol>


<!-- more -->


<h3>格式化磁盘</h3>

<ul>
<li>-t 是文件系统类型</li>
</ul>


<p><code>
sudo mkfs -t ext4 /dev/sdb
</code></p>

<h3>挂载磁盘</h3>

<p>```
sudo mount -t ext4  /data</p>

<h1>查看结果，应该有记录了</h1>

<p>sudo df -l
```</p>

<h3>配置启动挂载</h3>

<p>```
sudo blkid /dev/sdb</p>

<h1>显示 /dev/sdb: UUID="cc6f31aa-9af3-4283-8e52-8d31f5ebbd36" TYPE="ext4"</h1>

<p>vim /etc/fstab</p>

<h1>添加一行</h1>

<p>UUID=cc6f31aa-9af3-4283-8e52-8d31f5ebbd36 /data ext4 defaults 0 0
```</p>

<ul>
<li>fstab里的pass 根目录应当获得最高的优先权 1, 其它所有需要被检查的设备设置为 2. 0 表示设备不会被 fsck 所检查。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 配置模板]]></title>
    <link href="http://www.wanghd.com/blog/2013/03/31/nginx-pei-zhi-mo-ban/"/>
    <updated>2013-03-31T16:02:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/03/31/nginx-pei-zhi-mo-ban</id>
    <content type="html"><![CDATA[<h3>nginx服务器端配置，可以适当调整:</h3>

<ul>
<li>调整fastcgi 和 lb 的配置</li>
<li>上传文件大小</li>
</ul>


<!-- more -->


<p>```
user  william wheel;</p>

<h1>与内核数量相等即可</h1>

<p>worker_processes  4;</p>

<p>error_log  /usr/local/log/nginx/error.log  notice;
pid        /usr/local/log/nginx/nginx.pid;</p>

<p>events {</p>

<pre><code>worker_connections  10240;
use epoll;
</code></pre>

<p>}</p>

<p>http {</p>

<pre><code>server_names_hash_bucket_size 64;

include       mime.types;
default_type  application/octet-stream;

log_format  main '$request_time $upstream_response_time $remote_addr $request_length $upstream_addr  [$time_local] '
                  '$host "$request" $status $bytes_sent '
                  '"$http_referer" "$http_user_agent" "$gzip_ratio" "$http_x_forwarded_for" - "$server_addr"';

access_log  /usr/local/log/nginx/access.log  main;

# 单单作为lb可以关闭sendfile
sendfile        on;
tcp_nopush      on;

# 单单作为lb应该调低，例如5或10，避免空闲连接过多
keepalive_timeout  20;

# 单单作为lb不要开启gzip
gzip  on;

# 限制内容大小，如果上传文件比较大，可以调整
client_max_body_size  2m;
client_body_buffer_size 1m;

charset utf-8;

# 反向代理
proxy_buffering  on;
proxy_buffers 400 256k;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# fastcgi
fastcgi_connect_timeout 30;
fastcgi_send_timeout 30;
fastcgi_read_timeout 30;
fastcgi_buffers 200 256k;

include /usr/local/etc/nginx/conf.d/*.conf;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
