<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Share | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/share/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2012-12-19T10:41:43+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[inotify,rsync统一化配置]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/25/inotify/"/>
    <updated>2012-11-25T16:14:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/25/inotify</id>
    <content type="html"><![CDATA[<h3>为什么要统一化配置，手动改改不行？</h3>

<ul>
<li>假设有10台服务器，要改10次，错误和遗漏在所难免</li>
<li>需要有一个地方备份配置</li>
<li>也许还需要对配置文件进行版本控制</li>
</ul>


<h3>inotify+rsync改变这一切</h3>

<ul>
<li>inotify可以递归的监控文件是否有新建，修改等</li>
<li>rsync用来同步</li>
</ul>


<!-- more -->


<h3>安装inotify</h3>

<ul>
<li>内核版本要Linux 2.6.13以上</li>
</ul>


<p><code>bash
wget --no-check-certificate https://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz
tar -zxvf inotify-tools-3.14.tar.gz
cd inotify-tools-3.14
./configure
make
make install
</code></p>

<h3>测试脚本监控修改并自动同步</h3>

<ul>
<li>--exclude是用来排除隐藏文件</li>
</ul>


<p>```bash</p>

<h1>!/bin/sh</h1>

<p>ip="192.168.30.1 192.168.30.2"
src="http://www.wanghd.com/tmp/test"
inotifywait --exclude '/.' -mrq -e close_write,delete,move $src | while read line
do</p>

<pre><code>sleep 1
echo $line
for i in $ip
do 
    rsync --exclude=".*" -av --delete-after "$src/" -e ssh "$i:$src/"
done
</code></pre>

<p>done
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis实战]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/22/redisshi-zhan/"/>
    <updated>2012-11-22T17:17:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/22/redisshi-zhan</id>
    <content type="html"><![CDATA[<h3>redis是什么？</h3>

<ul>
<li>redis是一个开源的，先进的key-value存储服务器端</li>
<li>value可以包含多种结构，比如strings, hashes, lists, sets ,sorted sets</li>
<li>官方网址：<a href="http://redis.io">http://redis.io</a></li>
<li><a href="/blog/2012/10/13/irc-irssishi-yong-jiao-cheng/">freenode</a>的聊天室名称是#redis</li>
</ul>


<!-- more -->


<h3>安装redis</h3>

<ul>
<li>mac下安装redis非常简单</li>
</ul>


<p><code>bash
$ brew install redis
</code></p>

<ul>
<li>linux下的安装步骤如下</li>
</ul>


<p>```bash</p>

<h1>下载，解压和编译</h1>

<p>$ wget http://redis.googlecode.com/files/redis-2.6.5.tar.gz
$ tar xzf redis-2.6.5.tar.gz
$ cd redis-2.6.5
$ make
```</p>

<h3>配置redis</h3>

<ul>
<li>redis的默认配置文件是redis.conf，里面有详细的注释</li>
<li>下面是简单的单台redis配置</li>
</ul>


<p>```</p>

<h1>base</h1>

<p>daemonize yes                       #守护进程
port 6379                           #监听端口
bind 127.0.0.1                      #绑定的ip地址
timeout 0                           #断开空闲的客户端时间
loglevel notice                     #记录到错误日志的等级
logfile /usr/local/log/redis.log    #记录的日志文件
databases 16                        #可以选择的db个数</p>

<h1>rdb默认开启的持久化模式</h1>

<p>save 900 1                          #save &lt;秒> &lt;改变个数>           <br/>
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes     #当bgsave错误时停止rdb写入
rdbcompression yes                  #采用LZF压缩
rdbchecksum yes                     #校验和
dbfilename dump.rdb                 #保存的文件名
dir /usr/local/var/db/redis/        #保存的路径
```</p>

<h3>启动redis server端</h3>

<p><code>bash
$ redis-server [/path/to/redis.conf]         #mac
$ src/redis-server [/path/to/redis.conf]     #linux
</code></p>

<h3>打开client端，并测试</h3>

<p>```bash
$ redis-cli             #mac
$ src/redis-cli         #linux</p>

<p>redis> set name wanghuida
OK
redis> get name
"wanghuida"
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx反向代理自动urldecode问题]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/07/nginxfan-xiang-dai-li-zi-dong-urldecodewen-ti/"/>
    <updated>2012-11-07T16:40:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/07/nginxfan-xiang-dai-li-zi-dong-urldecodewen-ti</id>
    <content type="html"><![CDATA[<h3>今天妖孽了，发现nginx反向代理会自动urldecode</h3>

<ul>
<li>同事监控两个nginx的access_log，惊人的发现日志里的url不同</li>
<li>去掉反斜杠就ok了，不太清楚nginx内部是如何处理的</li>
</ul>


<p>```
location / {</p>

<pre><code>proxy_pass        http://localhost:8000/;
</code></pre>

<p>}</p>

<h1>修改为下面这样后，一切OK了</h1>

<p>location / {</p>

<pre><code>proxy_pass        http://localhost:8000;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[硬盘安装CentOS]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/14/ying-pan-an-zhuang-centos/"/>
    <updated>2012-10-14T21:48:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/14/ying-pan-an-zhuang-centos</id>
    <content type="html"><![CDATA[<h4>下载diskgenuis进行分区和设置卷标</h4>

<ul>
<li>【C盘】，NTFS；安装的是win7</li>
<li>【D盘】，卷标：REV，FAT32；</li>
</ul>


<h4>下载CentOS-6.2-i386-LiveCD.iso</h4>

<ul>
<li>把isolinux下的vmlinuz0和initrd0.img提取到C盘根目录下</li>
<li>把centos 6.2 livecd解压到D盘根目录下;</li>
</ul>


<h4>下载EasyBCD进行boot设置</h4>

<ul>
<li>使用easybcd安装NeoGrub，配置menu.lst，内容如下：</li>
</ul>


<p>```
title CentOS LiveCD</p>

<h1>如果前面还有分区设置为root (hd0,1)，设置错误了也没关系，重启后会报错，按e调整，再按b去boot</h1>

<p>root (hd0,0)
kernel /vmlinuz0 root=live:LABEL=REV rootfstype=auto ro liveimg quiet rhgb
initrd /initrd0.img
boot
```</p>

<h4>重启后，选择新选项即可进入CentOS LiveCD环境。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRC:irssi使用教程]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/13/irc-irssishi-yong-jiao-cheng/"/>
    <updated>2012-10-13T23:39:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/13/irc-irssishi-yong-jiao-cheng</id>
    <content type="html"><![CDATA[<h3>IRC是什么？</h3>

<ul>
<li>IRC（Internet Relay Chat的缩写，“因特网中继聊天”）是一种通过网络的即时聊天方式。其主要用于群体聊天，但同样也可以用于个人对个人的聊天。</li>
</ul>


<!-- more -->


<h3>安装irssi</h3>

<ul>
<li>命令行的聊天客户端满酷，就选择了irssi</li>
</ul>


<p><code>bash
brew install irssi
</code></p>

<h3>连接服务器</h3>

<ul>
<li>运行irssi</li>
<li>连接irc.freenode.net</li>
</ul>


<p><code>bash
irssi
/connect irc.freenode.net
</code></p>

<h3>注册一个自己用户名</h3>

<p><code>
/nick wanghuida
/msg nickserv help #会打开一个频道，Ctrl+N/P切换看一下命令,参数错误会有提示
/msg nickserv register 123456 wanghuida258@126.com
/msg NickServ VERIFY REGISTER wanghuida xgticwehprrf #这条命令是从邮箱里获取的
/msg nickserv identify 123456 #用于登陆识别
</code></p>

<h3>进入聊天室</h3>

<ul>
<li>可以开始欢快的聊天了</li>
</ul>


<p><code>
/join #mogilefs
/join #gentoo-cn
</code></p>

<h3>设置自动登陆</h3>

<ul>
<li>也可以不通过命令行来自动登陆</li>
<li>irssi的默认配置在~/.irssi/config里</li>
</ul>


<p><code>
alias irssi_williamwang='irssi --connect=irc.freenode.net --nick=williamwang --password=xxxxxx'
</code></p>

<h3>其他命令</h3>

<ul>
<li>/wc 或者 /leave ,离开当前频道</li>
<li>/disconnect &lt;服务器>，断开一个服务器</li>
<li>/quit 或者 /exit，退出 irssi，结束IRC会话。</li>
<li>/msg &lt;昵称> &lt;消息>，向某人发私消息（新开窗口）</li>
<li>/query &lt;昵称> &lt;消息>，向某人发私消息（新开窗口且转换到这个窗口）</li>
<li>/say &lt;昵称> &lt;消息>，向某人说话（不新开窗口）</li>
<li>/notice &lt;昵称> &lt;消息>，向指定人发出注意消息</li>
<li>/me &lt;动作>，在当前聊天室窗口中做出动作。 如做出晕倒动作：/me 晕倒</li>
<li>/away &lt;原因>，留下信息说明暂时离开，别人向你发出私聊时将会返回此消息，再重新输入 /away（不指定参数）则解除离开状态。</li>
<li>/ignore &lt;昵称>，忽略某人的聊天内容</li>
<li>/set autolog on，自动保存聊天记录</li>
<li>/msg ChanServ info #mogilefs ，查看聊天室信息，用来确认聊天室是否存在</li>
<li>/msg chanserv help ，创建频道之类的操作可以参考下帮助</li>
</ul>

]]></content>
  </entry>
  
</feed>
