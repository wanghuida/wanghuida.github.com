<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Share | 老虎的眼睛]]></title>
  <link href="http://www.wanghd.com/blog/categories/share/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2013-05-24T14:24:02+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jquery validation]]></title>
    <link href="http://www.wanghd.com/blog/2013/05/23/jquery-validation/"/>
    <updated>2013-05-23T12:41:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/05/23/jquery-validation</id>
    <content type="html"><![CDATA[<h3>表单验证在网站开发中是肯定有的，还好jquery在这方面已经做的很好了</h3>

<ul>
<li>自定义一种验证类型</li>
</ul>


<p>```javascript
jQuery.validator.addMethod(</p>

<pre><code>"cellphone",
function(value, element) {
    return this.optional(element) || /^1\d{10}$/.test(value);
},
"请输入有效的手机号码"
</code></pre>

<p>);
```</p>

<!-- more -->


<ul>
<li>定义规则和错误显示</li>
</ul>


<p>```javascript
$('#form').validate({</p>

<pre><code>rules: {
    nickname: "required",
    email: {
        required: true,
        email: true
    },
    password: {
        required: true,
        minlength: 6,
    }
},
messages: {
    nickname: "请输入昵称",
    email: {
        required: "请输入邮箱",
        email: "请输入有效的邮箱"
    },
    password: {
        required: "请输入密码",
        minlength: "密码的长度不能小于6位"
    }
},
errorElement: "div",
wrapper: "div",
errorPlacement: function(error, element) {
    element.parent().after(error);
},
highlight: function(element, errorClass) {
    $(element).parent().css('border', '1px solid red');
},
unhighlight: function(element, errorClass) {
    $(element).parent().css('border', '1px solid #777');
},
submitHandler: function() { alert("Submitted!") }
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英文Ubuntu安装中文包]]></title>
    <link href="http://www.wanghd.com/blog/2013/05/02/ying-wen-ubuntuan-zhuang-zhong-wen-bao/"/>
    <updated>2013-05-02T18:07:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/05/02/ying-wen-ubuntuan-zhuang-zhong-wen-bao</id>
    <content type="html"><![CDATA[<h3>查看系统内安装的locale：</h3>

<p>```
locale -a</p>

<h1>如果没有“zh-CN.UTF-8”，则表示系统内没有安装中文locale。这会导致“LC_CTYPE: cannot change locale (zh_CN.UTF-8)”的警告。</h1>

<p>```</p>

<h3>输入以下命令安装：</h3>

<p><code>
cd /usr/share/locales
sudo ./install-language-pack zh_CN
</code></p>

<ul>
<li>然后重开终端，就可以发现中文locale已经安装完毕，警告已经不再出现了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5分钟理解iptables]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/04/5fen-zhong-li-jie-iptables/"/>
    <updated>2013-04-04T10:08:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/04/5fen-zhong-li-jie-iptables</id>
    <content type="html"><![CDATA[<h3>iptables作用</h3>

<ol>
<li>过滤请求，根据条件决定通过或拒绝</li>
<li>网络地址转换</li>
<li>修改头信息</li>
</ol>


<h3>iptables的组成部分</h3>

<ul>
<li>table：根据类型分了3种，分别是filter,nat,mangle。filter用来过滤，nat用来地址转换，mangle用来改ttl之类的头信息【不常用】。</li>
<li>chain：是指网络包处理的某个阶段，看下图：1.yes这条路线目的地址是本机。2.no这条路线目的地址是其他网段，需要转发。</li>
</ul>


<p><img src="/images/post/iptables.gif" title="iptables" alt="iptables" /></p>

<!-- more -->


<ul>
<li>rule：用来判断哪些包需要处理，例如-p指定协议，-s指定源地址，-d指定目的地址，-i和-o定义输入输出的设备</li>
<li>target：其实用target这个词很不好理解，我的理解是符合规则后的操作</li>
</ul>


<h3>iptables命令的语法</h3>

<p>```
$ sudo iptables [table] [chain] [rule] [target]</p>

<h1>table用-t表示，例如-t nat，-t fileter。如果不加-t 默认就是filter</h1>

<h1>chain前面需要加一个动词，例如-A INPUT意思是"添加 input链"，例如-I POSTROUTING 2意思是"插入 postrouting 到第二条记录"</h1>

<h1>rule上面已经解释过了</h1>

<h1>target可以是ACCEPT，DROP，SNAT，MASQUERADE等，代表满足规则的话，就执行这种操作</h1>

<p>```</p>

<h3>记录一些例子，并解释</h3>

<p>```</p>

<h1>清空nat表里的记录</h1>

<p>sudo iptables -F -t nat</p>

<h1>在filter表里增加一条都接收的记录</h1>

<p>sudo iptables -t filter -A INPUT -j ACCEPT</p>

<h1>更改从eth1出去的源地址为114.77.99.212，一般用在共享单个ip</h1>

<p>sudo iptables -t nat -A POSTROUTING -o eth1 -j SNAT --to-source 114.77.99.212
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu route命令]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/03/ubuntu-routeming-ling/"/>
    <updated>2013-04-03T18:55:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/03/ubuntu-routeming-ling</id>
    <content type="html"><![CDATA[<h3>route是非常常用的命令，作用是增加一条静态路由</h3>

<ul>
<li>以前觉得这条命令很难用，其实很简单～～</li>
</ul>


<p>```</p>

<h1>route 直接打印静态路由表 -n 选项代表把域名解析成ip</h1>

<p>$ route -n
```</p>

<h3>route 命令的基本格式</h3>

<ul>
<li>route 操作 目标地址 网关 设备</li>
</ul>


<p>```</p>

<h1>例1: eth0发往192.168.0.0网段的数据，都交给192.168.0.1网关</h1>

<h1>add就是操作，-net 192.168.0.0/24 就是目标网段</h1>

<h1>gw 192.168.0.1 是网关，dev eth0就是设备</h1>

<p>$ route add -net 192.168.0.0/24 gw 192.168.0.1 dev eth0</p>

<h1>例2: eth0默认网段的数据，都交给192.168.0.1网关</h1>

<p>$ route add default gw 192.168.0.1 dev eth0</p>

<h1>例3: eth0发往192.168.0.105主机的数据，都交给192.168.0.1网关</h1>

<p>$ route add -host 192.168.0.105 gw 192.168.0.1 dev eth0</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcpdump 简明教程]]></title>
    <link href="http://www.wanghd.com/blog/2013/04/03/tcpdump-jian-ming-jiao-cheng/"/>
    <updated>2013-04-03T16:10:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2013/04/03/tcpdump-jian-ming-jiao-cheng</id>
    <content type="html"><![CDATA[<ul>
<li>tcpdump作用很简单，就是抓取数据包。很常用的网络分析工具。对于理解tcp/ip协议也非常有帮助。</li>
</ul>


<p>```</p>

<h1>请使用root用户，运行下面的命令捕获数据，你会发现数据包多的自己都不想看了</h1>

<p>$ sudo tcpdump
```</p>

<!-- more -->


<ul>
<li>tcpdump有很多选项，不过先不急着学选项。先能用起来才是关键，那先看几个<code>条件关键字</code>吧</li>
</ul>


<table class="table table-bordered" style="max-width:350px; margin-left:37px">
<tbody>
  <tr>
    <td>host</td>
    <td>可以是ip也可以是主机名</td>
  </tr>
  <tr>
    <td>net</td>
    <td>网段</td>
  </tr>
  <tr>
    <td>port</td>
    <td>端口</td>
  </tr>
  <tr>
    <td>ip,tcp,icmp,udp</td>
    <td>协议</td>
  </tr>
  <tr>
    <td>src</td>
    <td>来源</td>
  </tr>
  <tr>
    <td>dst</td>
    <td>目的地</td>
  </tr>
  <tr>
    <td>and</td>
    <td>同时满足</td>
  </tr>
  <tr>
    <td>or</td>
    <td>满足任何一个即可</td>
  </tr>
  <tr>
    <td>not</td>
    <td>非</td>
  </tr>
</tbody>
</table>


<ul>
<li>学了那么多条件关键字，来几个例子用起来吧</li>
</ul>


<p>```</p>

<h1>先学习几个简单的</h1>

<p>$ sudo tcpdump host 192.168.0.145
$ sudo tcpdump src 192.168.0.145
$ sudo tcpdump dst 192.168.0.145
$ sudo tcpdump net 192.168.0.0/24
$ sudo tcpdump tcp
$ tcpdump port 80</p>

<h1>组合起来用用</h1>

<p>$ sudo tcpdump tcp and src host 192.168.0.145 and port 80
$ sudo tcpdump ip and not dst 192.168.0.145 and dst port 80</p>

<h1>加上组，可以更加复杂一些</h1>

<p>$ sudo tcpdump tcp and host 192.168.0.145 and (port 80 or port 8080)</p>

<p>```</p>

<ul>
<li>感觉不错，加一点选项让tcpdump更加有用</li>
</ul>


<table class="table table-bordered" style="max-width:350px; margin-left:37px">
<tbody>
  <tr>
    <td>-w file-name</td>
    <td>将捕获到的数据写入文件</td>
  </tr>
  <tr>
    <td>-i device-name</td>
    <td>网络设备名，常用eth0</td>
  </tr>
  <tr>
    <td>-n</td>
    <td>不解析域名</td>
  </tr>
  <tr>
    <td>-nn</td>
    <td>不解析域名和端口</td>
  </tr>
  <tr>
    <td>-X,-XX</td>
    <td>用16进制和ascii显示包里的内容</td>
  </tr>
  <tr>
    <td>-v,-vv,-vvv</td>
    <td>越多越详细的头</td>
  </tr>
  <tr>
    <td>-c number</td>
    <td>捕获包的数量</td>
  </tr>
  <tr>
    <td>-s number</td>
    <td>获取多少内容, 0代表所有</td>
  </tr>
  <tr>
    <td>-S</td>
    <td>打印绝对的序列号</td>
  </tr>
</tbody>
</table>


<ul>
<li>让选项和条件组合起来，发挥tcpdump强大威力</li>
</ul>


<p>```
$ sudo tcpdump -vXSs 0 not dst port 8080 and (dst net 10.0.0.0/8 or 192.168.0.0/24)</p>

<h1>一个http的数据包</h1>

<p>17:55:51.846893 IP (tos 0x0, ttl 43, id 10976, offset 0, flags [DF], proto TCP (6), length 237)</p>

<pre><code>ec2-23-21-128-184.compute-1.amazonaws.com.http &gt; 192.168.0.145.60897: Flags [P.], cksum 0x5e78 (correct), seq 504653705:504653890, ack 894919854, win 27, options [nop,nop,TS val 222645590 ecr 909764515], length 185
0x0000:  4500 00ed 2ae0 4000 2b06 cb24 1715 80b8  E...*.@.+..$....
0x0010:  c0a8 0091 0050 ede1 1e14 6789 3557 64ae  .....P....g.5Wd.
0x0020:  8018 001b 5e78 0000 0101 080a 0d45 4d56  ....^x.......EMV
0x0030:  3639 e7a3 4854 5450 2f31 2e31 2032 3030  69..HTTP/1.1.200
0x0040:  204f 4b0d 0a53 6572 7665 723a 206e 6769  .OK..Server:.ngi
0x0050:  6e78 2f30 2e37 2e36 370d 0a44 6174 653a  nx/0.7.67..Date:
0x0060:  2057 6564 2c20 3033 2041 7072 2032 3031  .Wed,.03.Apr.201
0x0070:  3320 3039 3a35 353a 3531 2047 4d54 0d0a  3.09:55:51.GMT..
0x0080:  436f 6e74 656e 742d 5479 7065 3a20 696d  Content-Type:.im
0x0090:  6167 652f 6769 660d 0a43 6f6e 7465 6e74  age/gif..Content
0x00a0:  2d4c 656e 6774 683a 2034 330d 0a43 6f6e  -Length:.43..Con
0x00b0:  6e65 6374 696f 6e3a 2063 6c6f 7365 0d0a  nection:.close..
0x00c0:  0d0a 4749 4638 3961 0100 0100 8001 0000  ..GIF89a........
0x00d0:  0000 ffff ff21 f904 0100 0001 002c 0000  .....!.......,..
0x00e0:  0000 0100 0100 0002 024c 0100 3b         .........L..;
</code></pre>

<p>```</p>

<ul>
<li>tcpdump还可以根据tcp里某些状态位进行过滤</li>
</ul>


<p><code>
tcpdump 'tcp[13] &amp; 1!=0'
</code></p>

<br />


<ul>
<li>附送tcp头信息图
<img src="/images/post/tcp-header.jpg" title="tcp-header" alt="tcp-header" /></li>
</ul>


<br />


<ul>
<li>附送ip头信息图
<img src="/images/post/ip-header.jpg" title="ip-header" alt="ip-header" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
