<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[惠达的小宅]]></title>
  <link href="http://www.wanghd.com/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2012-11-06T23:00:46+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mogilefs删除队列]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/06/mogilefsshan-chu-dui-lie/"/>
    <updated>2012-11-06T19:31:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/06/mogilefsshan-chu-dui-lie</id>
    <content type="html"><![CDATA[<h3>遇到的问题</h3>

<ul>
<li>发现file_to_delete2队列表里有500万记录，奇怪这些文件为什么要删除？心里不踏实，寻找根源&#8230;</li>
<li>在队列中随便拿一个fid，在file表里查竟然是空的，再找file_on表竟然有数据&#8230;</li>
</ul>


<h3>什么时候会插入fid到删除队列呢</h3>

<ol>
<li>cmd_create_close时，如果连接终端，文件大小等不正确，会增加到删除队列</li>
<li>cmd_create_close时，如果同一domain下key已经存在，那么会去删除原有的文件(两份文件key相同，但是fid不同，我的问题就出在这)</li>
<li>mogdelete工具会删除memcache和file表的文件记录，并运用删除队列删除磁盘上的文件和file_on表</li>
<li>client调用delete方法，和mogdelete一样</li>
</ol>


<!-- more -->


<h3>cmd_create_close逻辑</h3>

<ul>
<li>mogilefs上传文件的逻辑是先问tracker拿文件存储路径，然后上传文件到一个storage，最后调用cmd_create_close方法插入数据记录和replicate队列</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">cmd_create_close</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nn">MogileFS::Worker::</span><span class="n">Query</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$args</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># has to be filled out for some plugins</span>
</span><span class='line'>    <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">dmid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">check_domain</span><span class="p">(</span><span class="nv">$args</span><span class="p">)</span>
</span><span class='line'>        <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&#39;domain_not_found&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># call out to a hook that might modify the arguments for us</span>
</span><span class='line'>    <span class="c1"># 调用插件用的钩子，一般是没的</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">run_global_hook</span><span class="p">(</span><span class="s">&#39;cmd_create_close&#39;</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># late validation of parameters</span>
</span><span class='line'>    <span class="c1"># 设置下面使用的变量</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dmid</span>  <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">dmid</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$key</span>   <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">key</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fidid</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fid</span><span class="p">}</span>    <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;no_fid&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$devid</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">devid</span><span class="p">}</span>  <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;no_devid&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$path</span>  <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">path</span><span class="p">}</span>   <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;no_path&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$checksum</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">checksum</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$checksum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$checksum</span> <span class="o">=</span> <span class="nb">eval</span> <span class="p">{</span> <span class="nn">MogileFS::</span><span class="n">Checksum</span><span class="o">-&gt;</span><span class="n">from_string</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">,</span> <span class="nv">$checksum</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;invalid_checksum_format&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="vg">$@</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 初始化fid和dfid对象</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fid</span>  <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dfid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">DevFID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$devid</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># is the provided path what we&#39;d expect for this fid/devid?</span>
</span><span class='line'>    <span class="c1"># 验证是否为伪造路径</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;bogus_args&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">unless</span> <span class="nv">$path</span> <span class="ow">eq</span> <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sto</span> <span class="o">=</span> <span class="nn">Mgd::</span><span class="n">get_store</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># find the temp file we&#39;re closing and making real.  If another worker</span>
</span><span class='line'>    <span class="c1"># already has it, bail out---the client closed it twice.</span>
</span><span class='line'>    <span class="c1"># this is racy, but the only expected use case is a client retrying.</span>
</span><span class='line'>    <span class="c1"># should still be fixed better once more scalable locking is available.</span>
</span><span class='line'>    <span class="c1"># 取得零时文件数据,并删除掉</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$trow</span> <span class="o">=</span> <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">delete_and_return_tempfile_row</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;no_temp_file&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Protect against leaving orphaned uploads.</span>
</span><span class='line'>    <span class="c1"># 定义错误函数，可以看到$fid-&gt;delete会删除file表记录并插入删除队列</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$failed</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">add_to_db</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="nb">delete</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 验证设备</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">$trow</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">devids</span><span class="p">}</span> <span class="o">=~</span> <span class="sr">m/\b$devid\b/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$failed</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;invalid_destdev&quot;</span><span class="p">,</span> <span class="s">&quot;File uploaded to invalid dest $devid. Valid devices were: &quot;</span> <span class="o">.</span> <span class="nv">$trow</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">devids</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if a temp file is closed without a provided-key, that means to</span>
</span><span class='line'>    <span class="c1"># delete it.</span>
</span><span class='line'>    <span class="c1"># 验证key</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nb">defined</span> <span class="nv">$key</span> <span class="o">&amp;&amp;</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$failed</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">ok_line</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># get size of file and verify that it matches what we were given, if anything</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$httpfile</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">HTTPFile</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="nv">$path</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$size</span> <span class="o">=</span> <span class="nv">$httpfile</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># size check is optional? Needs to support zero byte files.</span>
</span><span class='line'>    <span class="c1"># 验证文件大小</span>
</span><span class='line'>    <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">size</span><span class="p">}</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="k">unless</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">size</span><span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$size</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$size</span> <span class="o">==</span> <span class="nn">MogileFS::HTTPFile::</span><span class="n">FILE_MISSING</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># storage node is unreachable or the file is missing</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$type</span>    <span class="o">=</span> <span class="nb">defined</span> <span class="nv">$size</span> <span class="p">?</span> <span class="s">&quot;missing&quot;</span> <span class="p">:</span> <span class="s">&quot;cantreach&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$lasterr</span> <span class="o">=</span> <span class="nn">MogileFS::Util::</span><span class="n">last_error</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$failed</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;size_verify_error&quot;</span><span class="p">,</span> <span class="s">&quot;Expected: $args-&gt;{size}; actual: 0 ($type); path: $path; error: $lasterr&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">size</span><span class="p">}</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">size</span><span class="p">}</span> <span class="o">!=</span> <span class="nv">$size</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$failed</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;size_mismatch&quot;</span><span class="p">,</span> <span class="s">&quot;Expected: $args-&gt;{size}; actual: $size; path: $path&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># checksum validation is optional as it can be very expensive</span>
</span><span class='line'>    <span class="c1"># However, we /always/ verify it if the client wants us to, even</span>
</span><span class='line'>    <span class="c1"># if the class does not enforce or store it.</span>
</span><span class='line'>    <span class="c1"># 校验和</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$checksum</span> <span class="o">&amp;&amp;</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">checksumverify</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$alg</span> <span class="o">=</span> <span class="nv">$checksum</span><span class="o">-&gt;</span><span class="n">hashname</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$actual</span> <span class="o">=</span> <span class="nv">$httpfile</span><span class="o">-&gt;</span><span class="n">digest</span><span class="p">(</span><span class="nv">$alg</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">still_alive</span> <span class="p">});</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$actual</span> <span class="ow">ne</span> <span class="nv">$checksum</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">checksum</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$failed</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$actual</span> <span class="o">=</span> <span class="s">&quot;$alg:&quot;</span> <span class="o">.</span> <span class="nb">unpack</span><span class="p">(</span><span class="s">&quot;H*&quot;</span><span class="p">,</span> <span class="nv">$actual</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;checksum_mismatch&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="s">&quot;Expected: $checksum; actual: $actual; path: $path&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1"># see if we have a fid for this key already</span>
</span><span class='line'>    <span class="c1"># 关键的来了，如果在同一个domain下有相同的key，那么删除该文件的file表记录，并插入delete队列</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$old_fid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="n">new_from_dmid_and_key</span><span class="p">(</span><span class="nv">$dmid</span><span class="p">,</span> <span class="nv">$key</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$old_fid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># Fail if a file already exists for this fid.  Should never</span>
</span><span class='line'>        <span class="c1"># happen, as it should not be possible to close a file twice.</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;fid_exists&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">unless</span> <span class="nv">$old_fid</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fidid</span><span class="p">}</span> <span class="o">!=</span> <span class="nv">$fidid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$old_fid</span><span class="o">-&gt;</span><span class="nb">delete</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># TODO: check for EIO?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># insert file_on row</span>
</span><span class='line'>    <span class="c1"># 以上都没有问题，那么就确认保存文件到数据库</span>
</span><span class='line'>    <span class="c1"># 保存到file_on表</span>
</span><span class='line'>    <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">add_to_db</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$checksum</span><span class="o">-&gt;</span><span class="n">maybe_save</span><span class="p">(</span><span class="nv">$dmid</span><span class="p">,</span> <span class="nv">$trow</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">classid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$checksum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 保存到file表 </span>
</span><span class='line'>    <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">replace_into_file</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">fidid</span>   <span class="o">=&gt;</span> <span class="nv">$fidid</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">dmid</span>    <span class="o">=&gt;</span> <span class="nv">$dmid</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">key</span>     <span class="o">=&gt;</span> <span class="nv">$key</span><span class="p">,</span>
</span><span class='line'>                            <span class="nb">length</span>  <span class="o">=&gt;</span> <span class="nv">$size</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">classid</span> <span class="o">=&gt;</span> <span class="nv">$trow</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">classid</span><span class="p">},</span>
</span><span class='line'>                            <span class="n">devcount</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                            <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># mark it as needing replicating:</span>
</span><span class='line'>    <span class="c1"># 插入文件到replicate队列 </span>
</span><span class='line'>    <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">enqueue_for_replication</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># call the hook - if this fails, we need to back the file out</span>
</span><span class='line'>    <span class="c1"># 调用钩子</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">run_global_hook</span><span class="p">(</span><span class="s">&#39;file_stored&#39;</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">defined</span> <span class="nv">$rv</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># undef = no hooks, 1 = success, 0 = failure</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="nb">delete</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;plugin_aborted&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1"># all went well, we would&#39;ve hit condthrow on DB errors</span>
</span><span class='line'>    <span class="c1"># 返回正确结果</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">ok_line</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结为什么会出现这种现象</h3>

<ul>
<li>当在同一个domain下，上传相同key的文件，之前的文件会被删除，但是两个文件的fid是不同的</li>
<li>$fid->delete这个操作实际是删除memcache和file表数据，file_on表和磁盘上的文件交给队列来处理</li>
<li>作者考虑到删除文件是比较耗时的操作，所以交给队列慢慢处理，才会导致file表里没数据，但是file_on上仍有数据</li>
<li>如果可能，尽量避免上传相同的key，这样可以减少对db的读写操作(我准备优化)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写hadoop的Map-Reduce]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/04/bian-xie-hadoopde-map-reduce/"/>
    <updated>2012-11-04T21:12:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/04/bian-xie-hadoopde-map-reduce</id>
    <content type="html"><![CDATA[<h3>创建map-reduce项目</h3>

<ul>
<li>安装hadoop请参考<a href="http://www.wanghd.com/blog/2012/11/02/an-zhuang-pei-zhi-hadoop/">这篇文章</a></li>
<li>安装hadoop-plugin请参考<a href="http://www.wanghd.com/blog/2012/11/03/eclipsepei-zhi-hadoopde-map-reducekai-fa-huan-jing/">这篇文章</a></li>
</ul>


<p><img src="http://www.wanghd.com/images/post/new-mapred.png" title="new-mapred" alt="new-mapred" /></p>

<h3>创建测试数据</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp
</span><span class='line'>mkdir input
</span><span class='line'>echo "hello world baby huida" &gt; t1.txt
</span><span class='line'>echo "world baby baby markdown" &gt; t2.txt
</span><span class='line'>
</span><span class='line'>bin/hadoop fs -put /tmp/input input
</span><span class='line'>bin/hadoop fs -ls</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>复制测试代码</h3>

<ul>
<li>hadoop源代码里的例子：/src/example/org/apache/hadoop/example/WordCount.java</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">anjuke</span><span class="o">.</span><span class="na">mapred</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.IntWritable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Mapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Reducer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileInputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.output.FileOutputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.GenericOptionsParser</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordCount</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TokenizerMapper</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringTokenizer</span> <span class="n">itr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IntSumReducer</span> <span class="kd">extends</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span><span class="n">IntWritable</span><span class="o">,</span><span class="n">Text</span><span class="o">,</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IntWritable</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">IntWritable</span> <span class="n">val</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">val</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">otherArgs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericOptionsParser</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">args</span><span class="o">).</span><span class="na">getRemainingArgs</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">otherArgs</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: wordcount &lt;in&gt; &lt;out&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="s">&quot;word count&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">WordCount</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">TokenizerMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setCombinerClass</span><span class="o">(</span><span class="n">IntSumReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">IntSumReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">otherArgs</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>    <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">otherArgs</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>运行实例</h3>

<ul>
<li>修改运行参数，根据自己的路径修改</li>
</ul>


<p><img src="http://www.wanghd.com/images/post/wordcount-conf.png" title="wordcount-conf" alt="wordcount-conf" /></p>

<ul>
<li>点击运行后看结果</li>
</ul>


<p><img src="http://www.wanghd.com/images/post/mapred-run.png" title="mapred-run" alt="mapred-run" /></p>

<p><img src="http://www.wanghd.com/images/post/wordcount-ret.png" title="wordcount-ret" alt="wordcount-ret" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse配置hadoop的map-reduce开发环境]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/03/eclipsepei-zhi-hadoopde-map-reducekai-fa-huan-jing/"/>
    <updated>2012-11-03T00:14:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/03/eclipsepei-zhi-hadoopde-map-reducekai-fa-huan-jing</id>
    <content type="html"><![CDATA[<h3>生成eclipse环境</h3>

<ul>
<li>安装hadoop请参考<a href="http://www.wanghd.com/blog/2012/11/02/an-zhuang-pei-zhi-hadoop/">这篇文章</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd hadoop-1.0.4
</span><span class='line'>
</span><span class='line'>#肯定会遇到诸多问题
</span><span class='line'>ant eclipse </span></code></pre></td></tr></table></div></figure>


<blockquote><p>问题1：configure: error: C++ preprocessor &#8220;/lib/cpp&#8221; fails sanity check</p>

<blockquote><p>mac没有安装Xcode的command tool</p></blockquote>

<p>问题2：can&#8217;t exec &#8220;glibtoolize&#8221;</p>

<blockquote><p>brew install autoconf automake libtool</p></blockquote>

<p>问题3: .eclipse.templates does not exist</p>

<blockquote><p>自己在hadoop-1.0.4下创建一个mkdir .eclipse.templates</p></blockquote></blockquote>

<!-- more -->


<h3>编译hadoop-eclipse-plugin</h3>

<br />


<p>1.进入eclipse插件目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd src/contrib/eclipse-plugin</span></code></pre></td></tr></table></div></figure>


<p>2.编辑build.properties</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim build.properties
</span><span class='line'># 设置属性，eclipse.home根据自己的定义
</span><span class='line'>eclipse.home = /Applications/eclipse
</span><span class='line'>version = 1.0.4</span></code></pre></td></tr></table></div></figure>


<p>3.编辑build.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 在target=jar里面增加下面的jar包
</span><span class='line'>&lt;copy file="${hadoop.root}/lib/commons-lang-2.4.jar"  todir="${build.dir}/lib" verbose="true"/&gt;
</span><span class='line'>&lt;copy file="${hadoop.root}/lib/commons-configuration-1.6.jar"  todir="${build.dir}/lib" verbose="true"/&gt;
</span><span class='line'>&lt;copy file="${hadoop.root}/lib/jackson-core-asl-1.8.8.jar"  todir="${build.dir}/lib" verbose="true"/&gt;
</span><span class='line'>&lt;copy file="${hadoop.root}/lib/jackson-mapper-asl-1.8.8.jar"  todir="${build.dir}/lib" verbose="true"/&gt;
</span><span class='line'>&lt;copy file="${hadoop.root}/lib/commons-httpclient-3.0.1.jar"  todir="${build.dir}/lib" verbose="true"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>4.编辑vim META-INF/MANIFEST.MF</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 修改Bundle-ClassPath
</span><span class='line'>Bundle-ClassPath: classes/,
</span><span class='line'>  lib/hadoop-core.jar,
</span><span class='line'>  lib/commons-configuration-1.6.jar,
</span><span class='line'>  lib/commons-httpclient-3.0.1.jar,
</span><span class='line'>  lib/commons-lang-2.4.jar,
</span><span class='line'>  lib/jackson-core-asl-1.8.8.jar,
</span><span class='line'>  lib/jackson-mapper-asl-1.8.8.jar
</span></code></pre></td></tr></table></div></figure>


<p>5.复制hadoop核心包, 并生成我们需要的插件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp {root}/hadoop-core-1.0.4.jar {root}/build
</span><span class='line'>#生成jar包
</span><span class='line'>ant jar</span></code></pre></td></tr></table></div></figure>


<p>6.编译成功后在build/contrib/eclipse-plugin下找到hadoop-eclipse-plugin-1.0.4.jar</p>

<h3>eclipse配置</h3>

<ul>
<li><p>复制hadoop-eclipse-plugin-1.0.4.jar到eclipse的plugins下，然后重启eclipse</p></li>
<li><p>Preferences => Hadoop Map/Reduce</p></li>
</ul>


<p><img src="http://www.wanghd.com/images/post/hadoop-eclipse-location.png" title="hadoop-eclipse-location.png" alt="hadoop-eclipse-location.png" /></p>

<ul>
<li>Window => Show View => Other&#8230; => Map/Reduce Locations => New Hadoop Location&#8230;</li>
</ul>


<p><img src="http://www.wanghd.com/images/post/hadoop-eclipse-general.png" title="hadoop-eclipse-general.png" alt="hadoop-eclipse-general.png" /></p>

<ul>
<li>看下结果吧</li>
</ul>


<p><img src="http://www.wanghd.com/images/post/hadoop-eclipse-result.png" title="hadoop-eclipse-result.png" alt="hadoop-eclipse-result.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装配置hadoop]]></title>
    <link href="http://www.wanghd.com/blog/2012/11/02/an-zhuang-pei-zhi-hadoop/"/>
    <updated>2012-11-02T23:38:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/11/02/an-zhuang-pei-zhi-hadoop</id>
    <content type="html"><![CDATA[<h3>下载stable的hadoop</h3>

<ul>
<li>hadoop的版本比较多，建议下载<code>stable</code>的，现在是<code>hadoop-1.0.4</code></li>
<li>提供一个<a href="http://hadoop.apache.org/releases.html#Download">下载链接</a></li>
</ul>


<h3>解压缩</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -zxvf hadoop-1.0.4.tar.gz
</span><span class='line'>cd hadoop-1.0.4</span></code></pre></td></tr></table></div></figure>


<h3>配置hadoop</h3>

<blockquote><p>vim编辑conf/hadoop-env.sh，设置环境变量</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#如果是mac的话，请添加下面这句
</span><span class='line'>export HADOOP_OPTS="-Djava.security.krb5.realm=OX.AC.UK 
</span><span class='line'>    -Djava.security.krb5.kdc=kdc0.ox.ac.uk:kdc1.ox.ac.uk"
</span><span class='line'>#配置JDK，mac的关系所以路径比较飘逸
</span><span class='line'>export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<blockquote><p>vim编译conf/core-site.xml，设置hdfs端口</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;configuration&gt;
</span><span class='line'>    &lt;property&gt;
</span><span class='line'>        &lt;name&gt;fs.default.name&lt;/name&gt;
</span><span class='line'>        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;
</span><span class='line'>    &lt;/property&gt;
</span><span class='line'>&lt;/configuration&gt;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>vim编辑conf/hdfs-site.xml，设置hdfs复制份数</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;configuration&gt;
</span><span class='line'>    &lt;property&gt;
</span><span class='line'>        &lt;name&gt;dfs.replication&lt;/name&gt;  
</span><span class='line'>        &lt;value&gt;1&lt;/value&gt;  
</span><span class='line'>    &lt;/property&gt; 
</span><span class='line'>&lt;/configuration&gt;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>vim编译conf/mapred-site.xml，设置job跟踪器的端口(map-reduce的)</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;configuration&gt;
</span><span class='line'>    &lt;property&gt;
</span><span class='line'>        &lt;name&gt;mapred.job.tracker&lt;/name&gt;
</span><span class='line'>        &lt;value&gt;localhost:9001&lt;/value&gt;
</span><span class='line'>    &lt;/property&gt;
</span><span class='line'>&lt;/configuration&gt;</span></code></pre></td></tr></table></div></figure>


<h3>配置ssh</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.ssh/id_dsa.pub &gt;&gt; authorized_keys</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.wanghd.com/images/post/ssh.jpg" title="ssh" alt="ssh" /></p>

<h3>启动测试hodoop</h3>

<ul>
<li>如果端口没有被占用的应该一切OK了</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/hadoop namenode -format
</span><span class='line'>bin/start-all.sh
</span><span class='line'>#增加一些文件，这里用你自己的目录替换
</span><span class='line'>bin/hadoop fs -put ~/project/mogilefs-tool /mogilefs-tool</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在游览器里查看下结果，输入localhost:50070</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MogileFS详解]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/23/mogilefsxiang-jie/"/>
    <updated>2012-10-23T22:48:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/23/mogilefsxiang-jie</id>
    <content type="html"><![CDATA[<ul>
<li>经过一个月的实际应用，我想是时候应该总结一下mogilefs的使用了，如果想和作者交流参考<a href="http://www.wanghd.com/blog/2012/10/13/irc-irssishi-yong-jiao-cheng/">IRC教程</a></li>
</ul>


<h3>MogileFS简介</h3>

<blockquote><p>MogileFS是一个<code>开源</code>的<code>分布式文件系统</code>，配合cdn和squid，性能非常好(<code>15亿</code>文件没问题，其他数据不方便透露)</p>

<p>他由下面几个部分组成:</p></blockquote>

<p><img src="http://www.wanghd.com/images/post/mogilefs-summary.jpg" title="mogilefs-summary" alt="mogilefs-summary" /></p>

<ol>
<li>memcache：用来缓存查询结果，降低db压力</li>
<li>mogilefsd：就是tracker，用来接收请求并交给子进程(job)处理</li>
<li>mogstored：监控磁盘状态和文件的实际存储</li>
<li>client：支持perl，java，ruby，php，python</li>
<li>mysql：存储记录</li>
<li>util：日常维护管理的工具集</li>
<li>telnet：监控tracker，实时调整job的工具</li>
</ol>


<!-- more -->


<h3>Mogstored</h3>

<blockquote><p>监控磁盘状态和文件的实际存储,启动mogstored会发现包含2个端口，默认的7501和7500</p>

<blockquote><p>7501用来监控磁盘状态</p>

<p>7500用来处理实际的文件存储</p></blockquote></blockquote>

<p><img src="http://www.wanghd.com/images/post/mogilefs-mogstored.jpg" title="mogilefs-mogstored" alt="mogilefs-mogstored" /></p>

<h4>问题总结</h4>

<ul>
<li>原本我一直以为mogstored自己实现了一套文件存储，但实际上不是。它使用的是WebDav，所以可以使用nginx代替默认的perlbal，实际用下来nginx更稳定</li>
<li>WebDav：一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，例如PUT(新增)、DELETE(删除)、MKCOL(创建目录)</li>
<li>在mogstored的使用上，犯过一个错误：直接使用root启动mogstored，那么创建的文件夹和文件都是属于root，导致delete job无法删除该文件（同事陈磊发现）</li>
<li>文件存储规则：/dev-xx/0/123/456/789/0123456789.fid，fid不足十位补0，通过fid进行切割变为目录，即分散又效率</li>
</ul>


<h3>Mogilefsd</h3>

<blockquote><p>主进程负责接受请求，分配任务给子进程执行,下面详细介绍一下他的子进程</p></blockquote>

<ol>
<li>query：处理主进程分配的请求，包括util和tool的指令</li>
<li>delete：根据删除队列对文件进行删除操作</li>
<li>replicate：复制文件直到满足mindevcount(文件复制几份)</li>
<li>fsck：检查磁盘文件和数据库是否匹配，不匹配时进行补救</li>
<li>monitor：监控子进程的状态，实时调整子进程个数</li>
<li>reaper：监控dead的磁盘，及时补救，把文件加到replicate queue</li>
<li>jobmaster：读取delete,replicate,rebalance,fsck队列，告诉主进程，主进程再交给对应的子进程处理</li>
</ol>


<h4>问题总结</h4>

<ul>
<li>query新建文件时，用剩余容量作权重，随机选择。所以新加入一块设备时，极有可能将成为热点设备，最好是一组设备一起加</li>
<li>如果设备出现问题，直接格式化后直接使用会导致数据库记录还在，文件丢失，最终fsck和replicate队列堆积，正确的做法是把设备状态设置为dead，然后格式化用一个新的devid使用</li>
<li>如果确定磁盘损坏，就一定要设置dead状态，reaper会自动补救</li>
</ul>


<h3>Memcache</h3>

<blockquote><p>用来缓存查询结果，降低db压力，query内部存放<code>key对应的fid</code>和<code>fid对应的设备</code></p></blockquote>

<h4>问题总结</h4>

<ul>
<li>db压力下不来的原因是客户端取得文件时没有设置noverify参数，如果确定要使用memcache就一定要设置noverify，否则不使用memcache</li>
</ul>


<h3>Mysql</h3>

<blockquote><p>用来存储记录，当然也可以使用其他数据库</p></blockquote>

<ol>
<li>host表：存储主机信息</li>
<li>device表：存储设备，一般单个device对应一块磁盘，也可以不这样</li>
<li>domain表：定义域，单个域下key唯一</li>
<li>class表：文件存放策略，包括份数，复制策略，校验和</li>
<li>server_settings表：部分配置信息和job配置信息</li>
<li>file表：文件信息</li>
<li>file_on表：文件存放在哪些存储设备</li>
<li>file_to_delete2表：删除队列表，升级后以前的不用了</li>
<li>file_to_queue表：type=1是fsck队列，type=2是rebalance队列</li>
<li>fsck_log表：fsck日志表，TYPE很多很诡异，参考<a href="http://www.wanghd.com/blog/2012/09/29/mogilefsde-fscktan-jiu/">fsk探究</a></li>
<li>file_to_replicate表：复制队列</li>
</ol>


<h4>问题总结</h4>

<ul>
<li>怀疑file_on表会有慢查询，其实不会太慢，因为Innodb默认asc排序</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#file_on的索引情况
</span><span class='line'>PRIMARY KEY (`fid`,`devid`),KEY `devid` (`devid`)
</span><span class='line'>#下面的语句是不会慢的
</span><span class='line'>select * from file_on where devid = ? and fid &gt; ? order by fid asc limit 100</span></code></pre></td></tr></table></div></figure>


<ul>
<li>怀疑多个replicate队列同时操作同一个fid时是否会出现bug，其实不会，因为replicate使用mysql的get_lock(fid),release_lock(fid)</li>
</ul>


<h3>Utilities</h3>

<ol>
<li>mogadm：该工具直接管理mogilefs的主机、设备、域、类、从数据库、配置、fsck、rebalance</li>
<li>mogstat：观察fsck,rebalance,replication,delete运行状况</li>
<li>mogfiledebug：查看文件存储信息，也可以查file_on表</li>
<li>mogfetch：导出指定的文件</li>
<li>mogdelete：删除指定的文件</li>
<li>mogrename：更改文件的key</li>
<li>mogupload：插入一个文件</li>
<li>moglistfids，moglistkeys：批量列出记录，自己写脚本时可以使用</li>
</ol>


<h3>Telnet</h3>

<ol>
<li>!version：显示mogilefs版本</li>
<li>!recent：显示当前query执行时间（可做监控）</li>
<li>!queue：显示等待执行的查询（可做监控）</li>
<li>!stats：从tracker启动开始就记录的一些累加信息和实时信息，比如处理请求的总数、job队列当前记录数、当前等待执行的请求的个数等</li>
<li>!watch：显示<code>警告</code>和<code>错误</code>信息（可做监控）</li>
<li>!jobs：显示当前各个job的个数</li>
<li>!want：<code>动态调整</code>job个数</li>
<li>!to：不常用，向子进程发送消息，用来调试的</li>
<li>!shutdown：关闭所有mogilefsd进程</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MogileFS的replicate进程分析]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/16/mogilefsde-replicatefen-xi/"/>
    <updated>2012-10-16T15:47:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/16/mogilefsde-replicatefen-xi</id>
    <content type="html"><![CDATA[<h4>基本流程</h4>

<ol>
<li>从replicate queue里获取需要处理数据,进行循环</li>
<li>执行真正的【replicate操作】，操作时会锁住这个fid，然后返回结果【下面会对该操作具体分析】</li>
<li>返回没问题，删除队列并释放锁</li>
<li>返回failed_getting_lock说明正在处理了</li>
<li>返回no_source说明file_on表上没有关于该文件的记录，nexttry设置为最大并释放锁</li>
<li>返回too_happy说明devcount > mindevcount，会尝试删除多余的并释放锁（前提是文件存在，所以不会修复file_on有，文件丢失的情况）</li>
<li>如果以上都不满足，nexttry根据规则增加，failcount递增并释放锁</li>
</ol>


<h4>replicate操作分析</h4>

<ul>
<li>简单说replicate操作就是取得合适的device进行复制，合适的意思是尽量避免同一个host的device，没办法才用同一个host的device，有错误就返回具体信息</li>
<li>replicate操作才是真正的复制，代码比较多，但是不难理解（难点都会有注释）</li>
</ul>


<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">replicate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$fid</span><span class="p">,</span> <span class="nv">%opts</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>      <span class="c1">#参数赋值</span>
</span><span class='line'>    <span class="nv">$fid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$fid</span><span class="p">)</span> <span class="k">unless</span> <span class="nb">ref</span> <span class="nv">$fid</span><span class="p">;</span>   <span class="c1">#实例fid对象</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fidid</span> <span class="o">=</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span> <span class="c1">#fid的id</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">debug</span><span class="p">(</span><span class="s">&quot;Replication for $fidid called, opts=&quot;</span><span class="o">.</span><span class="nb">join</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="nb">keys</span><span class="p">(</span><span class="nv">%opts</span><span class="p">)))</span> <span class="k">if</span> <span class="nv">$</span><span class="nn">Mgd::</span><span class="nv">DEBUG</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$errref</span>    <span class="o">=</span> <span class="nb">delete</span> <span class="nv">$opts</span><span class="p">{</span><span class="s">&#39;errref&#39;</span><span class="p">};</span>  <span class="c1">#错误消息的引用</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$no_unlock</span> <span class="o">=</span> <span class="nb">delete</span> <span class="nv">$opts</span><span class="p">{</span><span class="s">&#39;no_unlock&#39;</span><span class="p">};</span>  <span class="c1">#上锁,使用Mysql的锁,get_lock和release_lock</span>
</span><span class='line'>    <span class="c1">#复制源，复制到哪些设备，排除的设备，避免的设备</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fixed_source</span> <span class="o">=</span> <span class="nb">delete</span> <span class="nv">$opts</span><span class="p">{</span><span class="s">&#39;source_devid&#39;</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$mask_devids</span>  <span class="o">=</span> <span class="nb">delete</span> <span class="nv">$opts</span><span class="p">{</span><span class="s">&#39;mask_devids&#39;</span><span class="p">}</span>  <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$avoid_devids</span> <span class="o">=</span> <span class="nb">delete</span> <span class="nv">$opts</span><span class="p">{</span><span class="s">&#39;avoid_devids&#39;</span><span class="p">}</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$target_devids</span> <span class="o">=</span> <span class="nb">delete</span> <span class="nv">$opts</span><span class="p">{</span><span class="s">&#39;target_devids&#39;</span><span class="p">}</span> <span class="o">||</span> <span class="o">[]</span><span class="p">;</span> <span class="c1"># inverse of avoid_devids.</span>
</span><span class='line'>    <span class="nb">die</span> <span class="s">&quot;unknown_opts&quot;</span> <span class="k">if</span> <span class="nv">%opts</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">die</span> <span class="k">unless</span> <span class="nb">ref</span> <span class="nv">$mask_devids</span> <span class="ow">eq</span> <span class="s">&quot;HASH&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sdevid</span><span class="p">;</span> <span class="c1">#下面会看到，就是复制源</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sto</span> <span class="o">=</span> <span class="nn">Mgd::</span><span class="n">get_store</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">#释放锁的函数release_lock(name)</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$unlock</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">note_done_replicating</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#这是一个返回函数，返回结果用的</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$retunlock</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$errmsg</span><span class="p">,</span> <span class="nv">$errcode</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">@_</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">$errcode</span><span class="p">,</span> <span class="nv">$errmsg</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$errmsg</span> <span class="o">=</span> <span class="s">&quot;$errcode: $errmsg&quot;</span><span class="p">;</span> <span class="c1"># include code with message</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">$errmsg</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$$errref</span> <span class="o">=</span> <span class="nv">$errcode</span> <span class="k">if</span> <span class="nv">$errref</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$ret</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$errcode</span> <span class="o">&amp;&amp;</span> <span class="nv">$errcode</span> <span class="ow">eq</span> <span class="s">&quot;failed_getting_lock&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1"># don&#39;t emit a warning with error() on lock failure.  not</span>
</span><span class='line'>            <span class="c1"># a big deal, don&#39;t scare people.</span>
</span><span class='line'>            <span class="nv">$ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$ret</span> <span class="o">=</span> <span class="nv">$rv</span> <span class="p">?</span> <span class="nv">$rv</span> <span class="p">:</span> <span class="n">error</span><span class="p">(</span><span class="nv">$errmsg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$no_unlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">die</span> <span class="s">&quot;ERROR: must be called in list context w/ no_unlock&quot;</span> <span class="k">unless</span> <span class="nb">wantarray</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="nv">$ret</span><span class="p">,</span> <span class="nv">$unlock</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">die</span> <span class="s">&quot;ERROR: must not be called in list context w/o no_unlock&quot;</span> <span class="k">if</span> <span class="nb">wantarray</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$unlock</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$ret</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># hashref of devid -&gt; MogileFS::Device所有的device</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$devs</span> <span class="o">=</span> <span class="nn">Mgd::</span><span class="n">device_factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">map_by_id</span>
</span><span class='line'>        <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;No device map&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#错误话就调用retunlock </span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;failed_getting_lock&quot;</span><span class="p">,</span> <span class="s">&quot;Unable to obtain lock for fid $fidid&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">unless</span> <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">should_begin_replicating_fidid</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">);</span><span class="c1">#这里获取mysql的锁 get_lock(name,timeout),name里fidid</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if the fid doesn&#39;t even exist, consider our job done!  no point</span>
</span><span class='line'>    <span class="c1"># replicating file contents of a file no longer in the namespace.</span>
</span><span class='line'>    <span class="c1">#没有fid返回</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="s">&quot;nofid&quot;</span><span class="p">)</span> <span class="k">unless</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="nb">exists</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#Class.pm对象</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$cls</span> <span class="o">=</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">class</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">#策略对象MogileFS::ReplicationPolicy::MultipleHosts</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$polobj</span> <span class="o">=</span> <span class="nv">$cls</span><span class="o">-&gt;</span><span class="n">repl_policy_obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># learn what this devices file is already on</span>
</span><span class='line'>    <span class="c1">#所有设备</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@on_devs</span><span class="p">;</span>         <span class="c1"># all devices fid is on, reachable or not.</span>
</span><span class='line'>    <span class="c1">#排除dead和drain的设备</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@on_devs_tellpol</span><span class="p">;</span> <span class="c1"># subset of @on_devs, to tell the policy class about</span>
</span><span class='line'>    <span class="c1">#可读的设备</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@on_up_devid</span><span class="p">;</span>     <span class="c1"># subset of @on_devs:  just devs that are readable</span>
</span><span class='line'>    <span class="c1">#设置上面的数组</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$devid</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$d</span> <span class="o">=</span> <span class="nn">Mgd::</span><span class="n">device_factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_by_id</span><span class="p">(</span><span class="nv">$devid</span><span class="p">)</span>
</span><span class='line'>            <span class="ow">or</span> <span class="k">next</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#fid在哪些dev上</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@on_devs</span><span class="p">,</span> <span class="nv">$d</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#should_hava_files表示状态不为drain或者dead</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$d</span><span class="o">-&gt;</span><span class="n">dstate</span><span class="o">-&gt;</span><span class="n">should_have_files</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$mask_devids</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$devid</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">push</span> <span class="nv">@on_devs_tellpol</span><span class="p">,</span> <span class="nv">$d</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#有read权限</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$d</span><span class="o">-&gt;</span><span class="n">dstate</span><span class="o">-&gt;</span><span class="n">can_read_from</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">push</span> <span class="nv">@on_up_devid</span><span class="p">,</span> <span class="nv">$devid</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">#如果一个设备都没，就返回</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;no_source&quot;</span><span class="p">,</span>   <span class="s">&quot;Source is no longer available replicating $fidid&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="nv">@on_devs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;source_down&quot;</span><span class="p">,</span> <span class="s">&quot;No alive devices available replicating $fidid&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="nv">@on_up_devid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#fixed_source设置错误，根本就没有</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$fixed_source</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">==</span> <span class="nv">$fixed_source</span> <span class="p">}</span> <span class="nv">@on_up_devid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span><span class="p">(</span><span class="s">&quot;Fixed source dev$fixed_source requested for $fidid but not available. Trying other devices&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#错误的设备记录，下面循环里就不会再使用了</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%dest_failed</span><span class="p">;</span>    <span class="c1"># devid -&gt; 1 for each devid we were asked to copy to, but failed.</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%source_failed</span><span class="p">;</span>  <span class="c1"># devid -&gt; 1 for each devid we had problems reading from.</span>
</span><span class='line'>    <span class="c1">#用来标记真的复制了，下面的循环会使用</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$got_copy_request</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1"># true once replication policy asks us to move something somewhere</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$copy_err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#过滤复制到哪些设备</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dest_devs</span> <span class="o">=</span> <span class="nv">$devs</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">@$target_devids</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$dest_devs</span> <span class="o">=</span> <span class="p">{</span><span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">=&gt;</span> <span class="nv">$devs</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="p">}</span> <span class="nv">@$target_devids</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$rr</span><span class="p">;</span>  <span class="c1">#MogileFS::ReplicationRequest对象</span>
</span><span class='line'>    <span class="c1">#开始循环复制，因为会有可能要复制3份的嘛。</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">#MogileFS::ReplicationPolicy::MultipleHosts的replicate_to</span>
</span><span class='line'>        <span class="c1">#取得ReplicationRequest对象【该对象是通过ReplicationPolicy::MultipleHosts策略生成的】</span>
</span><span class='line'>        <span class="c1">#该对象会有4种返回值，分别是，1：对象形式，说明需要并可以复制。2：tmp_no_answer，没有可选择的device。</span>
</span><span class='line'>        <span class="c1">#3：all_good，一切OK。4：too_good，好过头了呀。</span>
</span><span class='line'>        <span class="nv">$rr</span> <span class="o">=</span> <span class="n">rr_upgrade</span><span class="p">(</span><span class="nv">$polobj</span><span class="o">-&gt;</span><span class="n">replicate_to</span><span class="p">(</span>
</span><span class='line'>                                               <span class="n">fid</span>       <span class="o">=&gt;</span> <span class="nv">$fidid</span><span class="p">,</span> <span class="c1">#fidid</span>
</span><span class='line'>                                               <span class="n">on_devs</span>   <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">@on_devs_tellpol</span><span class="p">,</span> <span class="c1"># all device objects fid is on, dead or otherwise</span>
</span><span class='line'>                                               <span class="n">all_devs</span>  <span class="o">=&gt;</span> <span class="nv">$dest_devs</span><span class="p">,</span> <span class="c1">#所有的dev，如果有target_devids的话那就用target的咯</span>
</span><span class='line'>                                               <span class="n">failed</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">%dest_failed</span><span class="p">,</span> <span class="c1">#失败信息</span>
</span><span class='line'>                                               <span class="n">min</span>       <span class="o">=&gt;</span> <span class="nv">$cls</span><span class="o">-&gt;</span><span class="n">mindevcount</span><span class="p">,</span> <span class="c1">#最小设备</span>
</span><span class='line'>                                               <span class="p">));</span>
</span><span class='line'>        <span class="c1">#是happy就跳出，跳出会有后续处理的</span>
</span><span class='line'>        <span class="k">last</span> <span class="k">if</span> <span class="nv">$rr</span><span class="o">-&gt;</span><span class="n">is_happy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#经过过滤的dev</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">@ddevs</span><span class="p">;</span>  <span class="c1"># dest devs, in order of preference</span>
</span><span class='line'>        <span class="c1">#选择出来的devid</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$ddevid</span><span class="p">;</span> <span class="c1"># dest devid we&#39;ve chosen to copy to</span>
</span><span class='line'>        <span class="c1">#这里设置ddevs,其实就是host不同的设备</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">@ddevs</span> <span class="o">=</span> <span class="nv">$rr</span><span class="o">-&gt;</span><span class="n">copy_to_one_of_ideally</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">#过滤掉不希望的</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">@not_masked_ids</span> <span class="o">=</span> <span class="p">(</span><span class="nb">grep</span> <span class="p">{</span> <span class="o">!</span> <span class="nv">$mask_devids</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                                             <span class="o">!</span> <span class="nv">$avoid_devids</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span>
</span><span class='line'>                                         <span class="p">}</span>
</span><span class='line'>                                      <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="n">id</span> <span class="p">}</span> <span class="nv">@ddevs</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$ddevid</span> <span class="o">=</span> <span class="nv">$not_masked_ids</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">#拿一个放到ddevid</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="s">&quot;would_worsen&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nv">@ddevs</span> <span class="o">=</span> <span class="nv">$rr</span><span class="o">-&gt;</span><span class="n">copy_to_one_of_desperate</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#没有不同的host，没办法同一个host也行啊</span>
</span><span class='line'>            <span class="c1"># TODO: reschedule a replication for &#39;n&#39; minutes in future, or</span>
</span><span class='line'>            <span class="c1"># when new hosts/devices become available or change state</span>
</span><span class='line'>            <span class="nv">$ddevid</span> <span class="o">=</span> <span class="nv">$ddevs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">#跳出了呀，</span>
</span><span class='line'>            <span class="k">last</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#标记一下真的复制了</span>
</span><span class='line'>        <span class="nv">$got_copy_request</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># replication policy shouldn&#39;t tell us to put a file on a device</span>
</span><span class='line'>        <span class="c1"># we&#39;ve already told it that we&#39;ve failed at.  so if we get that response,</span>
</span><span class='line'>        <span class="c1"># the policy plugin is broken and we should terminate now.</span>
</span><span class='line'>        <span class="c1">#不在错误数组里</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$dest_failed</span><span class="p">{</span><span class="nv">$ddevid</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;policy_error_doing_failed&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="s">&quot;replication policy told us to do something we already told it we failed at while replicating fid $fidid&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># replication policy shouldn&#39;t tell us to put a file on a</span>
</span><span class='line'>        <span class="c1"># device that it&#39;s already on.  that&#39;s just stupid.</span>
</span><span class='line'>        <span class="c1">#已经在这file_on上了么，不行的呀</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="nv">$ddevid</span> <span class="p">}</span> <span class="nv">@on_devs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;policy_error_already_there&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="s">&quot;replication policy told us to put fid $fidid on dev $ddevid, but it&#39;s already there!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># find where we&#39;re replicating from</span>
</span><span class='line'>        <span class="c1">#这里开始设置复制源</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1"># TODO: use an observed good device+host as source to start.</span>
</span><span class='line'>            <span class="c1">#排除掉错误源</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">@choices</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span> <span class="o">!</span> <span class="nv">$source_failed</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="p">}</span> <span class="nv">@on_up_devid</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;source_down&quot;</span><span class="p">,</span> <span class="s">&quot;No devices available replicating $fidid&quot;</span><span class="p">)</span> <span class="k">unless</span> <span class="nv">@choices</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">#如果有fixed_source那就用，没有么就随即选一个吧</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$fixed_source</span> <span class="o">&amp;&amp;</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">==</span> <span class="nv">$fixed_source</span> <span class="p">}</span> <span class="nv">@choices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$sdevid</span> <span class="o">=</span> <span class="nv">$fixed_source</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">@choices</span> <span class="o">=</span> <span class="nn">List::Util::</span><span class="n">shuffle</span><span class="p">(</span><span class="nv">@choices</span><span class="p">);</span>
</span><span class='line'>                <span class="nn">MogileFS::</span><span class="n">run_global_hook</span><span class="p">(</span><span class="s">&#39;replicate_order_final_choices&#39;</span><span class="p">,</span> <span class="nv">$devs</span><span class="p">,</span> <span class="o">\</span><span class="nv">@choices</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$sdevid</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@choices</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#是子进程的判断</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$worker</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">is_child</span> <span class="ow">or</span> <span class="nb">die</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#校验和，不用的呀，不考虑</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$digest</span> <span class="o">=</span> <span class="n">Digest</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$cls</span><span class="o">-&gt;</span><span class="n">hashname</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$cls</span><span class="o">-&gt;</span><span class="n">hashtype</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#真的复制了</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="n">http_copy</span><span class="p">(</span>
</span><span class='line'>                           <span class="n">sdevid</span>       <span class="o">=&gt;</span> <span class="nv">$sdevid</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">ddevid</span>       <span class="o">=&gt;</span> <span class="nv">$ddevid</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">fid</span>          <span class="o">=&gt;</span> <span class="nv">$fidid</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">rfid</span>         <span class="o">=&gt;</span> <span class="nv">$fid</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">expected_len</span> <span class="o">=&gt;</span> <span class="nb">undef</span><span class="p">,</span>  <span class="c1"># FIXME: get this info to pass along</span>
</span><span class='line'>                           <span class="n">errref</span>       <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$copy_err</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">callback</span>     <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nv">$worker</span><span class="o">-&gt;</span><span class="n">still_alive</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>                           <span class="n">digest</span>       <span class="o">=&gt;</span> <span class="nv">$digest</span><span class="p">,</span>
</span><span class='line'>                           <span class="p">);</span>
</span><span class='line'>        <span class="nb">die</span> <span class="s">&quot;Bogus error code: $copy_err&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="nv">$rv</span> <span class="o">&amp;&amp;</span> <span class="nv">$copy_err</span> <span class="o">!~</span> <span class="sr">/^(?:src|dest)_error$/</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#如果错误了，设置失败数组，next等于其他语言的continue呀，继续找其他的</span>
</span><span class='line'>        <span class="k">unless</span> <span class="p">(</span><span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">error</span><span class="p">(</span><span class="s">&quot;Failed copying fid $fidid from devid $sdevid to devid $ddevid (error type: $copy_err)&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$copy_err</span> <span class="ow">eq</span> <span class="s">&quot;src_error&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$source_failed</span><span class="p">{</span><span class="nv">$sdevid</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nv">$fixed_source</span> <span class="o">&amp;&amp;</span> <span class="nv">$fixed_source</span> <span class="o">==</span> <span class="nv">$sdevid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">error</span><span class="p">(</span><span class="s">&quot;Fixed source dev$fixed_source was requested for $fidid but failed: will try other sources&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$dest_failed</span><span class="p">{</span><span class="nv">$ddevid</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#复制成功了，开始插入数据了</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$dfid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">DevFID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$ddevid</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">add_to_db</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$digest</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">checksum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">set_checksum</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">,</span> <span class="nv">$cls</span><span class="o">-&gt;</span><span class="n">hashtype</span><span class="p">,</span> <span class="nv">$digest</span><span class="o">-&gt;</span><span class="n">digest</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#设置一下变量，加入要复制3分是应该再继续复制的</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@on_devs</span><span class="p">,</span> <span class="nv">$devs</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$ddevid</span><span class="p">};</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@on_devs_tellpol</span><span class="p">,</span> <span class="nv">$devs</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$ddevid</span><span class="p">};</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@on_up_devid</span><span class="p">,</span> <span class="nv">$ddevid</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># We are over replicated. Let caller decide if it should rebalance.</span>
</span><span class='line'>    <span class="c1">#好过头了</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$rr</span><span class="o">-&gt;</span><span class="n">too_happy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;too_happy&quot;</span><span class="p">,</span> <span class="s">&quot;fid $fidid is on too many devices&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">#这是满足策略的情况</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$rr</span><span class="o">-&gt;</span><span class="n">is_happy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$got_copy_request</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#没有地方去复制了</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="s">&quot;lost_race&quot;</span><span class="p">);</span>  <span class="c1"># some other process got to it first.  policy was happy immediately.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">#应该不会走到这里了</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$retunlock</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;policy_no_suggestions&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s">&quot;replication policy ran out of suggestions for us replicating fid $fidid&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[硬盘安装CentOS]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/14/ying-pan-an-zhuang-centos/"/>
    <updated>2012-10-14T21:48:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/14/ying-pan-an-zhuang-centos</id>
    <content type="html"><![CDATA[<h4>下载diskgenuis进行分区和设置卷标</h4>

<ul>
<li>【C盘】，NTFS；安装的是win7</li>
<li>【D盘】，卷标：REV，FAT32；</li>
</ul>


<h4>下载CentOS-6.2-i386-LiveCD.iso</h4>

<ul>
<li>把isolinux下的vmlinuz0和initrd0.img提取到C盘根目录下</li>
<li>把centos 6.2 livecd解压到D盘根目录下;</li>
</ul>


<h4>下载EasyBCD进行boot设置</h4>

<ul>
<li>使用easybcd安装NeoGrub，配置menu.lst，内容如下：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title CentOS LiveCD
</span><span class='line'>#如果前面还有分区设置为root (hd0,1)，设置错误了也没关系，重启后会报错，按e调整，再按b去boot
</span><span class='line'>root (hd0,0) 
</span><span class='line'>kernel /vmlinuz0 root=live:LABEL=REV rootfstype=auto ro liveimg quiet rhgb 
</span><span class='line'>initrd /initrd0.img
</span><span class='line'>boot</span></code></pre></td></tr></table></div></figure>


<h4>重启后，选择新选项即可进入CentOS LiveCD环境。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRC:irssi使用教程]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/13/irc-irssishi-yong-jiao-cheng/"/>
    <updated>2012-10-13T23:39:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/13/irc-irssishi-yong-jiao-cheng</id>
    <content type="html"><![CDATA[<h3>IRC是什么？</h3>

<ul>
<li>IRC（Internet Relay Chat的缩写，“因特网中继聊天”）是一种通过网络的即时聊天方式。其主要用于群体聊天，但同样也可以用于个人对个人的聊天。</li>
</ul>


<!-- more -->


<h3>安装irssi</h3>

<ul>
<li>命令行的聊天客户端满酷，就选择了irssi</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install irssi
</span></code></pre></td></tr></table></div></figure>


<h3>连接服务器</h3>

<ul>
<li>运行irssi</li>
<li>连接irc.freenode.net</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irssi
</span><span class='line'>/connect irc.freenode.net
</span></code></pre></td></tr></table></div></figure>


<h3>注册一个自己用户名</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/nick wanghuida
</span><span class='line'>/msg nickserv <span class="nb">help</span> <span class="c">#会打开一个频道，Ctrl+N/P切换看一下命令,参数错误会有提示</span>
</span><span class='line'>/msg nickserv register 123456 wanghuida258@126.com
</span><span class='line'>/msg NickServ VERIFY REGISTER wanghuida xgticwehprrf <span class="c">#这条命令是从邮箱里获取的</span>
</span><span class='line'>/msg nickserv identify 123456 <span class="c">#用于登陆识别 </span>
</span></code></pre></td></tr></table></div></figure>


<h3>进入聊天室</h3>

<ul>
<li>可以开始欢快的聊天了</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/join <span class="c">#mogilefs</span>
</span><span class='line'>/join <span class="c">#gentoo-cn</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置自动登陆</h3>

<ul>
<li>也可以不通过命令行来自动登陆</li>
<li>irssi的默认配置在~/.irssi/config里</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">irssi_williamwang</span><span class="o">=</span><span class="s1">&#39;irssi --connect=irc.freenode.net --nick=williamwang --password=xxxxxx&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他命令</h3>

<ul>
<li>/wc 或者 /leave ,离开当前频道</li>
<li>/disconnect &lt;服务器>，断开一个服务器</li>
<li>/quit 或者 /exit，退出 irssi，结束IRC会话。</li>
<li>/msg &lt;昵称> &lt;消息>，向某人发私消息（新开窗口）</li>
<li>/query &lt;昵称> &lt;消息>，向某人发私消息（新开窗口且转换到这个窗口）</li>
<li>/say &lt;昵称> &lt;消息>，向某人说话（不新开窗口）</li>
<li>/notice &lt;昵称> &lt;消息>，向指定人发出注意消息</li>
<li>/me &lt;动作>，在当前聊天室窗口中做出动作。 如做出晕倒动作：/me 晕倒</li>
<li>/away &lt;原因>，留下信息说明暂时离开，别人向你发出私聊时将会返回此消息，再重新输入 /away（不指定参数）则解除离开状态。</li>
<li>/ignore &lt;昵称>，忽略某人的聊天内容</li>
<li>/set autolog on，自动保存聊天记录</li>
<li>/msg ChanServ info #mogilefs ，查看聊天室信息，用来确认聊天室是否存在</li>
<li>/msg chanserv help ，创建频道之类的操作可以参考下帮助</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mogstored使用nginx]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/13/mogstoredshi-yong-nginx/"/>
    <updated>2012-10-13T11:37:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/13/mogstoredshi-yong-nginx</id>
    <content type="html"><![CDATA[<h3>配置nginx.conf</h3>

<ul>
<li>使用mogile用户，如果使用root会导致delete job无法删除(因为新文件是root的呀)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user mogile daemon</span></code></pre></td></tr></table></div></figure>


<ul>
<li>autoindex on: 必须要加，否则mogadm check显示错误，因为返回错误状态码</li>
<li>expires max: 过期头设置到2037年, and the Cache-Control max-age to 10 years.</li>
<li>client_max_body_size 20m: 放宽上传大小</li>
<li><p>client_body_temp_path xxxx: 存放零时文件的目录</p></li>
<li><p>配置WebDav,首先要确认HttpDavModule已经被加载，默认是不加载的 ./configure &#8211;with-http_dav_module</p></li>
<li>dav_methods PUT DELETE MKCOL; 允许的方法put是上传，delete是删除,mkcol是创建文件夹</li>
<li>dav_access user:rw group:r all:r; 设置权限</li>
<li>create_full_put_path on; put新文件默认只能在已存在的目录，不过这条指令允许创建所有的中间目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server 
</span><span class='line'>{
</span><span class='line'>    listen 7500;
</span><span class='line'>    error_log /var/log/nginx/mogstore.error.log crit;
</span><span class='line'>    access_log /var/log/nginx/mogstore.access.log gzip;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        autoindex   on;
</span><span class='line'>        root        /huida/mogdata;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location /dev1/ {
</span><span class='line'>        expires             max;
</span><span class='line'>        root                /huida/mogdata;
</span><span class='line'>        client_max_body_size        20m;
</span><span class='line'>        client_body_temp_path       /huida/mogdata/dev1/temp;
</span><span class='line'>        dav_methods                 PUT DELETE MKCOL;
</span><span class='line'>        create_full_put_path        on;
</span><span class='line'>        dav_access                  user:rw group:r all:r;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>配置mogstored.conf</h3>

<ul>
<li>已经不需要perlbal了</li>
<li>虽然是不用server了，不过mogstored还是要启动，因为还有个磁盘监控7501端口</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#httplisten = 0.0.0.0:7500
</span><span class='line'>server = none</span></code></pre></td></tr></table></div></figure>


<h3>结论</h3>

<ul>
<li>nginx比perlbal更稳定，基本不会挂掉了</li>
<li>mogadm device add 时不要忘记配置nginx后重启，也别忘记自己建文件夹【nginx多一步】</li>
<li>nginx配置好user,所以不会创建的文件权限为root:root,不用nginx就要用su mogile -c mogstored了</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mogilefs文件路径规则]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/11/mogilefswen-jian-lu-jing-gui-ze/"/>
    <updated>2012-10-11T16:16:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/11/mogilefswen-jian-lu-jing-gui-ze</id>
    <content type="html"><![CDATA[<h3>同事问我mogilefs文件路径的规律是什么</h3>

<ul>
<li>以前有看到过，但是没有记录，一下子就被问悶了，突然发现就记录一下</li>
<li>当fid长度不足10时，前置补0到长度为10,假设补好后的结果为0258693147</li>
<li>通过正则把path切割成0/258/693/147这样</li>
<li>最后的路径结果是：/设备/0/258/693/147/0258693147.fid</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">uri_path</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$devid</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">devid</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fidid</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fidid</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$nfid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nb">length</span> <span class="nv">$fidid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$len</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$nfid</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="n">x</span> <span class="p">(</span><span class="mi">10</span> <span class="o">-</span> <span class="nv">$len</span><span class="p">)</span> <span class="o">.</span> <span class="nv">$fidid</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$nfid</span> <span class="o">=</span> <span class="nv">$fidid</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$mmm</span><span class="p">,</span> <span class="nv">$ttt</span><span class="p">,</span> <span class="nv">$hto</span> <span class="p">)</span> <span class="o">=</span> <span class="p">(</span> <span class="nv">$nfid</span> <span class="o">=~</span> <span class="sr">m{(\d)(\d{3}</span><span class="p">)(</span><span class="o">\</span><span class="n">d</span><span class="p">{</span><span class="mi">3</span><span class="p">})(</span><span class="o">\</span><span class="n">d</span><span class="p">{</span><span class="mi">3</span><span class="p">})}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;/dev$devid/$b/$mmm/$ttt/$nfid.fid&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结一下</h3>

<ul>
<li>这个算法效率很高，并且可以把文件平均分配到目录下</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mogilefs设备权重算法]]></title>
    <link href="http://www.wanghd.com/blog/2012/10/09/mogilefsshe-bei-quan-zhong-suan-fa/"/>
    <updated>2012-10-09T11:07:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/10/09/mogilefsshe-bei-quan-zhong-suan-fa</id>
    <content type="html"><![CDATA[<h3>遇到的问题</h3>

<ul>
<li>有几块设备已经剩余10%容量，有几块设备剩余75%容量，为什么75%的util相当高呢</li>
<li>原本理解mogilefs平均分配新文件到设备上，猜想应该是不对的</li>
</ul>


<h3>看看mogilefs到底是怎么做的呢</h3>

<ul>
<li>处理文件是Query.pl干的，确认新建文件是cmd_create_open函数所为</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">cmd_create_open</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">#略</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#默认情况下设备的选择是从这开始的，参数是所有设备</span>
</span><span class='line'>    <span class="nv">@devices</span> <span class="o">=</span> <span class="n">sort_devs_by_freespace</span><span class="p">(</span><span class="nn">Mgd::</span><span class="n">device_factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_all</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#略</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sort_devs_by_freespace用剩余百分比做为权重，生成一个二维数组做参数[前20个]</li>
<li>真正的返回值是通过MogileFS::Util::weighted_list进行权重计算</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">sort_devs_by_freespace</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@devices_with_weights</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="c1">#生成二维数组，剩余大小用来做权重</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">$_</span><span class="p">,</span> <span class="mi">100</span> <span class="o">*</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="n">percent_free</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span> <span class="nb">sort</span> <span class="p">{</span>  <span class="c1">#排序，从大到小排序</span>
</span><span class='line'>        <span class="nv">$b</span><span class="o">-&gt;</span><span class="n">percent_free</span> <span class="sr">&lt;=&gt;</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="n">percent_free</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="nb">grep</span> <span class="p">{</span>  <span class="c1">#过滤设备，只要可以新建文件的，就是状态为alive的</span>
</span><span class='line'>        <span class="nv">$_</span><span class="o">-&gt;</span><span class="n">should_get_new_files</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@list</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">MogileFS::Util::</span><span class="n">weighted_list</span><span class="p">(</span><span class="nb">splice</span><span class="p">(</span><span class="nv">@devices_with_weights</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">@list</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里才是算法的核心，让容量多的多放点文件，但当容量很大时基本随即，做个例子会比较直观</li>
<li>假设有两个设备，剩余的容量分别是10和75</li>
<li>那么sum就是85，如果乘以随机数的话可能是8.5(0.1)或者是76.5(0.9)</li>
<li>如果是8.5，那么75就大于8.5了，先返回了【并且这种概率大】</li>
<li>如果是76.5，那么75就不大于76.5了, 则返回另一个【这种概率小】</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">weighted_list</span> <span class="p">(@)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@list</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span> <span class="nv">@_</span><span class="p">;</span> <span class="c1">#排除掉等于0的 </span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@ret</span><span class="p">;</span> <span class="c1">#初始化返回数组</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sum</span> <span class="o">+=</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">foreach</span> <span class="nv">@list</span><span class="p">;</span> <span class="c1">#累加剩余容量</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$getone</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@list</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">@list</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">#只有一个了，直接返回</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$val</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">()</span> <span class="o">*</span> <span class="nv">$sum</span><span class="p">;</span> <span class="c1">#总容量乘以0到1的随机数</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$curval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$idx</span> <span class="o">&lt;</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">@list</span><span class="p">);</span> <span class="nv">$idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$item</span> <span class="o">=</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$idx</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$curval</span> <span class="o">+=</span> <span class="nv">$item</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">#累加进去,保证肯定有返回</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$curval</span> <span class="o">&gt;=</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#如果curval比随机乘积大</span>
</span><span class='line'>                <span class="k">my</span> <span class="p">(</span><span class="nv">$ret</span><span class="p">)</span> <span class="o">=</span> <span class="nb">splice</span><span class="p">(</span><span class="nv">@list</span><span class="p">,</span> <span class="nv">$idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">#切割出来</span>
</span><span class='line'>                <span class="nv">$sum</span> <span class="o">-=</span> <span class="nv">$item</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">#从总容量里减去</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>   <span class="c1">#返回这个设备</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@ret</span><span class="p">,</span> <span class="nv">$getone</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">while</span> <span class="nv">@list</span><span class="p">;</span> <span class="c1">#循环执行getone，加到返回数组</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">@ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mogilefs fsck探究]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/29/mogilefsde-fscktan-jiu/"/>
    <updated>2012-09-29T15:13:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/29/mogilefsde-fscktan-jiu</id>
    <content type="html"><![CDATA[<h3>fsck的作用</h3>

<ul>
<li>检查mogilefs文件的健康程度，检查的维度有devcount,file_on表,文件长度，校验和（可选）</li>
<li>如果文件丢失，通过路径尝试全设备扫描去查找该文件【只是通过路径去找】</li>
</ul>


<h3>使用fsck时，碰到的问题:队列保持不变，无法处理后续的文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//启动fsck
</span><span class='line'>mogadm fsck start  
</span><span class='line'>//查看fsck状态，问题出现：进度不变,无法进一步检查文件
</span><span class='line'>mogadm fsck status 
</span><span class='line'>//查看数据库里的队列，发现队列一直保持，没有被处理
</span><span class='line'>select count(*) from file_to_queue where type=1 （type=1代表fsck队列，type=2代表rebalance队列）;</span></code></pre></td></tr></table></div></figure>


<h3>结论（先给出结论，后面有具体的分析流程）</h3>

<ul>
<li>随意取得队列中的某一条记录的devcount等于3，过去操作造成的</li>
<li>mindevcount却等于2，这会让fsck进行修复</li>
<li>在修复时，发现3个设备中有一个设备是不可达的，状态也不是dead，返回无法处理，fsck不会把该记录从队列中删除，因为他期望你尽快修复该设备或者设置为dead</li>
<li>解决方法有3个，第一种就是恢复或dead该设备【推荐】，第二种比较山寨,改代码删队列，第三种直接修改数据库,风险较大</li>
</ul>


<h3>mogadm fsck status详情</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   Running: 运行状态 
</span><span class='line'>    Status: 完成度
</span><span class='line'>      Time: 执行时间
</span><span class='line'>Check Type: 检查的策略【可以通过fsck_opt_policy_only修改】
</span><span class='line'>
</span><span class='line'>NOPA: file_on表里一个都没
</span><span class='line'>POVI: 违反策略
</span><span class='line'>MISS: 在某个设备上没有找到文件
</span><span class='line'>BLEN: file表里的length和磁盘上的文件大小不匹配
</span><span class='line'>GONE: 无法修复了
</span><span class='line'>SRCH: 开始全设备扫描
</span><span class='line'>FOND: 全设备扫描后找了该文件
</span><span class='line'>REPL: 加入复制队列，复制一份文件
</span><span class='line'>BCNT: file表里的devcount不正确</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>MogileFS::Worker::Fsck的work方法分析</h3>

<ul>
<li>因为之前有分析过MogileFS启动源码，所以知道fsck子进程启动就调用MogileFS::Worker::Fsck里的work方法</li>
<li>里面循环调用了最关键的check_fid方法来检查fid对象，返回的结果是已经处理（HANDLED）和没办法处理（STALLED）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">work</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span> <span class="c1">#perl面向对象获取自己的引用</span>
</span><span class='line'>    <span class="nn">POSIX::</span><span class="n">nice</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>  <span class="c1">#调整进程的优先级</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sto</span>         <span class="o">=</span> <span class="nn">Mgd::</span><span class="n">get_store</span><span class="p">();</span> <span class="c1">#获取操作数据库的对象</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#2秒调用一次这个匿名方法</span>
</span><span class='line'>    <span class="n">every</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$sleep_set</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span> <span class="c1">#一个调整sleep时间的函数，下面可以看到设置为0不去调整，就用2秒</span>
</span><span class='line'>        <span class="nv">$nowish</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>      <span class="c1">#当前时间</span>
</span><span class='line'>        <span class="nb">local</span> <span class="nv">$</span><span class="nn">Mgd::</span><span class="nv">nowish</span> <span class="o">=</span> <span class="nv">$nowish</span><span class="p">;</span> <span class="c1">#零时变量</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$queue_todo</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">queue_todo</span><span class="p">(</span><span class="s">&#39;fsck&#39;</span><span class="p">);</span>    <span class="c1">#获取fsck队列里的数据</span>
</span><span class='line'>        <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">send_to_parent</span><span class="p">(</span><span class="s">&#39;worker_bored 50 fsck&#39;</span><span class="p">);</span> <span class="c1">#告诉父进程，我还活着</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">unless</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$queue_todo</span><span class="p">};</span>                  <span class="c1">#没有需要需要处理就返回</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">unless</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">validate_dbh</span><span class="p">;</span>             <span class="c1">#验证db，无法连接就退出</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">@fids</span> <span class="o">=</span> <span class="p">();</span>  <span class="c1">#fids数组，用来存放文件的id,也是数据库里文件的唯一标识 </span>
</span><span class='line'>        <span class="c1">#遍历队列的数据，$todo就是数据库里的信息 type=1</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$todo</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$queue_todo</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">#new 一个fid对象，只是new，还没有读取fid信息</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$fid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$todo</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fid</span><span class="p">});</span>
</span><span class='line'>            <span class="c1">#这里才是通过查file表，判断他是不是存在</span>
</span><span class='line'>            <span class="k">unless</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="nb">exists</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">#从file_to_queue表里删除</span>
</span><span class='line'>                <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">delete_fid_from_file_to_queue</span><span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="n">FSCK_QUEUE</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nb">push</span><span class="p">(</span><span class="nv">@fids</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">);</span> <span class="c1">#如果有，那就把fid对象放到数组里</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">unless</span> <span class="nv">@fids</span><span class="p">;</span>   <span class="c1">#如果没有需要处理的就返回了 </span>
</span><span class='line'>        <span class="c1">#从setting表里读取fsck_opt_policy_only配置</span>
</span><span class='line'>        <span class="c1">#1代表只检查数据库信息，0代表检查数据信息和文件长度</span>
</span><span class='line'>        <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_nostat</span><span class="p">}</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">Config</span><span class="o">-&gt;</span><span class="n">server_setting</span><span class="p">(</span><span class="s">&#39;fsck_opt_policy_only&#39;</span><span class="p">)</span>     <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">#从setting表里读取fsck_checksum配置,代表是否需要检查校验和,可选值为md5,sha-1,off</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$alg</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">Config</span><span class="o">-&gt;</span><span class="n">server_setting_cached</span><span class="p">(</span><span class="s">&quot;fsck_checksum&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$alg</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$alg</span> <span class="ow">eq</span> <span class="s">&quot;off&quot;</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">#如果没有定义或为off</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_checksum</span><span class="p">}</span> <span class="o">=</span> <span class="s">&quot;off&quot;</span><span class="p">;</span>      <span class="c1">#那就设置成off,不检查</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">#验证一下是否为md5 或 sha-1,如果不是那就设置为0</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_checksum</span><span class="p">}</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">Checksum</span><span class="o">-&gt;</span><span class="n">valid_alg</span><span class="p">(</span><span class="nv">$alg</span><span class="p">)</span> <span class="p">?</span> <span class="nv">$alg</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="n">mass_load_devids</span><span class="p">(</span><span class="nv">@fids</span><span class="p">);</span> <span class="c1">#通过file_on表获取每个fid存放在哪些device上</span>
</span><span class='line'>        <span class="nv">$sleep_set</span><span class="o">-&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">#微调sleep时间，写死为0，可能是调试用的</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$fid</span> <span class="p">(</span><span class="nv">@fids</span><span class="p">)</span> <span class="p">{</span>               <span class="c1">#循环每一个fid对象</span>
</span><span class='line'>            <span class="c1">#这里是关键是亮点，是接下去分析的入口</span>
</span><span class='line'>            <span class="c1">#返回的结果是已经处理（HANDLED）和没办法处理（STALLED）</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="n">check_fid</span><span class="p">(</span><span class="nv">$fid</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">#如果运行到了这里，说明跟磁盘有连通性的问题</span>
</span><span class='line'>                <span class="c1">#最重要的是不会删除队列，放在里面以后再尝试</span>
</span><span class='line'>                <span class="c1">#其实队列的卡住的问题就出在这里,接下去进入check_fid看看</span>
</span><span class='line'>                <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">still_alive</span><span class="p">;</span>
</span><span class='line'>                <span class="k">next</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">#已经处理了，就可以删除队列里的数据了</span>
</span><span class='line'>            <span class="nv">$sto</span><span class="o">-&gt;</span><span class="n">delete_fid_from_file_to_queue</span><span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="n">FSCK_QUEUE</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>MogileFS::Worker::Fsck的check_fid方法分析</h3>

<ul>
<li>传入的参数是$fid是MogileFS::FID对象</li>
<li>返回0表示磁盘不可达（STALLED）</li>
<li>返回1代表fid对象已经被处理，不管这个fid是不是有问题，没问题就不处理，有问题就记录日志并修复</li>
<li>真正去修复一个fid对象的函数是fix_fid,接下去会分析</li>
<li>问题渐渐浮出水面，坏掉的设备没有被dead，或者直接删除掉设备有可能会让队列卡住</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#下面是返回值，被定义成常量</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">STALLED</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">HANDLED</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">sub </span><span class="nf">check_fid</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>      <span class="c1">#设置对象自己和fid对象</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fix</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>             <span class="c1">#定义一个修复的数据的函数,只是定义，真正的调用在下面逻辑</span>
</span><span class='line'>        <span class="c1">#fix_fid是最重要的函数用来修复fid对象，也是接下去需要分析的入口</span>
</span><span class='line'>        <span class="c1">#这里使用了eval{}，这样可以捕获错误</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$fixed</span> <span class="o">=</span> <span class="nb">eval</span> <span class="p">{</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">fix_fid</span><span class="p">(</span><span class="nv">$fid</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">defined</span> <span class="nv">$fixed</span><span class="p">)</span> <span class="p">{</span>                     <span class="c1">#如果产生了错误</span>
</span><span class='line'>            <span class="c1">#输出异常日志，我们的问题就会运行到这里输出这样的信息</span>
</span><span class='line'>            <span class="n">error</span><span class="p">(</span><span class="s">&quot;Fsck stalled for fid $fid: $@&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">#返回一个不会去删除队列的结果，造成队列积满</span>
</span><span class='line'>            <span class="c1">#所以直接去fix_fid里查看错误的判断就可以知道为什么了</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">STALLED</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_CANT_FIX</span><span class="p">)</span> <span class="k">if</span> <span class="o">!</span> <span class="nv">$fixed</span><span class="p">;</span>  <span class="c1">#记录日志，不可以修复,GONE</span>
</span><span class='line'>        <span class="nv">$nowish</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">still_alive</span><span class="p">;</span>             <span class="c1">#更新时间</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HANDLED</span><span class="p">;</span>                           <span class="c1">#返回已经处理</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids</span><span class="p">)</span> <span class="p">{</span>         <span class="c1">#一个设备上都没有的话</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_NO_PATHS</span><span class="p">);</span><span class="c1">#记录日志path都没 NOPA</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">();</span>            <span class="c1">#搜索所有设备作为最后的努力来定位它</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">#查找数据库file_on数量，要满足mindevcount，如果超过也属于不满足（神奇的too happy）</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids_meet_policy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_POLICY_VIOLATION</span><span class="p">);</span><span class="c1">#记录日志违反策略 POVI</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">();</span>                    <span class="c1">#尝试修复</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#如果不skip_devcount，同时file_on和file里的devcount对不起来</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nn">MogileFS::</span><span class="n">Config</span><span class="o">-&gt;</span><span class="n">server_setting_cached</span><span class="p">(</span><span class="s">&#39;skip_devcount&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids</span><span class="p">)</span> <span class="o">==</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devcount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_BAD_COUNT</span><span class="p">);</span> <span class="c1">#记录日志file表里devcount不正确</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">();</span>              <span class="c1">#尝试修复，其实是调用$fid-&gt;update_devcount();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#我们不使用，其实他是判断checksum表里是否有记录</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">class</span><span class="o">-&gt;</span><span class="n">hashtype</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">checksum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">();</span>        <span class="c1">#尝试修复</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#如果配置了fsck_opt_policy_only那就到此结束了,不会去判断文件长度和校验和了</span>
</span><span class='line'>    <span class="c1">#如果策略是这样，事故后的fsck就有意义了</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HANDLED</span> <span class="k">if</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_nostat</span><span class="p">};</span>
</span><span class='line'>    <span class="c1">#如果配置检查校验和,默认不使用</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_checksum</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_checksum</span><span class="p">}</span> <span class="ow">ne</span> <span class="s">&quot;off&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">();</span> <span class="c1">#尝试修复</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$err</span><span class="p">;</span> <span class="c1">#记录错误的变量</span>
</span><span class='line'>    <span class="c1">#parallel_check_sizes会取得磁盘上文件的大小</span>
</span><span class='line'>    <span class="c1">#匿名的对比函数,第一个参数是设备,第二参数就是磁盘上文件的大小</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">parallel_check_sizes</span><span class="p">([</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devfids</span> <span class="p">],</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$dfid</span><span class="p">,</span> <span class="nv">$disk_size</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>            <span class="c1">#devfid对象，和磁盘上文件的大小</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">defined</span> <span class="nv">$disk_size</span><span class="p">)</span> <span class="p">{</span>             <span class="c1">#如果拿不到磁盘上文件的大小</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$dev</span>  <span class="o">=</span> <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">device</span><span class="p">;</span>           <span class="c1">#设备对象</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">dstate</span><span class="o">-&gt;</span><span class="n">is_perm_dead</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">#如果磁盘的状态是dead</span>
</span><span class='line'>                <span class="nv">$err</span> <span class="o">=</span> <span class="s">&quot;needfix&quot;</span><span class="p">;</span>               <span class="c1">#记录错误为需要修复</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>                       <span class="c1">#返回0</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">#输出连通性问题的日志</span>
</span><span class='line'>            <span class="n">error</span><span class="p">(</span><span class="s">&quot;Connectivity problem reaching device &quot;</span> <span class="o">.</span> <span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">.</span> <span class="s">&quot; on host &quot;</span> <span class="o">.</span> <span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">host</span><span class="o">-&gt;</span><span class="n">ip</span> <span class="o">.</span> <span class="s">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$err</span> <span class="o">=</span> <span class="s">&quot;stalled&quot;</span><span class="p">;</span>                   <span class="c1">#记录错误为无法处理</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>                           <span class="c1">#返回0</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="nv">$disk_size</span> <span class="o">==</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="nb">length</span><span class="p">;</span> <span class="c1">#file表里的length和磁盘上的大小一样,直接返回1</span>
</span><span class='line'>        <span class="nv">$err</span> <span class="o">=</span> <span class="s">&quot;needfix&quot;</span><span class="p">;</span>                       <span class="c1">#下面就是大小不一样了，记录错误为需要修复</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>                               <span class="c1">#返回0</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">class</span><span class="o">-&gt;</span><span class="n">hashtype</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_checksum</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">opt_checksum</span><span class="p">}</span> <span class="ow">eq</span> <span class="s">&quot;off&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">?</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">()</span> <span class="p">:</span> <span class="n">HANDLED</span><span class="p">;</span>               <span class="c1">#不扯校验和了，直接返回已处理</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nv">$err</span> <span class="ow">eq</span> <span class="s">&quot;stalled&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">#返回无法处理，也会造成队列堆积，因为file_on表里的device没有设置为dead</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">STALLED</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nv">$err</span> <span class="ow">eq</span> <span class="s">&quot;needfix&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">#进行修复</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$fix</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">#这里应该不会执行到</span>
</span><span class='line'>        <span class="nb">die</span> <span class="s">&quot;Unknown error checking fid sizes in parallel.\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>MogileFS::Worker::Fsck的fix_fid方法分析</h3>

<ul>
<li>该方法有可能会比较慢，因为file_on表上一条记录都没会尝试查找所有设备，【通过path】</li>
<li>die是由于设备连接性问题造成的，会引起队列堵死</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">CANT_FIX</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">#不可以被修复</span>
</span><span class='line'><span class="k">sub </span><span class="nf">fix_fid</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>                     <span class="c1">#对象自己，fid对象</span>
</span><span class='line'>    <span class="n">debug</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;Fixing FID %d&quot;</span><span class="p">,</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">));</span> <span class="c1">#调试信息，正在修复哪个fid</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#通过file_on更新一下file表里的devcount; </span>
</span><span class='line'>    <span class="c1">#这里学习了下mysql的get_lock</span>
</span><span class='line'>    <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">update_devcount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#遍历devids属性生成多个devfid对象放到数组,其实就是file_on表</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@dfids</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nn">MogileFS::</span><span class="n">DevFID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$_</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">)</span> <span class="p">}</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@good_devs</span><span class="p">;</span>        <span class="c1">#初始化好的设备</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@bad_devs</span><span class="p">;</span>         <span class="c1">#初始化坏的设备数组</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%already_checked</span><span class="p">;</span>  <span class="c1">#初始化已经检查过的设备hash</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$check_dfids</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span> <span class="c1">#定义一个监测函数</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$is_desperate_mode</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span> <span class="c1">#是否全设备扫描</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$dfid</span> <span class="p">(</span><span class="nv">@dfids</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#遍历fid的devfid对象</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$dev</span> <span class="o">=</span> <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">device</span><span class="p">;</span>
</span><span class='line'>            <span class="k">next</span> <span class="k">if</span> <span class="nv">$already_checked</span><span class="p">{</span><span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">}</span><span class="o">++</span><span class="p">;</span> <span class="c1">#已经检查过就跳过了</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">#磁盘状态为dead，那就放到bad_devs里</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">dstate</span><span class="o">-&gt;</span><span class="n">is_perm_dead</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">push</span> <span class="nv">@bad_devs</span><span class="p">,</span> <span class="nv">$dev</span><span class="p">;</span>
</span><span class='line'>                <span class="k">next</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$disk_size</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">size_on_disk</span><span class="p">(</span><span class="nv">$dfid</span><span class="p">);</span>  <span class="c1">#获取磁盘上的文件大小</span>
</span><span class='line'>            <span class="c1">#这里是我们产生问题的根源。。。设备不可达，也没设置成dead</span>
</span><span class='line'>            <span class="nb">die</span> <span class="s">&quot;dev &quot;</span> <span class="o">.</span> <span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">.</span> <span class="s">&quot; unreachable&quot;</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="nv">$disk_size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$disk_size</span> <span class="o">==</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="nb">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#如果长度一样</span>
</span><span class='line'>                <span class="nb">push</span> <span class="nv">@good_devs</span><span class="p">,</span> <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">device</span><span class="p">;</span> <span class="c1">#加到好的设备里</span>
</span><span class='line'>                <span class="c1">#如果是全设备扫描，那就等于发现了丢失文件，就可以返回了，不用继续查找了</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">if</span> <span class="nv">$is_desperate_mode</span><span class="p">;</span>
</span><span class='line'>                <span class="k">next</span><span class="p">;</span> <span class="c1">#下一个,其他编程语言的continue</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">unless</span> <span class="p">(</span><span class="nv">$is_desperate_mode</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#如果不是全设备扫描</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nv">$disk_size</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">#没有找到文件呀,MISS</span>
</span><span class='line'>                    <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_FILE_MISSING</span><span class="p">,</span> <span class="nv">$dev</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">#长度不正确呀,BLEN</span>
</span><span class='line'>                    <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_BAD_LENGTH</span><span class="p">,</span> <span class="nv">$dev</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">push</span> <span class="nv">@bad_devs</span><span class="p">,</span> <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">device</span><span class="p">;</span> <span class="c1">#增加到坏设备里</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$check_dfids</span><span class="o">-&gt;</span><span class="p">();</span> <span class="c1">#调用上面的监测函数</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">@good_devs</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># 如果一个好的都没</span>
</span><span class='line'>        <span class="c1">#记录日志,全设备扫描 SRCH</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_START_SEARCH</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">#重新设置@dfids,全部的设备</span>
</span><span class='line'>        <span class="nv">@dfids</span> <span class="o">=</span> <span class="nn">List::Util::</span><span class="n">shuffle</span><span class="p">(</span>
</span><span class='line'>                                     <span class="nb">map</span>  <span class="p">{</span> <span class="nn">MogileFS::</span><span class="n">DevFID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$_</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">)</span>  <span class="p">}</span>
</span><span class='line'>                                     <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="n">dstate</span><span class="o">-&gt;</span><span class="n">should_fsck_search_on</span> <span class="p">}</span>
</span><span class='line'>                                     <span class="nn">Mgd::</span><span class="n">device_factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_all</span>
</span><span class='line'>                                     <span class="p">);</span>
</span><span class='line'>        <span class="c1">#重新再找一次,这次是全盘扫描模式</span>
</span><span class='line'>        <span class="nv">$check_dfids</span><span class="o">-&gt;</span><span class="p">(</span><span class="s">&quot;desperate&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 不能修复了呀，找不到文件了</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">CANT_FIX</span> <span class="k">unless</span> <span class="nv">@good_devs</span><span class="p">;</span>
</span><span class='line'>        <span class="c1"># 如果能找到，记录日志,FOND</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_FOUND_FID</span><span class="p">);</span>
</span><span class='line'>        <span class="c1"># 加到数据库里,就是file_on的表里</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">note_on_device</span><span class="p">(</span><span class="nv">$good_devs</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 循环坏的设备，删除掉file_on里的数据</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$bdev</span> <span class="p">(</span><span class="nv">@bad_devs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span><span class="p">(</span><span class="s">&quot;removing file_on mapping for fid=&quot;</span> <span class="o">.</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">.</span> <span class="s">&quot;, dev=&quot;</span> <span class="o">.</span> <span class="nv">$bdev</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">forget_about_device</span><span class="p">(</span><span class="nv">$bdev</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">want_reload</span><span class="p">;</span> <span class="c1">#重新加载fid对象</span>
</span><span class='line'>    <span class="c1"># 如果还是没能满足策略，就就应该复制一份了呀</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids_meet_policy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">#加入到replacte队列中</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">enqueue_for_replication</span><span class="p">(</span><span class="n">in</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">#记录日志 REPL</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_RE_REPLICATE</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">#返回已经处理</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HANDLED</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 更新devcount</span>
</span><span class='line'>    <span class="k">unless</span><span class="p">(</span><span class="nn">MogileFS::</span><span class="n">Config</span><span class="o">-&gt;</span><span class="n">server_setting_cached</span><span class="p">(</span><span class="s">&#39;skip_devcount&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids</span><span class="p">)</span> <span class="o">==</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devcount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">update_devcount</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">fsck_log</span><span class="p">(</span><span class="n">EV_BAD_COUNT</span><span class="p">);</span> <span class="c1">#记录日志BCNT</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">HANDLED</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aho-Corasick算法]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/27/aho-corasicksuan-fa/"/>
    <updated>2012-09-27T14:10:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/27/aho-corasicksuan-fa</id>
    <content type="html"><![CDATA[<h3>aho-corasick算法优势</h3>

<ul>
<li>查找时无需回溯，性能相当好</li>
<li>当需要查找或替换的词非常多时，生成的trie树可以方便缓存</li>
</ul>


<h3>学习方法</h3>

<ul>
<li>了解ac算法的基本思想</li>
<li>阅读源码（看过php, java, perl的版本，还最推荐perl, 因为perl语法精炼,易于阅读）</li>
<li>ac模拟器（见下面的flash，可以尝试操作一下）</li>
</ul>


<!-- more -->




<object width="650" height="500" type="application/x-shockwave-flash" data="http://www.ivank.net/blogspot/en/AHODrawing.swf">
<param value="http://www.ivank.net/blogspot/en/AHODrawing.swf" name="movie">
<!-- http://blog.ivank.net/aho-corasick-algorithm-in-as3.html -->
</object>


<h3>测试Perl的aho-corasick搜索</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Algorithm::AhoCorasick::</span><span class="n">SearchMachine</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$text</span> <span class="o">=</span> <span class="s">&quot;王惠达啊&quot;</span><span class="p">;</span> <span class="c1">#被搜索的内容</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@keywords</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;王惠达&quot;</span><span class="p">,</span><span class="s">&quot;惠达啊&quot;</span><span class="p">);</span> <span class="c1">#需要查找的关键字,这两个关键字是设计过的</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$machine</span> <span class="o">=</span> <span class="nn">Algorithm::AhoCorasick::</span><span class="n">SearchMachine</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">@keywords</span><span class="p">);</span> <span class="c1">#实例化</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">%total</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$handle_all</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span> <span class="c1">#回调函数，把位置和关键字收集起来</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$pos</span><span class="p">,</span> <span class="nv">$keyword</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">exists</span><span class="p">(</span><span class="nv">$total</span><span class="p">{</span><span class="nv">$pos</span><span class="p">}))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$total</span><span class="p">{</span><span class="nv">$pos</span><span class="p">}</span> <span class="o">=</span> <span class="p">[</span> <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$total</span><span class="p">{</span><span class="nv">$pos</span><span class="p">}},</span> <span class="nv">$keyword</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$machine</span><span class="o">-&gt;</span><span class="n">feed</span><span class="p">(</span><span class="nv">$text</span><span class="p">,</span> <span class="nv">$handle_all</span><span class="p">);</span> <span class="c1">#查找</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">Dumper</span><span class="p">(</span><span class="o">\</span><span class="nv">%total</span><span class="p">);</span> <span class="c1">#打印结果</span>
</span></code></pre></td></tr></table></div></figure>


<h3>aho-corasick建立树过程</h3>

<ul>
<li>将关键字建立起一颗Tire树</li>
<li>设置第一层的不匹配的转移节点</li>
<li>设置其余的不匹配转移节点</li>
<li>初始化状态到根节点</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">_build_tree</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#建立根节点，Node对象包含属性parent,char,results,transitions,failure</span>
</span><span class='line'>    <span class="c1">#parent属性放置的也是Node对象</span>
</span><span class='line'>    <span class="c1">#char属性是一个字符</span>
</span><span class='line'>    <span class="c1">#results属性代表匹配的串,当达到这个状态时可以直接返回</span>
</span><span class='line'>    <span class="c1">#transitions属性用来描述树型结构的hash,以char为key,Node对象为value</span>
</span><span class='line'>    <span class="c1">#failure属性放置的也是Node对象，当匹配失败时，转移到哪个状态</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">}</span> <span class="o">=</span> <span class="nn">Algorithm::AhoCorasick::</span><span class="n">Node</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#将关键字建立起一颗树</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$p</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">keywords</span><span class="p">}})</span> <span class="p">{</span> <span class="c1">#循环传进来的keywords数组</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$nd</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">};</span> <span class="c1">#每次都是从根节点开始的</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$c</span> <span class="p">(</span><span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="nv">$p</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#切割成字符</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$ndNew</span> <span class="o">=</span> <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">get_transition</span><span class="p">(</span><span class="nv">$c</span><span class="p">);</span> <span class="c1">#如果父节点已经包含该字符,直接取得该节点</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$ndNew</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">#如果父节点不包含该字符，就新建一个Node,并增加到父节点</span>
</span><span class='line'>                <span class="nv">$ndNew</span> <span class="o">=</span> <span class="nn">Algorithm::AhoCorasick::</span><span class="n">Node</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">parent</span> <span class="o">=&gt;</span> <span class="nv">$nd</span><span class="p">,</span> <span class="n">char</span> <span class="o">=&gt;</span> <span class="nv">$c</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">add_transition</span><span class="p">(</span><span class="nv">$ndNew</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">#修改父节点</span>
</span><span class='line'>            <span class="nv">$nd</span> <span class="o">=</span> <span class="nv">$ndNew</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#在最后一个节点,增加一个result，为了搜索时可以直接匹配的字符串 </span>
</span><span class='line'>        <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">add_result</span><span class="p">(</span><span class="nv">$p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#设置第一层的不匹配的转移节点</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@nodes</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">#循环根节点下的所有节点</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$nd</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">}</span><span class="o">-&gt;</span><span class="n">transitions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">#第一层的不匹配肯定是根节点</span>
</span><span class='line'>        <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">});</span>
</span><span class='line'>        <span class="c1">#增加该节点的子节点到数组，为了遍历设置其余节点的不匹配转移节点</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@nodes</span><span class="p">,</span> <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">transitions</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#循环设置其余的不匹配转移节点</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">@nodes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">@newNodes</span><span class="p">;</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$nd</span> <span class="p">(</span><span class="nv">@nodes</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#循环着一层的节点</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">;</span> <span class="c1">#父节点的不匹配跳转节点</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">char</span><span class="p">;</span> <span class="c1">#该节点的字符</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">#如果父节点的失败节点的子节点中包含该字符，跳出while，此时$r是不空的</span>
</span><span class='line'>            <span class="c1">#如果不满足上面的情况,就用父节点的失败节点的失败节点，其实根节点的failure是undef的呀</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nv">$r</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="nv">$r</span><span class="o">-&gt;</span><span class="n">get_transition</span><span class="p">(</span><span class="nv">$c</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$r</span> <span class="o">=</span> <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">});</span> <span class="c1">#$r=undef，就代表要用根节点</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">#寻找父节点的失败节点的包含该字符的子节点</span>
</span><span class='line'>                <span class="k">my</span> <span class="nv">$tc</span> <span class="o">=</span> <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">get_transition</span><span class="p">(</span><span class="nv">$c</span><span class="p">);</span>
</span><span class='line'>                <span class="c1">#为该节点设置失败节点</span>
</span><span class='line'>                <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">(</span><span class="nv">$tc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$result</span> <span class="p">(</span><span class="nv">$tc</span><span class="o">-&gt;</span><span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">add_result</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">#继续下面一层</span>
</span><span class='line'>            <span class="nb">push</span> <span class="nv">@newNodes</span><span class="p">,</span> <span class="nv">$nd</span><span class="o">-&gt;</span><span class="n">transitions</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">@nodes</span> <span class="o">=</span> <span class="nv">@newNodes</span><span class="p">;</span> <span class="c1">#再来一遍</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#上面根节点的failure是undef，现在设置一下，为查找时可以统一处理</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">}</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">});</span>
</span><span class='line'>    <span class="c1">#初始化状态到根节点</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>查找过程</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">feed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$text</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$l</span> <span class="o">=</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">$index</span> <span class="o">&lt;</span> <span class="nv">$l</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#一个一个字符的遍历起来</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$trans</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">#从当前状态获取子节点中匹配该字符的节点</span>
</span><span class='line'>            <span class="nv">$trans</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span><span class="o">-&gt;</span><span class="n">get_transition</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$text</span><span class="p">,</span> <span class="nv">$index</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="c1">#如果状态是根节点或者匹配到了就跳出while</span>
</span><span class='line'>            <span class="k">last</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span> <span class="o">==</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">root</span><span class="p">})</span> <span class="o">||</span> <span class="nv">$trans</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">#不是根节点，也没匹配到，转到失败节点</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span><span class="o">-&gt;</span><span class="n">failure</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#如果匹配到就把状态转到匹配的这个节点</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$trans</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$trans</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#如果匹配到的状态有返回值，那就调用回调函数</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$found</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">state</span><span class="p">}</span><span class="o">-&gt;</span><span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nv">$callback</span><span class="p">(</span><span class="nv">$index</span> <span class="o">-</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$found</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$found</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">#回调函数不好有返回值的呀，有的话一半就停掉了呀</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$rv</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#继续继续</span>
</span><span class='line'>        <span class="o">++</span><span class="nv">$index</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[显示solr省略的日志]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/27/solrsheng-lue-ri-zhi/"/>
    <updated>2012-09-27T13:54:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/27/solrsheng-lue-ri-zhi</id>
    <content type="html"><![CDATA[<h3>solr日志默认的效果</h3>

<ul>
<li>删除时默认只显示10条记录，其余的使用省略号代替</li>
<li>一般情况下这样是比较好的，但是有时还是希望看到所有的信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>webapp=/solr path=/update params={wt=json} 
</span><span class='line'>{delete=[11, 12, 13, 14, 15, 16, 17, 18, 19, 20... (100 deletes)]} 0 127</span></code></pre></td></tr></table></div></figure>




<!--more -->


<h3>测试程序</h3>

<ul>
<li>查询100条记录后删除</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">include_once</span><span class="p">(</span><span class="s1">&#39;Apache/Solr/Service.php&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$solr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apache_Solr_Service</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span><span class="s1">&#39;8984&#39;</span><span class="p">,</span><span class="s1">&#39;/solr&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$rep</span> <span class="o">=</span> <span class="nv">$solr</span><span class="o">-&gt;</span><span class="na">search</span><span class="p">(</span><span class="s1">&#39;*:*&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nv">$rep</span> <span class="o">=</span> <span class="nv">$rep</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">docs</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ids</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$rep</span> <span class="k">as</span> <span class="nv">$r</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$r</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$ids</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$r</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$solr</span><span class="o">-&gt;</span><span class="na">deleteByMultipleIds</span><span class="p">(</span><span class="nv">$ids</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>跟踪solr代码</h3>

<ul>
<li>断点设置在LogUpdateProcessor的processDelete里</li>
<li>小于maxNumToLog才会添加到deletes</li>
<li>多余的部分用省略号表示</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processDelete</span><span class="o">(</span> <span class="n">DeleteUpdateCommand</span> <span class="n">cmd</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">logDebug</span><span class="o">)</span> <span class="o">{</span> <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;PRE_UPDATE &quot;</span> <span class="o">+</span> <span class="n">cmd</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">next</span><span class="o">.</span><span class="na">processDelete</span><span class="o">(</span><span class="n">cmd</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">isDeleteById</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">deletes</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">deletes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">toLog</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;delete&quot;</span><span class="o">,</span><span class="n">deletes</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">deletes</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">maxNumToLog</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//小于maxNumToLog才会添加到deletes</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">version</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">.</span><span class="na">getVersion</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">version</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&quot; (&quot;</span> <span class="o">+</span> <span class="n">version</span> <span class="o">+</span> <span class="sc">&#39;)&#39;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">deletes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">toLog</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">maxNumToLog</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">version</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">.</span><span class="na">getVersion</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">.</span><span class="na">query</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">version</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">&quot; (&quot;</span> <span class="o">+</span> <span class="n">version</span> <span class="o">+</span> <span class="sc">&#39;)&#39;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">toLog</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;deleteByQuery&quot;</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">numDeletes</span><span class="o">++;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">finish</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//略</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">deletes</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">numDeletes</span> <span class="o">&gt;</span> <span class="n">maxNumToLog</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">deletes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;... (&quot;</span> <span class="o">+</span> <span class="n">numDeletes</span> <span class="o">+</span> <span class="s">&quot; deletes)&quot;</span><span class="o">);</span> <span class="c1">//如果大于就要省略号表示</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//略</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更改配置，显示所有结果</h3>

<ul>
<li>默认配置中是没有updateRequestProcessorChain，如果没有配置，默认也会加载下面3个处理器</li>
<li>RunUpdateProcessorFactory一般必须要有的，作用是更新请求</li>
<li>DistributedUpdateProcessorFactory作用是更新shard</li>
<li>LogUpdateProcessorFactory作用是记录更新日志</li>
<li>maxNumToLog决定日志显示的个数，默认为10</li>
<li>参考<a href="http://wiki.apache.org/solr/UpdateRequestProcessor">http://wiki.apache.org/solr/UpdateRequestProcessor</a></li>
<li>参考<a href="http://wiki.apache.org/solr/SolrConfigXml">http://wiki.apache.org/solr/SolrConfigXml</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="o">&lt;</span><span class="n">updateRequestProcessorChain</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="k">default</span><span class="o">=</span><span class="s">&quot;true&quot;</span> <span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">processor</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;solr.DistributedUpdateProcessorFactory&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">processor</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;solr.LogUpdateProcessorFactory&quot;</span> <span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="kt">int</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;maxNumToLog&quot;</span><span class="o">&gt;</span><span class="mi">100</span><span class="o">&lt;/</span><span class="kt">int</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">processor</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">processor</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;solr.RunUpdateProcessorFactory&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">updateRequestProcessorChain</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solr的数值存储和范围查询]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/21/solrde-shu-zhi-cun-chu-he-fan-wei-cha-xun/"/>
    <updated>2012-09-21T20:49:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/21/solrde-shu-zhi-cun-chu-he-fan-wei-cha-xun</id>
    <content type="html"><![CDATA[<h3>问题：solr查询q=date:[1348233109 TO *]，QTime=300-500毫秒，范围越大越耗时</h3>

<h3>要点：lucene内部不存储数值，而用多个字符串代替</h3>

<h4>我的疑问：为什么不用数值呀，存储空间少，效率又高? 琢磨了下应该有如下原因吧</h4>

<ul>
<li>lucene索引的倒排表都是根据字符串排序的，要存储数值看来得另起一套索引</li>
<li>如果存储数值，查询的排序也不能正常运作了，比如10比2排在前面</li>
<li>查询12,是准确匹配12能还是能匹配123</li>
<li>数字问题越来越复杂，基本上串模式在数字上根本行不通，如果数值也是串，那问题就简单多了,和一般的词没两样</li>
</ul>


<h3>lucene测试程序</h3>

<ul>
<li>添加id为695和705的两个文档，搜索id区域698到2054</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ParseException</span><span class="o">{</span>
</span><span class='line'>    <span class="n">Directory</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">FSDirectory</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/tempindex&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">Analyzer</span> <span class="n">analyzer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StandardAnalyzer</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">LUCENE_40</span><span class="o">);</span>
</span><span class='line'>    <span class="n">IndexWriterConfig</span> <span class="n">iwc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexWriterConfig</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">LUCENE_40</span><span class="o">,</span> <span class="n">analyzer</span><span class="o">);</span>
</span><span class='line'>    <span class="n">iwc</span><span class="o">.</span><span class="na">setOpenMode</span><span class="o">(</span><span class="n">OpenMode</span><span class="o">.</span><span class="na">CREATE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">IndexWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexWriter</span><span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">iwc</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">();</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LongField</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span><span class="mi">695</span><span class="o">,</span><span class="n">Store</span><span class="o">.</span><span class="na">YES</span><span class="o">));</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="na">addDocument</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">();</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LongField</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span><span class="mi">705</span><span class="o">,</span><span class="n">Store</span><span class="o">.</span><span class="na">YES</span><span class="o">));</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="na">addDocument</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
</span><span class='line'>    <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DirectoryReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">DirectoryReader</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">dir</span><span class="o">);</span>
</span><span class='line'>    <span class="n">IndexSearcher</span> <span class="n">searcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexSearcher</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Query</span> <span class="n">q</span> <span class="o">=</span> <span class="n">NumericRangeQuery</span><span class="o">.</span><span class="na">newLongRange</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="mi">698L</span><span class="o">,</span> <span class="mi">2054L</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ScoreDoc</span><span class="o">[]</span> <span class="n">hits</span> <span class="o">=</span> <span class="n">searcher</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">q</span><span class="o">,</span> <span class="mi">200</span><span class="o">).</span><span class="na">scoreDocs</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">hits</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>      <span class="n">Document</span> <span class="n">result</span> <span class="o">=</span> <span class="n">searcher</span><span class="o">.</span><span class="na">doc</span><span class="o">(</span><span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">doc</span><span class="o">);</span>
</span><span class='line'>      <span class="n">IndexableField</span> <span class="n">id</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;doc:%s,id:%s&quot;</span><span class="o">,</span> <span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">doc</span><span class="o">,</span> <span class="n">id</span><span class="o">.</span><span class="na">numericValue</span><span class="o">().</span><span class="na">longValue</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="n">dir</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>调试监测建立索引时，695和705生成的多个字符串</h3>

<ul>
<li>断点设在NumericUtils.java的longToPrefixCoded方法内</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="mi">695</span>                         <span class="mi">705</span>
</span><span class='line'><span class="o">[</span><span class="mi">20</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span> <span class="mi">37</span><span class="o">]</span>   <span class="o">[</span><span class="mi">20</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span> <span class="mi">41</span><span class="o">]</span> <span class="mh">0x20</span><span class="err">代表</span><span class="kt">long</span><span class="o">,</span><span class="err">低字节放到</span><span class="n">bytes</span><span class="err">高索引位</span>
</span><span class='line'><span class="o">[</span><span class="mi">24</span> <span class="mi">8</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="n">b</span><span class="o">]</span>     <span class="o">[</span><span class="mi">24</span> <span class="mi">8</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="n">c</span><span class="o">]</span>   <span class="err">每</span><span class="mi">7</span><span class="err">位代表一个字符</span>
</span><span class='line'><span class="o">[</span><span class="mi">28</span> <span class="mi">40</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="o">]</span>       <span class="o">[</span><span class="mi">28</span> <span class="mi">40</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="o">]</span>     <span class="err">每次循环右移</span><span class="n">precisionStep</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="n">c</span> <span class="mi">4</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>        <span class="o">[</span><span class="mi">2</span><span class="n">c</span> <span class="mi">4</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">30</span> <span class="mi">20</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>         <span class="o">[</span><span class="mi">30</span> <span class="mi">20</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">34</span> <span class="mi">2</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>          <span class="o">[</span><span class="mi">34</span> <span class="mi">2</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">38</span> <span class="mi">10</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>           <span class="o">[</span><span class="mi">38</span> <span class="mi">10</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="n">c</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>            <span class="o">[</span><span class="mi">3</span><span class="n">c</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">40</span> <span class="mi">8</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>              <span class="o">[</span><span class="mi">40</span> <span class="mi">8</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">44</span> <span class="mi">40</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>               <span class="o">[</span><span class="mi">44</span> <span class="mi">40</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">48</span> <span class="mi">4</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>                <span class="o">[</span><span class="mi">48</span> <span class="mi">4</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="n">c</span> <span class="mi">20</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>                 <span class="o">[</span><span class="mi">4</span><span class="n">c</span> <span class="mi">20</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">50</span> <span class="mi">2</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>                  <span class="o">[</span><span class="mi">50</span> <span class="mi">2</span> <span class="mi">0</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">54</span> <span class="mi">10</span> <span class="mi">0</span><span class="o">]</span>                   <span class="o">[</span><span class="mi">54</span> <span class="mi">10</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">58</span> <span class="mi">1</span> <span class="mi">0</span><span class="o">]</span>                    <span class="o">[</span><span class="mi">58</span> <span class="mi">1</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="n">c</span> <span class="mi">8</span><span class="o">]</span>                      <span class="o">[</span><span class="mi">5</span><span class="n">c</span> <span class="mi">8</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>698-2057的区域转化</h3>

<ul>
<li>断点设在NumericUtils.java的longToPrefixCoded方法内</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">698</span><span class="o">:</span> <span class="o">[</span><span class="mi">20</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span> <span class="mi">3</span><span class="n">a</span><span class="o">]</span>  <span class="mi">703</span><span class="o">:</span> <span class="o">[</span><span class="mi">20</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span> <span class="mi">3</span><span class="n">f</span><span class="o">]</span>
</span><span class='line'><span class="mi">704</span><span class="o">:</span> <span class="o">[</span><span class="mi">24</span> <span class="mi">8</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="n">c</span><span class="o">]</span>    <span class="mi">767</span><span class="o">:</span> <span class="o">[</span><span class="mi">24</span> <span class="mi">8</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="n">f</span><span class="o">]</span>
</span><span class='line'><span class="mi">768</span><span class="o">:</span> <span class="o">[</span><span class="mi">28</span> <span class="mi">40</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">3</span><span class="o">]</span>      <span class="mi">2047</span><span class="o">:[</span><span class="mi">28</span> <span class="mi">40</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">7</span><span class="o">]</span>
</span><span class='line'><span class="mi">2048</span><span class="o">:[</span><span class="mi">20</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">10</span> <span class="mi">0</span><span class="o">]</span>  <span class="mi">2054</span><span class="o">:[</span><span class="mi">20</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">10</span> <span class="mi">6</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>precisionStep使用默认的4</li>
<li>703的生成方法是对698的右边4位和二进制“1111”做或运算</li>
<li>704的生成方法是在703的基础上加1,那么右边四位全0，右移4位</li>
<li>767的生成方法是对704的右边4位和二进制“1111”做或运算（其实只要前缀匹配，后面已经无所谓了）</li>
<li>后面的数字生成方法一样</li>
</ul>


<h3>查询索引比较</h3>

<ul>
<li>大于等于698,小于等于703的没有</li>
<li>大于等于704,小于等于767的有，705的第二条记录</li>
<li>大于等于768,小于等于2047的没有</li>
<li>大于等于2048,小于等于2054的没有</li>
</ul>


<h3>结论：要提高效率的方法</h3>

<ul>
<li>调整precisionStep,默认为4，调大索引小性能差，调小索引大性能理论上的好,精度高，见下图</li>
</ul>


<p><img src="http://www.wanghd.com/images/post/rangequery.gif" title="rangequery" alt="rangequery" /></p>

<ul>
<li>如果int够用，可以不用Long用Int</li>
<li>缩小范围，这是最直接最管用的方法，（优化业务需求）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用JMX分析solr状态]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/20/shi-yong-jmxfen-xi-solrzhuang-tai/"/>
    <updated>2012-09-20T14:25:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/20/shi-yong-jmxfen-xi-solrzhuang-tai</id>
    <content type="html"><![CDATA[<h3>开启JMX</h3>

<ul>
<li>在solrconfig.xml中添加,默认包含</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;jmx /&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启solr，设置启动参数</li>
<li>扩展选项请参考<a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">官方文档</a></li>
</ul>


<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -Xmx256M -Xms256M -XX:PermSize=64M -XX:MaxPermSize=64M 
</span><span class='line'>-XX:+UseParallelGC 
</span><span class='line'>-Dcom.sun.management.jmxremote
</span><span class='line'>-Dcom.sun.management.jmxremote.port=3000
</span><span class='line'>-Dcom.sun.management.jmxremote.ssl=false
</span><span class='line'>-Dcom.sun.management.jmxremote.authenticate=false
</span><span class='line'>-jar start.jar</span></code></pre></td></tr></table></div></figure>


<h3>使用jconsole连接，查看进程状态</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jconsole 127.0.0.1:3000 （jconsole在jdk的bin目录里）</span></code></pre></td></tr></table></div></figure>


<h3>实时java堆内存使用情况</h3>

<p><img src="http://www.wanghd.com/images/post/heap.png" title="heap" alt="heap" /></p>

<h3>实时cpu使用情况</h3>

<p><img src="http://www.wanghd.com/images/post/cpu.png" title="cpu" alt="cpu" /></p>

<h3>MBean分析缓存命中率</h3>

<p><img src="http://www.wanghd.com/images/post/documentcache.png" title="documentcache" alt="documentcache" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向量空间模型]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/18/xiang-liang-kong-jian-mo-xing/"/>
    <updated>2012-09-18T08:28:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/18/xiang-liang-kong-jian-mo-xing</id>
    <content type="html"><![CDATA[<h3>向量空间模型广泛使用在文档相似度（算score等等），下面举例描述这个模型：</h3>

<ul>
<li>假设有两个文档（可以把一个query想象成一个文档）,分别为d1,d2</li>
<li>假设w1,w2,w3,w4为term</li>
<li>下图为词频（词频就是在单个文档中出现的次数）,词频为ai,bi</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----------------------------------
</span><span class='line'>      |  w1  |  w2  |  w3  |  w4  |
</span><span class='line'>  d1  |  1   |      |  1   |      |
</span><span class='line'>  d2  |  2   |  3   |  2   |  1   |
</span><span class='line'>-----------------------------------</span></code></pre></td></tr></table></div></figure>


<ul>
<li>比较夹角公式，越接近越相似,(还需要向量的模公式,|x| = √x<sup>2)</sup></li>
</ul>


<p><img src="http://www.wanghd.com/images/post/vsm.png" title="vsm公式" alt="vsm公式" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sim(d1,d2) = ∑(ai*bi) / √(∑ai^2 * ∑bi^2)
</span><span class='line'>           = 1*2+0*3+1*2+0*1 / √((1^2+0^2+1^2+0^2)*(2^2+3^2+2^2+1^2))
</span><span class='line'>           = 4 / √(36)
</span><span class='line'>           = 4 / 6
</span><span class='line'>           = 2 / 3
</span><span class='line'>           = 0.66666...</span></code></pre></td></tr></table></div></figure>


<ul>
<li>假设文章只有两维的话，那么空间图就可以画在一个平面直角坐标系当中，读者可以假想两篇只有两个词的文章画图进行理解。</li>
<li>由公式可以看出计算量是很大的，要提高效率最好的方法就是减少term，俗称降纬</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solr慢查询分析]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/14/solrman-cha-xun-fen-xi/"/>
    <updated>2012-09-14T13:35:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/14/solrman-cha-xun-fen-xi</id>
    <content type="html"><![CDATA[<h3>solr慢请求分析,第一种</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=560950&q=*:*&wt=json&rows=50} hits=863948 status=0 QTime=2752
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=756250&q=*:*&wt=json&rows=50} hits=863935 status=0 QTime=2472 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=315450&q=*:*&wt=json&rows=50} hits=863935 status=0 QTime=1183 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=557400&q=*:*&wt=json&rows=50} hits=863935 status=0 QTime=2020 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=315550&q=*:*&wt=json&rows=50} hits=863935 status=0 QTime=1061 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=756400&q=*:*&wt=json&rows=50} hits=863935 status=0 QTime=2252 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=315650&q=*:*&wt=json&rows=50} hits=863938 status=0 QTime=1068 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=557500&q=*:*&wt=json&rows=50} hits=863938 status=0 QTime=2012 
</span><span class='line'>INFO: [] webapp=/solr path=/select/ params={fl=id&sort=quetime+asc&start=557550&q=*:*&wt=json&rows=50} hits=863938 status=0 QTime=2248 </span></code></pre></td></tr></table></div></figure>


<h3>解决方案</h3>

<ul>
<li>请排除以上查询语句【或限制start】</li>
</ul>


<h3>solr慢请求分析,第二种</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: [] webapp=/solr path=/select params={mm=2&fl=score,*&sort=score+desc,quetime+desc&start=0&q=贷款+房子+能+不+买&bf=linear(rankscore,29.3246184,0)&qf=title^5+tags^1+bestanswerstr^2+description^1+normalanswerstr^1&wt=json&qt=dismax&fq=-cityid:14&fq=questatus:1+OR+questatus:2+OR+questatus:3+OR+questatus:6&rows=1} hits=317500 status=0 QTime=520 
</span><span class='line'>INFO: [] webapp=/solr path=/select params={mm=2&fl=score,*&sort=score+desc,quetime+desc&start=0&q=集体+户口+好+好+不&qf=title^5+tags^1+bestanswerstr^2+description^1+normalanswerstr^1&wt=json&qt=dismax&fq=-cityid:12&fq=questatus:1+OR+questatus:2+OR+questatus:3+OR+questatus:6&rows=1} hits=287285 status=0 QTime=622 </span></code></pre></td></tr></table></div></figure>


<h3>解决方案</h3>

<ul>
<li>dismax的mm=2间接使用了OR，建议用AND提高性能【实验中:我想用docfreq来做判断用AND还是OR】</li>
<li>StopWord:通过solr/admin/luke?fl=normalanswerstr&amp;numTerms=100分析term,过滤掉没有意义的term,例如</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;int name="的"&gt;965396&lt;/int&gt;
</span><span class='line'>&lt;int name="，"&gt;947429&lt;/int&gt;
</span><span class='line'>&lt;int name="是"&gt;729063&lt;/int&gt;
</span><span class='line'>&lt;int name="。"&gt;707417&lt;/int&gt;
</span><span class='line'>&lt;int name="不"&gt;571925&lt;/int&gt;
</span><span class='line'>&lt;int name="你"&gt;534142&lt;/int&gt;
</span><span class='line'>&lt;int name="可以"&gt;525645&lt;/int&gt;
</span><span class='line'>&lt;int name="就"&gt;460975&lt;/int&gt;
</span><span class='line'>&lt;int name="有"&gt;443743&lt;/int&gt;
</span><span class='line'>&lt;int name="了"&gt;437630&lt;/int&gt;
</span><span class='line'>&lt;int name="要"&gt;372936&lt;/int&gt;
</span><span class='line'>&lt;int name="！"&gt;342369&lt;/int&gt;
</span><span class='line'>&lt;int name="好"&gt;331646&lt;/int&gt;
</span><span class='line'>&lt;int name="在"&gt;324636&lt;/int&gt;
</span><span class='line'>&lt;int name="一"&gt;279765&lt;/int&gt;
</span><span class='line'>&lt;int name="个"&gt;269726&lt;/int&gt;
</span><span class='line'>&lt;int name="能"&gt;233510&lt;/int&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>权重相同的放入同一个字段，也可以用CopyField，可以多加个系数</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lucene 入门]]></title>
    <link href="http://www.wanghd.com/blog/2012/09/07/lucene-ru-men/"/>
    <updated>2012-09-07T22:10:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/09/07/lucene-ru-men</id>
    <content type="html"><![CDATA[<h3>官方DEMO</h3>

<ul>
<li><a href="http://lucene.apache.org/core/4_0_0-BETA/demo/src-html/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></li>
<li><a href="http://lucene.apache.org/core/4_0_0-BETA/demo/src-html/org/apache/lucene/demo/SearchFiles.html">SearchFiles</a></li>
</ul>


<h3>IndexFiles</h3>

<ul>
<li>在main()方法里分析命令行，然后初始化IndexWriter,打开Directory,初始化StandaryAnalyzer和IndexWriterConfig</li>
<li>-index参数设置索引存放的地方，默认存放在index目录下</li>
<li>-docs参数指定哪个目录下的文件被索引</li>
<li>-update参数如果被设置，将不删除已经存在的索引，否则清楚后重新建立索引</li>
<li>IndexWriter使用Directory存储索引信息,这里使用的是FSDirectory实现,其他的子类可以写入RAM,DB</li>
<li>Analyzer用来分词(indexed tokens)也称为terms,也包括一些其他的处理，例如统一转换，同义词插入，过滤不需要的词等.现在用的StandaryAnalyzer的分词逻辑是Unicode Text Segmentation algorithm,统一转换成小写，过滤掉不要的词，例如a,an等很少被搜索的词语.不同的语言应该用不同的分析器，lucene已经提供了很多语言的分析器了</li>
<li>IndexWriterConfig用来控制IndexWriter,例如设置OpenMode</li>
<li>在IndexWriter初始化后，就来到了indexDocs()方法，这个递归函数爬取-docs下的所有文件来建立Document对象.Document包含3个域分别是文件内容，路径和创建时间.如果-update指定，那么就更新文档，否则删除索引目录后添加文档</li>
</ul>


<h3>SearchFiles</h3>

<ul>
<li>下面是一个简易版的文件查询,利用IndexSearcher,StandaryAnalyzer和QueryParser进行查找,QueryParser也需要StandaryAnalyzer对输入的内容进行分析，例如转换小写，过滤词等.QueryParser通过lucene解析语法生成的Query传递给IndexSearcher</li>
<li>SearchFiles 用IndexSearcher.search(query,n) 返回得分最高的N条记录.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomSearch</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">CustomSearch</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * @param args</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">index</span> <span class="o">=</span> <span class="s">&quot;index&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">field</span> <span class="o">=</span> <span class="s">&quot;contents&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">queryString</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="o">{</span>
</span><span class='line'>      <span class="n">IndexReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">DirectoryReader</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">FSDirectory</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">index</span><span class="o">)));</span>
</span><span class='line'>      <span class="n">IndexSearcher</span> <span class="n">searcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndexSearcher</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Analyzer</span> <span class="n">analyzer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StandardAnalyzer</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">LUCENE_40</span><span class="o">);</span>
</span><span class='line'>      <span class="n">QueryParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QueryParser</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">LUCENE_40</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">analyzer</span><span class="o">);</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">,</span><span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">queryString</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Enter query:&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">queryString</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">queryString</span><span class="o">);</span>
</span><span class='line'>      <span class="n">printResult</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">searcher</span><span class="o">,</span> <span class="n">query</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;can not open index directory!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;can not open index directory!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printResult</span><span class="o">(</span><span class="n">BufferedReader</span> <span class="n">in</span><span class="o">,</span><span class="n">IndexSearcher</span> <span class="n">searcher</span><span class="o">,</span><span class="n">Query</span> <span class="n">query</span><span class="o">,</span><span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TopDocs</span> <span class="n">results</span> <span class="o">=</span> <span class="n">searcher</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ScoreDoc</span><span class="o">[]</span> <span class="n">hits</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">scoreDocs</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">totalHits</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">totalHits</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">printHits</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">printHits</span> <span class="o">&lt;</span> <span class="n">totalHits</span><span class="o">){</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">hits</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++,</span><span class="n">printHits</span><span class="o">++){</span>
</span><span class='line'>        <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">searcher</span><span class="o">.</span><span class="na">doc</span><span class="o">(</span><span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">doc</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;score=%s,id=%s,doc=%s,path=%s&quot;</span><span class="o">,</span><span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">score</span><span class="o">,</span> <span class="n">printHits</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">doc</span><span class="o">,</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">)</span> <span class="o">));</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">limit</span> <span class="o">){</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>          <span class="n">results</span> <span class="o">=</span> <span class="n">searcher</span><span class="o">.</span><span class="na">searchAfter</span><span class="o">(</span><span class="n">hits</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">query</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>
</span><span class='line'>          <span class="n">hits</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">scoreDocs</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令]]></title>
    <link href="http://www.wanghd.com/blog/2012/08/30/chang-yong-ming-ling/"/>
    <updated>2012-08-30T13:14:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/08/30/chang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h3>过滤记录</h3>

<ul>
<li>-l自动chomp，结果加$/</li>
<li>-a自动分割</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f access-2012-08-30.log | grep -v <span class="s1">&#39;*&#39;</span> <span class="se">\ </span>
</span><span class='line'>    | perl -w -lane <span class="s1">&#39;$a = $F[@F-1];print if $a &gt; 50000 &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取URL内容</h3>

<ul>
<li>-I 获取头信息</li>
<li>-x 通过哪台服务器</li>
<li>-A 设置user agent,可以让log过滤更方便</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -I -x 127.0.0.1  <span class="s2">&quot;http://test/abc.jpg&quot;</span> -A <span class="s2">&quot;huida&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>批量删除一天以前的文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find /dev/shm/ -type f -mtime +1 | xargs rm
</span></code></pre></td></tr></table></div></figure>


<h3>计算tcp连接数</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>su -
</span><span class='line'>netstat -lant | wc -l
</span></code></pre></td></tr></table></div></figure>


<h3>增加网关</h3>

<ul>
<li>mac版</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo route add -net 10.0.0.0/8 -interface ppp0
</span></code></pre></td></tr></table></div></figure>


<h3>格式化和mount磁盘</h3>

<ul>
<li>xfs系统</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/sbin/mkfs.xfs /dev/sdb
</span><span class='line'>mount –t xfs /dev/sdb /data1
</span><span class='line'>vim /etc/fstab
</span><span class='line'>umount -l /tmp/
</span></code></pre></td></tr></table></div></figure>


<h3>导出数据</h3>

<ul>
<li>-h -u -p表示主机，用户，密码</li>
<li>-D表示数据库</li>
<li>-e表示执行语句</li>
<li>-N表示跳过列名, &#8211;skip-column-names</li>
<li>-s表示用tab分割字段, &#8211;silent,Be more silent. Print results with a tab as separator, each row on new line.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -h -u -p -Ns -Ddatabase -e <span class="s2">&quot;select * from ~~~ where ~~~&quot;</span> &gt; /tmp/fid
</span></code></pre></td></tr></table></div></figure>


<h3>远程取得数据</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sftp
</span><span class='line'>scp
</span><span class='line'>rsync
</span></code></pre></td></tr></table></div></figure>


<h3>查看系统状况</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>iostat -x 1
</span><span class='line'>free -m
</span><span class='line'>w
</span><span class='line'>top
</span><span class='line'>ping
</span><span class='line'>lsof -i4TCP -P
</span><span class='line'>netstat -lnp
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
