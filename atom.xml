<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[$huida =~ s/blog/site/g]]></title>
  <link href="http://www.wanghd.com/atom.xml" rel="self"/>
  <link href="http://www.wanghd.com/"/>
  <updated>2012-07-27T22:08:44+08:00</updated>
  <id>http://www.wanghd.com/</id>
  <author>
    <name><![CDATA[王惠达 huida wanghuida]]></name>
    <email><![CDATA[wanghuida258@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java volatile理解]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/27/java-volatileli-jie/"/>
    <updated>2012-07-27T21:55:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/27/java-volatileli-jie</id>
    <content type="html"><![CDATA[<h3>volatile的含义其实很好理解，希望配合图可以更加清晰的解释</h3>

<p><img src="http://www.wanghd.com/images/post/volatile.png" title="volatile 图例说明" alt="volatile" /></p>

<ul>
<li>多个线程加载同一个对象时，会从主内存复制一个副本到线程工作内存</li>
<li>如果对象没有volatile属性，只有write操作才会让主内存的对象得到修改（其他线程这时才有可能拿到最新的结果）</li>
<li>如果对象有volatile属性，load,use,asign,store都会拿到实时的结果（因为会一直同步更新结果）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xdebug:500错误显示200成功的bug]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/26/xdebug-500cuo-wu-xian-shi-200cheng-gong-de-bug/"/>
    <updated>2012-07-26T16:15:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/26/xdebug-500cuo-wu-xian-shi-200cheng-gong-de-bug</id>
    <content type="html"><![CDATA[<h3>今天同事遇见一个诡异的问题</h3>

<blockquote><p>明显php错误，但是HTTP返回200</p></blockquote>

<h3>最总关闭加载xdebug一切正常了</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 一周体验记]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/22/python-zhou-ti-yan-ji/"/>
    <updated>2012-07-22T10:27:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/22/python-zhou-ti-yan-ji</id>
    <content type="html"><![CDATA[<h3>python可以快速上手</h3>

<blockquote><p>推荐官方的新手教程 <a href="http://docs.python.org/tutorial/">http://docs.python.org/tutorial/</a></p></blockquote>

<!-- more -->


<h3>python强制空白</h3>

<blockquote><p>这是python特有的，代码可维护性大大提高了</p></blockquote>

<h3>python语法糖</h3>

<blockquote><p>很甜很甜</p></blockquote>

<h3>列表推导,列表范围</h3>

<blockquote><p>虽然列表的处理还不如perl那么灵活，但已经有那么点意思了</p>

<p>但是学习成本上python要优于perl</p></blockquote>

<h3>PyPI</h3>

<blockquote><p>类似于CPAN是一样的</p></blockquote>

<h3>python在web上的应用</h3>

<blockquote><p>python的框架有很多，可以在这个地址上找到绝大部分 <a href="http://www.wsgi.org/en/latest/frameworks.html">http://www.wsgi.org/en/latest/frameworks.html</a></p>

<p>我选择了flask，同事的建议是比较小巧，好用</p>

<p>可以深入了解一下Werkzeug,flask是基于它开发的</p>

<blockquote><p>之前一直有个疑惑，每个框架都有内置的http server，这个http server到底是python提供的还是框架提供的? 看了一些Werkzeug的源码才清楚。Werkzeug里的serving.py使用了python的BaseHTTPServer库，Werkzeug对http进行分析和封装。So 我觉得Werkzeug是可以深入研究的。</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth 介绍]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/13/oauth-jie-shao/"/>
    <updated>2012-07-13T13:01:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/13/oauth-jie-shao</id>
    <content type="html"><![CDATA[<h3>在认证和授权的过程中涉及的三方包括：</h3>

<ul>
<li>服务提供方 (Service Provider)，用户使用服务提供方来存储受保护的资源，如照片，视频，联系人列表。</li>
<li>用户 (User)，存放在服务提供方的受保护的资源的拥有者。</li>
<li>客户端 (Client)，要访问服务提供方资源的第三方应用，通常是网站，如提供照片打印服务的网站。在认证过程之前，客户端要向服务提供者申请客户端标识。</li>
</ul>


<h3>使用OAuth进行认证和授权的过程如下所示:</h3>

<ol>
<li>用户访问客户端的网站，想操作用户存放在服务提供方的资源。</li>
<li>客户端向服务提供方请求一个临时令牌 (Request Token)。</li>
<li>服务提供方验证客户端的身份后，授予一个临时令牌。</li>
<li>客户端获得临时令牌后，将用户引导至服务提供方的授权页面请求用户授权。在这个过程中将临时令牌和客户端的回调连接发送给服务提供方。</li>
<li>用户在服务提供方的网页上输入用户名和密码，然后授权该客户端访问所请求的资源。</li>
<li>授权成功后，服务提供方引导用户返回客户端的网页。</li>
<li>客户端根据临时令牌从服务提供方那里获取访问令牌 (Access Token)。</li>
<li>服务提供方根据临时令牌和用户的授权情况授予客户端访问令牌。</li>
<li>客户端使用获取的访问令牌访问存放在服务提供方上的受保护的资源。</li>
</ol>


<h3>图例说明</h3>

<p><img src="http://www.wanghd.com/images/post/oauth_flow.png" title="OAuth 图例说明" alt="OAuth" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 介绍]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/07/octopress-introduce/"/>
    <updated>2012-07-07T03:10:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/07/octopress-introduce</id>
    <content type="html"><![CDATA[<h2>安装octopress</h2>

<blockquote><p>安装一下ruby和rvm</p>

<p>获取源代码</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.2 <span class="o">&amp;&amp;</span> rvm use 1.9.2
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进程间通信【IPC】]]></title>
    <link href="http://www.wanghd.com/blog/2012/07/06/perl-ipc/"/>
    <updated>2012-07-06T22:28:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2012/07/06/perl-ipc</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">bytes</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Socket</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Carp</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">IO::</span><span class="n">Socket</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Errno</span>  <span class="sx">qw(EINPROGRESS EWOULDBLOCK EISCONN ENOTSOCK</span>
</span><span class='line'><span class="sx">              EPIPE EAGAIN EBADF ECONNRESET ENOPROTOOPT)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLIN</span>        <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLOUT</span>       <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLERR</span>       <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLHUP</span>       <span class="o">=&gt;</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLNVAL</span>      <span class="o">=&gt;</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">POSIX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">socketpair</span><span class="p">(</span><span class="k">my</span> <span class="nv">$ps</span><span class="p">,</span><span class="k">my</span> <span class="nv">$cs</span><span class="p">,</span><span class="n">AF_UNIX</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">,</span><span class="n">PF_UNSPEC</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span> <span class="p">(</span><span class="s">&quot;socketpair fail&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$pid</span><span class="p">;</span>
</span><span class='line'><span class="nb">die</span> <span class="p">(</span><span class="s">&quot;fork fail&quot;</span><span class="p">)</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="p">(</span><span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">select</span><span class="p">(</span> <span class="p">(</span><span class="nb">select</span><span class="p">(</span><span class="nv">$ps</span><span class="p">),</span><span class="vg">$|</span><span class="o">++</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'><span class="nb">select</span><span class="p">(</span> <span class="p">(</span><span class="nb">select</span><span class="p">(</span><span class="nv">$cs</span><span class="p">),</span><span class="vg">$|</span><span class="o">++</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#组长进程</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$pid</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">close</span> <span class="nv">$cs</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">undef</span> <span class="nv">$cs</span><span class="p">;</span>
</span><span class='line'>    <span class="k">our</span> <span class="nv">%des</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fileno</span><span class="p">(</span><span class="nv">$ps</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$des</span><span class="p">{</span><span class="nv">$fn</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$ps</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nn">IO::Handle::</span><span class="n">blocking</span><span class="p">(</span><span class="nv">$ps</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">@poll</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span> <span class="k">my</span><span class="p">(</span><span class="nv">$f</span><span class="p">,</span><span class="nv">$s</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span> <span class="nv">%des</span> <span class="p">){</span>
</span><span class='line'>            <span class="nb">push</span> <span class="nv">@poll</span><span class="p">,</span><span class="nv">$f</span><span class="p">,</span><span class="n">POLLIN</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nn">IO::Poll::</span><span class="n">_poll</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">@poll</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nv">$count</span><span class="p">){</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nv">@poll</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">my</span> <span class="p">(</span><span class="nv">$fd</span><span class="p">,</span> <span class="nv">$state</span><span class="p">)</span> <span class="o">=</span> <span class="nb">splice</span><span class="p">(</span><span class="nv">@poll</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                <span class="k">my</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nb">sysread</span><span class="p">(</span><span class="nv">$des</span><span class="p">{</span><span class="nv">$fd</span><span class="p">},</span><span class="k">my</span> <span class="nv">$data</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">warn</span><span class="p">(</span><span class="s">&quot;warn:$!\n&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$len</span> <span class="o">&amp;&amp;</span> <span class="vg">$!</span> <span class="o">!=</span> <span class="n">EWOULDBLOCK</span> <span class="p">){</span>
</span><span class='line'>                    <span class="nb">delete</span> <span class="nv">$des</span><span class="p">{</span><span class="nv">$fd</span><span class="p">};</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">print</span> <span class="s">&quot;reply:&quot;</span><span class="o">.</span><span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">#print Dumper(\%des);</span>
</span><span class='line'>        <span class="c1">#sleep(1);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">#sleep(5);</span>
</span><span class='line'>    <span class="nb">close</span> <span class="nv">$ps</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">undef</span> <span class="nv">$ps</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">#print &quot;$$\n&quot;;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="s">&quot;cs msg!\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nb">length</span> <span class="nv">$str</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="nb">syswrite</span><span class="p">(</span><span class="nv">$cs</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">#如果不sleep 服务器端瞬间拿到N多次的结果。。。 不sleep就得控制长度</span>
</span><span class='line'>        <span class="c1">#sleep 1 if defined $rv &amp;&amp; $rv == $len;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl使用Epoll优化]]></title>
    <link href="http://www.wanghd.com/blog/2011/07/03/perl-epoll/"/>
    <updated>2011-07-03T05:59:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2011/07/03/perl-epoll</id>
    <content type="html"><![CDATA[<blockquote><p>优势：当有事件时才会增加到@events，无需遍历</p>

<p>注意：EPOLLERR，不增加该事件，无法执行到退出</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">IO::</span><span class="n">Socket</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">POSIX</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Socket</span> <span class="sx">qw(SO_KEEPALIVE)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">bytes</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">IO::</span><span class="n">Poll</span><span class="p">;</span>
</span><span class='line'><span class="c1">#/Developer/SDKs/MacOSX10.6.sdk/usr/include/sys/errno.h</span>
</span><span class='line'><span class="c1">#死活没找到，find / -name errno.h -print了下</span>
</span><span class='line'><span class="k">use</span> <span class="n">Errno</span>  <span class="sx">qw(EINPROGRESS EWOULDBLOCK EISCONN ENOTSOCK</span>
</span><span class='line'><span class="sx">              EPIPE EAGAIN EBADF ECONNRESET ENOPROTOOPT)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">Sys::</span><span class="n">Syscall</span> <span class="sx">qw(:epoll)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLIN</span>        <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLOUT</span>       <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLERR</span>       <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLHUP</span>       <span class="o">=&gt;</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">constant</span> <span class="n">POLLNVAL</span>      <span class="o">=&gt;</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$server</span> <span class="o">=</span> <span class="nn">IO::Socket::</span><span class="n">INET</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">LocalAddr</span> <span class="o">=&gt;</span> <span class="s">&#39;192.168.10.200:8888&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Type</span>      <span class="o">=&gt;</span> <span class="n">SOCK_STREAM</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Proto</span>     <span class="o">=&gt;</span> <span class="s">&#39;tcp&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Blocking</span>  <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Reuse</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Listen</span>    <span class="o">=&gt;</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">&quot;error create socket:$! and $@\n&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$server</span><span class="o">-&gt;</span><span class="n">sockopt</span><span class="p">(</span><span class="n">SO_KEEPALIVE</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$epoll_test</span> <span class="o">=</span> <span class="nn">Sys::Syscall::</span><span class="n">epoll_defined</span><span class="p">();</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$epoll</span> <span class="o">=</span> <span class="n">epoll_create</span><span class="p">(</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@events</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">%des</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">my</span> <span class="nv">$csock</span> <span class="o">=</span> <span class="nv">$server</span><span class="o">-&gt;</span><span class="nb">accept</span><span class="p">){</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fileno</span><span class="p">(</span><span class="nv">$csock</span><span class="p">);</span>
</span><span class='line'>        <span class="n">epoll_ctl</span><span class="p">(</span><span class="nv">$epoll</span><span class="p">,</span><span class="n">EPOLL_CTL_ADD</span><span class="p">,</span><span class="nv">$fn</span><span class="p">,</span><span class="n">EPOLLIN</span><span class="o">|</span><span class="n">EPOLLERR</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$des</span><span class="p">{</span><span class="nv">$fn</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$csock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$evcount</span> <span class="o">=</span> <span class="n">epoll_wait</span><span class="p">(</span><span class="nv">$epoll</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="o">\</span><span class="nv">@events</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$evcount</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$ev</span> <span class="o">=</span> <span class="nv">$events</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$len</span> <span class="o">=</span> <span class="nb">sysread</span><span class="p">(</span><span class="nv">$des</span><span class="p">{</span><span class="nv">$ev</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]},</span><span class="k">my</span> <span class="nv">$data</span><span class="p">,</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$len</span> <span class="o">&amp;&amp;</span> <span class="vg">$!</span> <span class="o">!=</span> <span class="n">EWOULDBLOCK</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">epoll_ctl</span><span class="p">(</span><span class="nv">$epoll</span><span class="p">,</span><span class="n">EPOLL_CTL_DEL</span><span class="p">,</span><span class="nv">$ev</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">EPOLLIN</span><span class="p">);</span>
</span><span class='line'>            <span class="nb">delete</span> <span class="nv">$des</span><span class="p">{</span><span class="nv">$ev</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">print</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">#print Dumper(\%des);</span>
</span><span class='line'>    <span class="c1">#sleep(1);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MogileFS读取文件的过程]]></title>
    <link href="http://www.wanghd.com/blog/2011/07/03/Mogilefs-ReadFile/"/>
    <updated>2011-07-03T05:59:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2011/07/03/Mogilefs-ReadFile</id>
    <content type="html"><![CDATA[<h2>客户端读取文件代码</h2>

<blockquote><p>定义好domain和key就能获取文件内容</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/perl
</span><span class='line'>
</span><span class='line'>use strict;
</span><span class='line'>use warnings;
</span><span class='line'>use MogileFS::Client;
</span><span class='line'>
</span><span class='line'>my %new_opt = ( 
</span><span class='line'>    hosts =&gt; ["127.0.0.1:7001"],
</span><span class='line'>    domain =&gt; "127.0.0.1::test",
</span><span class='line'>); 
</span><span class='line'>my $mogc = MogileFS::Client-&gt;new(%new_opt);
</span><span class='line'>
</span><span class='line'>my $key = "test_key_2";
</span><span class='line'>my $fd = $mogc-&gt;read_file($key);
</span><span class='line'>print while&lt;$fd&gt;;</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>MogileFS::Client与MogileFS::Server通信</h2>

<blockquote><p>通过get_paths取得文件的url路径</p>

<p>MogileFS::ClientHTTPFile通过HTTP获取文件句柄</p>

<blockquote><p>IO::WrapTie可以让返回的内容当文件句柄使用</p></blockquote></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sub read_file {
</span><span class='line'>    my MogileFS::Client $self = shift;
</span><span class='line'>    
</span><span class='line'>    my @paths = $self-&gt;get_paths(@_);
</span><span class='line'>    
</span><span class='line'>    my $path = shift @paths;
</span><span class='line'>
</span><span class='line'>    return if !$path;
</span><span class='line'>
</span><span class='line'>    my @backup_dests = map { [ undef, $_ ] } @paths;
</span><span class='line'>
</span><span class='line'>    return IO::WrapTie::wraptie('MogileFS::ClientHTTPFile',
</span><span class='line'>                                path         =&gt; $path,
</span><span class='line'>                                backup_dests =&gt; \@backup_dests,
</span><span class='line'>                                readonly     =&gt; 1,
</span><span class='line'>                                );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>get_paths调用MogileFS::Backend的do_request方法</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my $res = $self-&gt;{backend}-&gt;do_request
</span><span class='line'>        ("get_paths", {
</span><span class='line'>            domain =&gt; $self-&gt;{domain},
</span><span class='line'>            key    =&gt; $key,
</span><span class='line'>            noverify =&gt; $noverify ? 1 : 0,
</span><span class='line'>            zone   =&gt; $zone,
</span><span class='line'>        %extra_args,
</span><span class='line'>        }) or return ();
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>MogileFS::Backend发送信息</p>

<p>消息的内容是get_paths *****</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my MogileFS::Backend $self = shift;
</span><span class='line'>my ($cmd, $args) = @_; 
</span><span class='line'>my $argstr = _encode_url_string(%$args);
</span><span class='line'>my $req = "$cmd $argstr\r\n";
</span><span class='line'>$rv = send($sock, $req, $FLAG_NOSIGNAL);</span></code></pre></td></tr></table></div></figure>


<h2>服务器端接收消息</h2>

<blockquote><p>$code->($state);是关键，主进程监听到了事件去执行回调</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># Fetch handles with read events</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nv">@poll</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$fd</span><span class="p">,</span> <span class="nv">$state</span><span class="p">)</span> <span class="o">=</span> <span class="nb">splice</span><span class="p">(</span><span class="nv">@poll</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">unless</span> <span class="nv">$state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$pob</span> <span class="o">=</span> <span class="nv">$DescriptorMap</span><span class="p">{</span><span class="nv">$fd</span><span class="p">};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$pob</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$code</span> <span class="o">=</span> <span class="nv">$OtherFds</span><span class="p">{</span><span class="nv">$fd</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$code</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$state</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$pob</span><span class="o">-&gt;</span><span class="n">event_read</span>   <span class="k">if</span> <span class="nv">$state</span> <span class="o">&amp;</span> <span class="n">POLLIN</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$pob</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">};</span>
</span><span class='line'>    <span class="nv">$pob</span><span class="o">-&gt;</span><span class="n">event_write</span>  <span class="k">if</span> <span class="nv">$state</span> <span class="o">&amp;</span> <span class="n">POLLOUT</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$pob</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">};</span>
</span><span class='line'>    <span class="nv">$pob</span><span class="o">-&gt;</span><span class="n">event_err</span>    <span class="k">if</span> <span class="nv">$state</span> <span class="o">&amp;</span> <span class="n">POLLERR</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$pob</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">};</span>
</span><span class='line'>    <span class="nv">$pob</span><span class="o">-&gt;</span><span class="n">event_hup</span>    <span class="k">if</span> <span class="nv">$state</span> <span class="o">&amp;</span> <span class="n">POLLHUP</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$pob</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这就是回调函数，主进程接收请求，创建个MogileFS::Connection::Client</p>

<p>MogileFS::Connection::Client会继承于Danga::Socket,会加到%DescriptorMap里,所以事件循环可以读取到</p>

<p>$pob->event_read   if $state &amp; POLLIN &amp;&amp; ! $pob->{closed};开始读取</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">AddOtherFds</span><span class="p">(</span> <span class="nb">fileno</span><span class="p">(</span><span class="nv">$server</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$csock</span> <span class="o">=</span> <span class="nv">$server</span><span class="o">-&gt;</span><span class="nb">accept</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nn">MogileFS::Connection::</span><span class="n">Client</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$csock</span><span class="p">);</span><span class="c1">#也会被加到%DescriptorMap</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>MogileFS::Connection::Client接收消息和处理</h2>

<blockquote><p>调用handle_request</p>

<blockquote><p>tips:$self->{read_buf} =~ reg 取得需要的东西，并清空</p></blockquote></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># Client</span>
</span><span class='line'><span class="k">sub </span><span class="nf">event_read</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nn">MogileFS::Connection::</span><span class="n">Client</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$bref</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="nb">read</span><span class="p">(</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="nb">close</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="nv">$bref</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">read_buf</span><span class="p">}</span> <span class="o">.=</span> <span class="nv">$$bref</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">read_buf</span><span class="p">}</span> <span class="o">=~</span> <span class="sr">s/^(.*?)\r?\n//</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="nb">length</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">handle_request</span><span class="p">(</span><span class="nv">$1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>调用MogileFS::ProcManager->EnqueueCommandRequest来处理get_paths指令</p>

<blockquote><p>tips:看到可以使用telnet 127.0.0.1 7001连接上server使用!h来获取帮助!stat可以查看服务器状态</p></blockquote></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">handle_request</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$line</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if it&#39;s just &#39;help&#39;, &#39;h&#39;, &#39;?&#39;, or something, do that</span>
</span><span class='line'>    <span class="c1">#if ((substr($line, 0, 1) eq &#39;?&#39;) || ($line eq &#39;help&#39;)) {</span>
</span><span class='line'>    <span class="c1">#    MogileFS::ProcManager-&gt;SendHelp($_[1]);</span>
</span><span class='line'>    <span class="c1">#    return;</span>
</span><span class='line'>    <span class="c1">#}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">=~</span><span class="sr"> /^!(\S+)(?:\s+(.+))?$/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$cmd</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$1</span><span class="p">,</span> <span class="nv">$2</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">handle_admin_command</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">EnqueueCommandRequest</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="nv">$self</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>加到待处理等列里，并开始处理</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">EnqueueCommandRequest</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$client</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@PendingQueries</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                           <span class="nv">$client</span><span class="p">,</span>
</span><span class='line'>                           <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="n">peer_ip_string</span> <span class="o">||</span> <span class="s">&#39;0.0.0.0&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="s">&quot; $line&quot;</span>
</span><span class='line'>                           <span class="p">];</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">ProcessQueues</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果有空闲的query-worker和待处理的队列，那就开始行动</p>

<p>所以queryworker的数量决定了，MogileFS的处理能力，当然加大数量也会加大DB压力，memcache能缓解部分压力</p>

<p>$Mappings{$worker->{fd}} = $clref;设置Mappings，等下返回结果时，这个client句柄还要用的</p>

<p>$worker->write(&#8220;$worker->{pid}-$worker->{reqid} $clref->[1]\r\n&#8221;);向真正的worker发送消息，让他干活</p>

<blockquote><p>tips:例子123-455 10.2.3.123 get_paths foo=bar&amp;blah=bar\r\n</p></blockquote>

<p>$Stats都是存储当前服务器状态的，times_out_of_qworkers可以看出worker是不是处理不过来</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">ProcessQueues</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="nv">$IsChild</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># try to match up a client with a worker</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">@IdleQueryWorkers</span> <span class="o">&amp;&amp;</span> <span class="nv">@PendingQueries</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># get client that isn&#39;t closed</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$clref</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$clref</span> <span class="o">&amp;&amp;</span> <span class="nv">@PendingQueries</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$clref</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@PendingQueries</span>
</span><span class='line'>                <span class="ow">or</span> <span class="k">next</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$clref</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$clref</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'>                <span class="k">next</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="nv">$clref</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># get worker and make sure it&#39;s not closed already</span>
</span><span class='line'>        <span class="k">my</span> <span class="nn">MogileFS::Connection::</span><span class="n">Worker</span> <span class="nv">$worker</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@IdleQueryWorkers</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">defined</span> <span class="nv">$worker</span> <span class="o">||</span> <span class="nv">$worker</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">unshift</span> <span class="nv">@PendingQueries</span><span class="p">,</span> <span class="nv">$clref</span><span class="p">;</span>
</span><span class='line'>            <span class="k">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># put in mapping and send data to worker</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@$clref</span><span class="p">,</span> <span class="nn">Time::HiRes::</span><span class="n">time</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$Mappings</span><span class="p">{</span><span class="nv">$worker</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fd</span><span class="p">}}</span> <span class="o">=</span> <span class="nv">$clref</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$Stats</span><span class="p">{</span><span class="n">queries</span><span class="p">}</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># increment our counter so we know what request counter this is going out</span>
</span><span class='line'>        <span class="nv">$worker</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">reqid</span><span class="p">}</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="c1"># so we&#39;re writing a string of the form:</span>
</span><span class='line'>        <span class="c1">#     123-455 10.2.3.123 get_paths foo=bar&amp;blah=bar\r\n</span>
</span><span class='line'>        <span class="nv">$worker</span><span class="o">-&gt;</span><span class="nb">write</span><span class="p">(</span><span class="s">&quot;$worker-&gt;{pid}-$worker-&gt;{reqid} $clref-&gt;[1]\r\n&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">@PendingQueries</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># Don&#39;t like the name. Feel free to change if you find better.</span>
</span><span class='line'>        <span class="nv">$Stats</span><span class="p">{</span><span class="n">times_out_of_qworkers</span><span class="p">}</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>真正的QueryWorker开始干活，MogileFS::Worker::Query</h2>

<blockquote><p>select判断是否可以读取</p>

<blockquote><p>tips:vec($rin, fileno($psock), 1) = 1; 设置2进制数值，如果fileno=5那么返回的数值就是00010000</p></blockquote>

<p>sysread取得socket内容</p>

<p>process_line处理get_paths命令</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">work</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$psock</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">psock</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$rin</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">vec</span><span class="p">(</span><span class="nv">$rin</span><span class="p">,</span> <span class="nb">fileno</span><span class="p">(</span><span class="nv">$psock</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$rout</span><span class="p">;</span>
</span><span class='line'>        <span class="k">unless</span> <span class="p">(</span><span class="nb">select</span><span class="p">(</span><span class="nv">$rout</span><span class="o">=</span><span class="nv">$rin</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">still_alive</span><span class="p">;</span>
</span><span class='line'>            <span class="k">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$newread</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="nb">sysread</span><span class="p">(</span><span class="nv">$psock</span><span class="p">,</span> <span class="nv">$newread</span><span class="p">,</span> <span class="mi">1024</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nb">defined</span> <span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">die</span> <span class="s">&quot;While reading pipe from parent, got EOF.  Parent&#39;s gone.  Quitting.\n&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">die</span> <span class="s">&quot;Error reading pipe from parent: $!\n&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$buf</span> <span class="o">.=</span> <span class="nv">$newread</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nv">$buf</span> <span class="o">=~</span> <span class="sr">s/^(.+?)\r?\n//</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="n">process_generic_command</span><span class="p">(</span><span class="o">\</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">still_alive</span><span class="p">;</span>  <span class="c1"># no-op for watchdog</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">validate_dbh</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">process_line</span><span class="p">(</span><span class="o">\</span><span class="nv">$line</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>MogileFS::Worker::Query处理命令</h2>

<p>process_line调用cmd_get_paths方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#设置符号表</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$cmd_handler</span> <span class="o">=</span> <span class="o">*</span><span class="p">{</span><span class="s">&quot;cmd_$cmd&quot;</span><span class="p">}{</span><span class="n">CODE</span><span class="p">};</span>
</span><span class='line'><span class="nv">$cmd_handler</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>MogileFS::Config->memcache_client 取得memcache</p>

<p>my $mogfid_memkey = &#8220;mogfid:$args->{dmid}:$key&#8221;;这是存fidid的key</p>

<p>my $devid_memkey = &#8220;mogdevids:&#8221; . $fid->id;这是文件存在哪里的缓存key</p>

<blockquote><p>tips:如果没有就查询数据库SELECT devid FROM file_on WHERE fid=?</p></blockquote>

<p>万事具备，就差拼url了，执行MogileFS::DevFID->new($dev, $fid); my $path = $dfid->get_url;</p>

<p>return $self->ok_line($ret);最终返回带有OK字样的结果</p>

<blockquote><p>tips:ok_line里 $self->send_to_parent(&#8220;${id}${delay}OK $argline&#8221;);通过ipc告诉父进程</p></blockquote></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">cmd_get_paths</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nn">MogileFS::Worker::</span><span class="n">Query</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$args</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># memcache mappings are as follows:</span>
</span><span class='line'>    <span class="c1">#  mogfid:&lt;dmid&gt;:&lt;dkey&gt; -&gt; fidid</span>
</span><span class='line'>    <span class="c1">#  mogdevids:&lt;fidid&gt;    -&gt; \@devids  (and TODO: invalidate when the replication or deletion is run!)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if you specify &#39;noverify&#39;, that means a correct answer isn&#39;t needed and memcache can</span>
</span><span class='line'>    <span class="c1"># be used.</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$memc</span>          <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">Config</span><span class="o">-&gt;</span><span class="n">memcache_client</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$get_from_memc</span> <span class="o">=</span> <span class="nv">$memc</span> <span class="o">&amp;&amp;</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">noverify</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$memcache_ttl</span>  <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">Config</span><span class="o">-&gt;</span><span class="n">server_setting_cached</span><span class="p">(</span><span class="s">&quot;memcache_ttl&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">3600</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># validate domain for plugins</span>
</span><span class='line'>    <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">dmid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">check_domain</span><span class="p">(</span><span class="nv">$args</span><span class="p">)</span>
</span><span class='line'>        <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&#39;domain_not_found&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># now invoke the plugin, abort if it tells us to</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">run_global_hook</span><span class="p">(</span><span class="s">&#39;cmd_get_paths&#39;</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&#39;plugin_aborted&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">defined</span> <span class="nv">$rv</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$rv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># validate parameters</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dmid</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">dmid</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">key</span><span class="p">}</span> <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;no_key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># We default to returning two possible paths.</span>
</span><span class='line'>    <span class="c1"># but the client may ask for more if they want.</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$pathcount</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pathcount</span><span class="p">}</span> <span class="o">||</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$pathcount</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">if</span> <span class="nv">$pathcount</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># get DB handle </span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$fid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$need_fid_in_memcache</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$mogfid_memkey</span> <span class="o">=</span> <span class="s">&quot;mogfid:$args-&gt;{dmid}:$key&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$get_from_memc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$fidid</span> <span class="o">=</span> <span class="nv">$memc</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="nv">$mogfid_memkey</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$fid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$fidid</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$need_fid_in_memcache</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">$fid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nn">Mgd::</span><span class="n">get_store</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">slaves_ok</span><span class="p">(</span><span class="k">sub </span><span class="p">{</span>
</span><span class='line'>            <span class="nv">$fid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">FID</span><span class="o">-&gt;</span><span class="n">new_from_dmid_and_key</span><span class="p">(</span><span class="nv">$dmid</span><span class="p">,</span> <span class="nv">$key</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nv">$fid</span> <span class="ow">or</span> <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">err_line</span><span class="p">(</span><span class="s">&quot;unknown_key&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># add to memcache, if needed.  for an hour. </span>
</span><span class='line'>    <span class="nv">$memc</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="nv">$mogfid_memkey</span><span class="p">,</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="nv">$memcache_ttl</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$need_fid_in_memcache</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$memc</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$get_from_memc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dmap</span> <span class="o">=</span> <span class="nn">Mgd::</span><span class="n">device_factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">map_by_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$ret</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">paths</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># find devids that FID is on in memcache or db.</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@fid_devids</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$need_devids_in_memcache</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$devid_memkey</span> <span class="o">=</span> <span class="s">&quot;mogdevids:&quot;</span> <span class="o">.</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$get_from_memc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$list</span> <span class="o">=</span> <span class="nv">$memc</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="nv">$devid_memkey</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">@fid_devids</span> <span class="o">=</span> <span class="nv">@$list</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$need_devids_in_memcache</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">@fid_devids</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nn">Mgd::</span><span class="n">get_store</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">slaves_ok</span><span class="p">(</span><span class="k">sub </span><span class="p">{</span>
</span><span class='line'>            <span class="nv">@fid_devids</span> <span class="o">=</span> <span class="nv">$fid</span><span class="o">-&gt;</span><span class="n">devids</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nv">$memc</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="nv">$devid_memkey</span><span class="p">,</span> <span class="o">\</span><span class="nv">@fid_devids</span><span class="p">,</span> <span class="nv">$memcache_ttl</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$need_devids_in_memcache</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$memc</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$get_from_memc</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@devices</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$dmap</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="p">}</span> <span class="nv">@fid_devids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@sorted_devs</span><span class="p">;</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nn">MogileFS::</span><span class="n">run_global_hook</span><span class="p">(</span><span class="s">&#39;cmd_get_paths_order_devices&#39;</span><span class="p">,</span> <span class="o">\</span><span class="nv">@devices</span><span class="p">,</span> <span class="o">\</span><span class="nv">@sorted_devs</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">@sorted_devs</span> <span class="o">=</span> <span class="n">sort_devs_by_utilization</span><span class="p">(</span><span class="nv">@devices</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># keep one partially-bogus path around just in case we have nothing else to send. </span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$backup_path</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># construct result paths </span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$dev</span> <span class="p">(</span><span class="nv">@sorted_devs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="nv">$dev</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">can_read_from</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$host</span> <span class="o">=</span> <span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="nv">$dev</span> <span class="o">&amp;&amp;</span> <span class="nv">$host</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$dfid</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">DevFID</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$dev</span><span class="p">,</span> <span class="nv">$fid</span><span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">get_url</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$currently_down</span> <span class="o">=</span>
</span><span class='line'>            <span class="nv">$host</span><span class="o">-&gt;</span><span class="n">observed_unreachable</span> <span class="o">||</span> <span class="nv">$dev</span><span class="o">-&gt;</span><span class="n">observed_unreachable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$currently_down</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$backup_path</span> <span class="o">=</span> <span class="nv">$path</span><span class="p">;</span>
</span><span class='line'>            <span class="k">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># only verify size one first one, and never verify if they&#39;ve asked not to </span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span>
</span><span class='line'>            <span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">paths</span><span class="p">}</span>        <span class="o">||</span>
</span><span class='line'>            <span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">noverify</span><span class="p">}</span>    <span class="o">||</span>
</span><span class='line'>            <span class="nv">$dfid</span><span class="o">-&gt;</span><span class="n">size_matches</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="o">++</span><span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">paths</span><span class="p">};</span>
</span><span class='line'>        <span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&quot;path$n&quot;</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$path</span><span class="p">;</span>
</span><span class='line'>        <span class="k">last</span> <span class="k">if</span> <span class="nv">$n</span> <span class="o">==</span> <span class="nv">$pathcount</span><span class="p">;</span>   <span class="c1"># one verified, one likely seems enough for now.  time will tell. </span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># use our backup path if all else fails</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$backup_path</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">paths</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">paths</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$ret</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">path1</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$backup_path</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">ok_line</span><span class="p">(</span><span class="nv">$ret</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">ok_line</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nn">MogileFS::Worker::</span><span class="n">Query</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$delay</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">querystarttime</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$delay</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;%.4f &quot;</span><span class="p">,</span> <span class="nn">Time::HiRes::</span><span class="n">tv_interval</span><span class="p">(</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">querystarttime</span><span class="p">}</span> <span class="p">));</span>
</span><span class='line'>        <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">querystarttime</span><span class="p">}</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$id</span> <span class="o">=</span> <span class="nb">defined</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">reqid</span><span class="p">}</span> <span class="p">?</span> <span class="s">&quot;$self-&gt;{reqid} &quot;</span> <span class="p">:</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$args</span> <span class="o">=</span> <span class="nb">shift</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$argline</span> <span class="o">=</span> <span class="nb">join</span><span class="p">(</span><span class="s">&#39;&amp;&#39;</span><span class="p">,</span> <span class="nb">map</span> <span class="p">{</span> <span class="n">eurl</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span> <span class="o">.</span> <span class="s">&quot;=&quot;</span> <span class="o">.</span> <span class="n">eurl</span><span class="p">(</span><span class="nv">$args</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$_</span><span class="p">})</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">%$args</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">send_to_parent</span><span class="p">(</span><span class="s">&quot;${id}${delay}OK $argline&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>主进程还在事件循环，MogileFS::Connection::Worker接受刚才的OK数据</h2>

<blockquote><p>因为是queryworker所以调用HandleQueryWorkerResponse</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">event_read</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nn">MogileFS::Connection::</span><span class="n">Worker</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if we read data from it, it&#39;s not blocked on something else.</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">note_alive</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$bref</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="nb">read</span><span class="p">(</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="nb">close</span><span class="p">()</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="nv">$bref</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">read_buf</span><span class="p">}</span> <span class="o">.=</span> <span class="nv">$$bref</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">read_buf</span><span class="p">}</span> <span class="o">=~</span> <span class="sr">s/^(.+?)\r?\n//</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="n">job</span> <span class="ow">eq</span> <span class="s">&#39;queryworker&#39;</span> <span class="o">&amp;&amp;</span> <span class="nv">$line</span> <span class="o">!~</span> <span class="sr">/^(?:\:|error|debug)/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">HandleQueryWorkerResponse</span><span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">HandleChildRequest</span><span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>真正的返回数据</h2>

<blockquote><p>my ($client, $jobstr, $starttime) = @{ $Mappings{$worker->{fd}} };还记得Mappings吗，就是这里用</p>

<p>$client->write(&#8220;$res\r\n&#8221;);写入数据，客户端接受</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># called when we get a response from a worker.  this reenqueues the</span>
</span><span class='line'><span class="c1"># worker so it can handle another response as well as passes the answer</span>
</span><span class='line'><span class="c1"># back on to the client.</span>
</span><span class='line'><span class="k">sub </span><span class="nf">HandleQueryWorkerResponse</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># got a response from a worker</span>
</span><span class='line'>    <span class="k">my</span> <span class="nn">MogileFS::Connection::</span><span class="n">Worker</span> <span class="nv">$worker</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$line</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">undef</span><span class="p">,</span> <span class="nv">$worker</span><span class="p">,</span> <span class="nv">$line</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nn">Mgd::</span><span class="n">error</span><span class="p">(</span><span class="s">&quot;ASSERT: ProcManager (Child) got worker response: $line&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$IsChild</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="nv">$worker</span> <span class="o">&amp;&amp;</span> <span class="nv">$Mappings</span><span class="p">{</span><span class="nv">$worker</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fd</span><span class="p">}};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># get the client we&#39;re working with (if any)</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$jobstr</span><span class="p">,</span> <span class="nv">$starttime</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$Mappings</span><span class="p">{</span><span class="nv">$worker</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">fd</span><span class="p">}}</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if we have no client, then we just got a standard message from</span>
</span><span class='line'>    <span class="c1"># the queryworker and need to pass it up the line</span>
</span><span class='line'>    <span class="k">return</span> <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">HandleChildRequest</span><span class="p">(</span><span class="nv">$worker</span><span class="p">,</span> <span class="nv">$line</span><span class="p">)</span> <span class="k">if</span> <span class="o">!</span><span class="nv">$client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># at this point it was a command response, but if the client has gone</span>
</span><span class='line'>    <span class="c1"># away, just reenqueue this query worker</span>
</span><span class='line'>    <span class="k">return</span> <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">NoteIdleQueryWorker</span><span class="p">(</span><span class="nv">$worker</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">closed</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># &lt;numeric id&gt; [client-side time to complete] &lt;response&gt;</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$time</span><span class="p">,</span> <span class="nv">$id</span><span class="p">,</span> <span class="nv">$res</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">=~</span><span class="sr"> /^(\d+-\d+)\s+(\-?\d+\.\d+)\s+(.+)$/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># save time and response for use later</span>
</span><span class='line'>        <span class="c1"># Note the optional negative sign in the regexp.  Somebody</span>
</span><span class='line'>        <span class="c1"># on the mailing list was getting a time of -0.0000, causing</span>
</span><span class='line'>        <span class="c1"># broken connections.</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$time</span><span class="p">,</span> <span class="nv">$res</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$1</span><span class="p">,</span> <span class="nv">$2</span><span class="p">,</span> <span class="nv">$3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># now, if it doesn&#39;t match</span>
</span><span class='line'>    <span class="k">unless</span> <span class="p">(</span><span class="nv">$id</span> <span class="o">&amp;&amp;</span> <span class="nv">$id</span> <span class="ow">eq</span> <span class="s">&quot;$worker-&gt;{pid}-$worker-&gt;{reqid}&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$id</span>   <span class="o">=</span> <span class="s">&quot;&lt;undef&gt;&quot;</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$line</span> <span class="o">=</span> <span class="s">&quot;&lt;undef&gt;&quot;</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="nv">$line</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$line</span> <span class="o">=~</span> <span class="sr">s/\n/\\n/g</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$line</span> <span class="o">=~</span> <span class="sr">s/\r/\\r/g</span><span class="p">;</span>
</span><span class='line'>        <span class="nn">Mgd::</span><span class="n">error</span><span class="p">(</span><span class="s">&quot;Worker responded with id $id (line: [$line]), but expected id $worker-&gt;{pid}-$worker-&gt;{reqid}, killing&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$client</span><span class="o">-&gt;</span><span class="nb">close</span><span class="p">(</span><span class="s">&#39;worker_mismatch&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">AskWorkerToDie</span><span class="p">(</span><span class="nv">$worker</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># now time this interval and add to @RecentQueries</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$tinterval</span> <span class="o">=</span> <span class="nn">Time::HiRes::</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$starttime</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@RecentQueries</span><span class="p">,</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;%s %.4f %s&quot;</span><span class="p">,</span> <span class="nv">$jobstr</span><span class="p">,</span> <span class="nv">$tinterval</span><span class="p">,</span> <span class="nv">$time</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">shift</span> <span class="nv">@RecentQueries</span> <span class="k">if</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">@RecentQueries</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># send text to client, put worker back in queue</span>
</span><span class='line'>    <span class="nv">$client</span><span class="o">-&gt;</span><span class="nb">write</span><span class="p">(</span><span class="s">&quot;$res\r\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">NoteIdleQueryWorker</span><span class="p">(</span><span class="nv">$worker</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>绕了一大圈终于回来了</h2>

<blockquote><p>_wait_for_readability等待socket有返回数据</p>

<p>如果OK就返回decode的引用</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># wait up to 3 seconds for the socket to come to life</span>
</span><span class='line'><span class="k">unless</span> <span class="p">(</span><span class="n">_wait_for_readability</span><span class="p">(</span><span class="nb">fileno</span><span class="p">(</span><span class="nv">$sock</span><span class="p">),</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">timeout</span><span class="p">}))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nv">$sock</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">run_hook</span><span class="p">(</span><span class="s">&#39;do_request_read_timeout&#39;</span><span class="p">,</span> <span class="nv">$cmd</span><span class="p">,</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">last_host_connected</span><span class="p">});</span>
</span><span class='line'>    <span class="nb">undef</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">sock_cache</span><span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_fail</span><span class="p">(</span><span class="s">&quot;timed out after $self-&gt;{timeout}s against $self-&gt;{last_host_connected} when sending command: [$req]&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$line</span> <span class="o">=</span> <span class="sr">&lt;$sock&gt;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># OK &lt;arg_len&gt; &lt;response&gt;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">=~</span><span class="sr"> /^OK\s+\d*\s*(\S*)/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$args</span> <span class="o">=</span> <span class="n">_decode_url_string</span><span class="p">(</span><span class="nv">$1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_debug</span><span class="p">(</span><span class="s">&quot;RETURN_VARS: &quot;</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$args</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MogileFS启动流程]]></title>
    <link href="http://www.wanghd.com/blog/2011/07/03/Mogilefs-Init/"/>
    <updated>2011-07-03T05:59:00+08:00</updated>
    <id>http://www.wanghd.com/blog/2011/07/03/Mogilefs-Init</id>
    <content type="html"><![CDATA[<h2>实例化MogileFS::Server并运行</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my $server; # server singleton
</span><span class='line'>sub server {
</span><span class='line'>    my ($pkg) = @_; 
</span><span class='line'>    return $server ||= bless {}, $pkg;#空就创建对象，有就返回，单例
</span><span class='line'>}
</span><span class='line'>$server-&gt;run();</span></code></pre></td></tr></table></div></figure>


<h2>读取配置</h2>

<blockquote><p>优先级，命令行>配置文件>默认配置</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MogileFS::Config-&gt;load_config;</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>获得数据库操作句柄</h2>

<blockquote><p>MogileFS::Store是数据库操作的基类,实际返回的对象是MogileFS::Store::MySQL</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MogileFS::Config-&gt;check_database;
</span><span class='line'>my $sto = eval { Mgd::get_store() };
</span><span class='line'>sub get_store {
</span><span class='line'>    return $store = MogileFS::Store-&gt;new;
</span><span class='line'>}
</span><span class='line'>$sto-&gt;ping;
</span><span class='line'>sub ping {
</span><span class='line'>    my $self = shift;
</span><span class='line'>    return $self-&gt;dbh-&gt;ping;
</span><span class='line'>}
</span><span class='line'>$self-&gt;{dbh} = DBI-&gt;connect($self-&gt;{dsn}, $self-&gt;{user}, $self-&gt;{pass}</span></code></pre></td></tr></table></div></figure>


<h2>设置fidid fidid就是数据库中fid的最大值，但对这次启动来说是最小值</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my $min_fidid = $sto-&gt;max_fidid;
</span><span class='line'>sub max_fidid {
</span><span class='line'>    my $self = shift;
</span><span class='line'>    return $self-&gt;dbh-&gt;selectrow_array("SELECT MAX(fid) FROM file");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>设置为守护进程 MogileFS::Util->daemonize()</h2>

<blockquote><p>两次fork后成为守护进程</p>

<blockquote><p>第一次fork后，父进程关闭，子进程成为孤儿进程，init接管</p>

<p>setsid让孤儿进程脱离会话，并成为进程组，脱离终端。</p>

<p>忽略挂起信号</p>

<p>第二次fork后，父进程关闭，子进程成为孤儿进程，init接管，成为守护进程</p>

<blockquote><p>据说调用第二次fork可以彻底排除取得会话的可能</p></blockquote></blockquote></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">daemonize</span><span class="p">()</span> <span class="k">if</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&quot;daemonize&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">sub </span><span class="nf">daemonize</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">)</span> <span class="p">{</span> <span class="nb">exit</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">croak</span> <span class="s">&quot;Cannot detach from controlling terminal&quot;</span>
</span><span class='line'>        <span class="k">unless</span> <span class="nv">$sess_id</span> <span class="o">=</span> <span class="nn">POSIX::</span><span class="n">setsid</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$SIG</span><span class="p">{</span><span class="s">&#39;HUP&#39;</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;IGNORE&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">)</span> <span class="p">{</span> <span class="nb">exit</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">chdir</span> <span class="s">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">umask</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置进程信号处理</h2>

<blockquote><p>程序自己中断的信号TERM和外部中断信号INT是类似的，干掉所有子进程，删除PID文件</p>

<p>管道信号忽略，(只有写，没有读的管道，会发出这种信号)</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$SIG</span><span class="p">{</span><span class="n">TERM</span><span class="p">}</span>  <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@children</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">child_pids</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="bp">STDERR</span> <span class="nb">scalar</span> <span class="nv">@children</span><span class="p">,</span> <span class="s">&quot; children to kill.\n&quot;</span> <span class="k">if</span> <span class="nv">$DEBUG</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nb">kill</span><span class="p">(</span> <span class="s">&#39;TERM&#39;</span> <span class="o">=&gt;</span> <span class="nv">@children</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">print</span> <span class="bp">STDERR</span> <span class="s">&quot;Sent SIGTERM to $count children.\n&quot;</span> <span class="k">if</span> <span class="nv">$DEBUG</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">remove_pidfile</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">Mgd::</span><span class="n">log</span><span class="p">(</span><span class="s">&#39;info&#39;</span><span class="p">,</span> <span class="s">&#39;ending run due to SIGTERM&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nn">Sys::Syslog::</span><span class="n">closelog</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$SIG</span><span class="p">{</span><span class="n">INT</span><span class="p">}</span> <span class="o">=</span> <span class="n">sub</span><span class="p">{</span><span class="err">同上</span><span class="p">}</span>
</span><span class='line'><span class="nv">$SIG</span><span class="p">{</span><span class="n">PIPE</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;IGNORE&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建服务器端socket</h2>

<blockquote><p>Danga::Socket是一个socket事件驱动，处理客户端请求的是MogileFS::Connection::Client</p>

<p>设置%OtherFds</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">@servers</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$listen</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&#39;listen&#39;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$server</span> <span class="o">=</span> <span class="nn">IO::Socket::</span><span class="n">INET</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">LocalAddr</span> <span class="o">=&gt;</span> <span class="nv">$listen</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">Type</span>      <span class="o">=&gt;</span> <span class="n">SOCK_STREAM</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">Proto</span>     <span class="o">=&gt;</span> <span class="s">&#39;tcp&#39;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">Blocking</span>  <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">Reuse</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span><span class="c1">#调用Reuse可以免去服务器在终止到重启之间的所停留的时间</span>
</span><span class='line'>                                       <span class="n">Listen</span>    <span class="o">=&gt;</span> <span class="mi">1024</span> <span class="p">)</span> <span class="c1">#监听队列，其实就是连接数</span>
</span><span class='line'>        <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;Error creating socket: $@\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$server</span><span class="o">-&gt;</span><span class="n">sockopt</span><span class="p">(</span><span class="n">SO_KEEPALIVE</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="c1"># save sub to accept a client</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@servers</span><span class="p">,</span> <span class="nv">$server</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">AddOtherFds</span><span class="p">(</span> <span class="nb">fileno</span><span class="p">(</span><span class="nv">$server</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$csock</span> <span class="o">=</span> <span class="nv">$server</span><span class="o">-&gt;</span><span class="nb">accept</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nn">MogileFS::Connection::</span><span class="n">Client</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$csock</span><span class="p">);</span><span class="c1">#也会被加到%DescriptorMap</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置socket事件处理后的回调，并开始循环</h2>

<blockquote><p>MogileFS::ProcManager  进程管理工具</p>

<p><em>EventLoop = </em>FirstTimeEventLoop; 符号表设置，调用的是FirstTimeEventLoop</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">push_pre_fork_cleanup</span><span class="p">(</span><span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="c1"># so children don&#39;t hold server connection open</span>
</span><span class='line'>    <span class="c1">#关闭连接的匿名函数,给子进程用的</span>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span> <span class="k">foreach</span> <span class="nv">@servers</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># setup the post event loop callback to spawn jobs, and the timeout</span>
</span><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">DebugLevel</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span><span class="c1">#始终是0</span>
</span><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">SetLoopTimeout</span><span class="p">(</span> <span class="mi">250</span> <span class="p">);</span> <span class="c1">#事件超时 250 milliseconds</span>
</span><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">SetPostLoopCallback</span><span class="p">(</span><span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">PostEventLoopChecker</span><span class="p">);</span><span class="c1">#每次事件驱动完成后执行的函数</span>
</span><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">EventLoop</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Socket轮询器选择</h2>

<blockquote><p>我本机为Poll,以后调用EventLoop就是PollEventLoop了,Poll需要轮询，</p>

<p>线上应该为Epoll,Epoll内核提供反射模式，无需轮询</p>

<p>Epoll和Poll那种更好，可能取决于活跃的Socket。。。，如果全是活跃的呢</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">FirstTimeEventLoop</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$class</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_InitPoller</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$HaveEpoll</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">EpollEventLoop</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nv">$HaveKQueue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">KQueueEventLoop</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PollEventLoop</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">*</span><span class="n">EventLoop</span> <span class="o">=</span> <span class="o">*</span><span class="n">PollEventLoop</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第一次轮询开始</h2>

<blockquote><p>还记得Danga::Socket->SetPostLoopCallback(MogileFS::ProcManager->PostEventLoopChecker);吗？，第一次轮询直接回调</p>

<p>还记得%OtherFds吗，主进程的socket在里面,%DescriptorMap暂时还没，不过这个散列很重要</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">@poll</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$fd</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%OtherFds</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@poll</span><span class="p">,</span> <span class="nv">$fd</span><span class="p">,</span> <span class="n">POLLIN</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span> <span class="k">my</span> <span class="p">(</span><span class="nv">$fd</span><span class="p">,</span> <span class="nv">$sock</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span> <span class="nv">%DescriptorMap</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@poll</span><span class="p">,</span> <span class="nv">$fd</span><span class="p">,</span> <span class="nv">$sock</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">event_watch</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nn">IO::Poll::</span><span class="n">_poll</span><span class="p">(</span><span class="nv">$timeout</span><span class="p">,</span> <span class="nv">@poll</span><span class="p">);</span>
</span><span class='line'><span class="k">unless</span> <span class="p">(</span><span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="n">PostEventLoop</span><span class="p">();</span>
</span><span class='line'>    <span class="k">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建Monitor子进程</h2>

<blockquote><p>创建一副IPC通信一个给父进程，一个给子进程,并切无缓冲</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">socketpair</span><span class="p">(</span><span class="k">my</span> <span class="nv">$parents_ipc</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$childs_ipc</span><span class="p">,</span> <span class="n">AF_UNIX</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">PF_UNSPEC</span> <span class="p">)</span>
</span><span class='line'>        <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span> <span class="s">&quot;Sockpair failed&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">select</span><span class="p">((</span><span class="nb">select</span><span class="p">(</span> <span class="nv">$parents_ipc</span> <span class="p">),</span> <span class="vg">$|</span><span class="o">++</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="nb">select</span><span class="p">((</span><span class="nb">select</span><span class="p">(</span> <span class="nv">$childs_ipc</span>  <span class="p">),</span> <span class="vg">$|</span><span class="o">++</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>父类返回MogileFS::Connection::Worker对象,构造参数是IPC中的一个</p>

<p>MogileFS::Connection::Worker继承Danga::Socket,会增加到$DescriptorMap{$fd} = $self;</p>

<p>MogileFS::ProcManager->RegisterWorkerConn 设置POLLIN和$ChildrenByJob{$worker->job}->{$worker->pid} = $worker;</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># if i&#39;m the parent</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$pid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sigprocmask</span><span class="p">(</span><span class="n">SIG_UNBLOCK</span><span class="p">,</span> <span class="nv">$sigset</span><span class="p">)</span>
</span><span class='line'>        <span class="ow">or</span> <span class="k">return</span> <span class="n">error</span><span class="p">(</span><span class="s">&quot;Can&#39;t unblock SIGINT for fork: $!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nv">$childs_ipc</span><span class="p">);</span>  <span class="c1"># unnecessary but explicit</span>
</span><span class='line'>    <span class="nn">IO::Handle::</span><span class="n">blocking</span><span class="p">(</span><span class="nv">$parents_ipc</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$worker_conn</span> <span class="o">=</span> <span class="nn">MogileFS::Connection::</span><span class="n">Worker</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$parents_ipc</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$worker_conn</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">(</span><span class="nv">$pid</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$worker_conn</span><span class="o">-&gt;</span><span class="n">job</span><span class="p">(</span><span class="nv">$job</span><span class="p">);</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">RegisterWorkerConn</span><span class="p">(</span><span class="nv">$worker_conn</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$worker_conn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>子类通过job_to_class获取MogileFS::Worker::Monitor,然后实例化，调用work运作起来</p>

<p>会增加到$DescriptorMap{$fd} = $self;但是不要和主进程的混淆，完全两个进程里的</p>

<p>子类不会运行到exit,子进程也调用了Danga的socket事件循环</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">foreach</span> <span class="nv">@prefork_cleanup</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$class</span> <span class="o">=</span> <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">job_to_class</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span><span class='line'>        <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;No worker class defined for job &#39;$job&#39;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$worker</span> <span class="o">=</span> <span class="nv">$class</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$childs_ipc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># set our frontend into child mode</span>
</span><span class='line'><span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">SetAsChild</span><span class="p">(</span><span class="nv">$worker</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$worker</span><span class="o">-&gt;</span><span class="n">work</span><span class="p">;</span>
</span><span class='line'><span class="nb">exit</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Monitor进程开始工作</h2>

<blockquote><p>Monitor监控数据库和Storage的情况</p>

<p>最重要的是Monitor启动后，发送了消息<code>":monitor_just_ran"</code>，接着就一直循环监听和处理了</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$db_monitor</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db_monitor</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">parent_ping</span><span class="p">;</span><span class="c1">#和p保持连接</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">cache_refresh</span><span class="p">;</span><span class="c1">#监控数据库配置,及时通知p</span>
</span><span class='line'>    <span class="nv">$db_monitor_ran</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">AddTimer</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">$db_monitor</span><span class="p">);</span><span class="c1">#每4秒查询一次</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$db_monitor</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'><span class="nv">$self</span><span class="o">-&gt;</span><span class="n">read_from_parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$main_monitor</span><span class="p">;</span>
</span><span class='line'><span class="nv">$main_monitor</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">parent_ping</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">usage_refresh</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$db_monitor_ran</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">send_to_parent</span><span class="p">(</span><span class="s">&quot;:monitor_just_ran&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$db_monitor_ran</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">AddTimer</span><span class="p">(</span><span class="mf">2.5</span><span class="p">,</span> <span class="nv">$main_monitor</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$main_monitor</span><span class="o">-&gt;</span><span class="p">();</span>
</span><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">AddOtherFds</span><span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="n">psock_fd</span><span class="p">,</span> <span class="n">sub</span><span class="p">{</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">read_from_parent</span> <span class="p">});</span>
</span><span class='line'><span class="nn">Danga::</span><span class="n">Socket</span><span class="o">-&gt;</span><span class="n">EventLoop</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>MogileFSD进程处理:monitor_just_ran消息</h2>

<blockquote><p>设置完需要的workers后，又和调用创建Monitor一样，创建其他的workers</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$child</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'><span class="c1"># Gas up other workers if monitor&#39;s completed for the first time.</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$monitor_good</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">set_min_workers</span><span class="p">(</span><span class="s">&#39;queryworker&#39;</span> <span class="o">=&gt;</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&#39;query_jobs&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">set_min_workers</span><span class="p">(</span><span class="s">&#39;delete&#39;</span>      <span class="o">=&gt;</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&#39;delete_jobs&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">set_min_workers</span><span class="p">(</span><span class="s">&#39;replicate&#39;</span>   <span class="o">=&gt;</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&#39;replicate_jobs&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">set_min_workers</span><span class="p">(</span><span class="s">&#39;reaper&#39;</span>      <span class="o">=&gt;</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&#39;reaper_jobs&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">set_min_workers</span><span class="p">(</span><span class="s">&#39;fsck&#39;</span>        <span class="o">=&gt;</span> <span class="n">MogileFS</span><span class="o">-&gt;</span><span class="n">config</span><span class="p">(</span><span class="s">&#39;fsck_jobs&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nn">MogileFS::</span><span class="n">ProcManager</span><span class="o">-&gt;</span><span class="n">set_min_workers</span><span class="p">(</span><span class="s">&#39;job_master&#39;</span>  <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$monitor_good</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$allkidsup</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
